
adc_sm_em.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c58  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08007e30  08007e30  00008e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ed8  08007ed8  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007ed8  08007ed8  00008ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ee0  08007ee0  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007ee0  08007ee0  00008ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08007ee8  08007ee8  00008ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007ef0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fbc  2000006c  08007f5c  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001028  08007f5c  0000a028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00041f44  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005bec  00000000  00000000  0004afe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0001ddbe  00000000  00000000  00050bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001950  00000000  00000000  0006e990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000038ce  00000000  00000000  000702e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e832  00000000  00000000  00073bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000388ae  00000000  00000000  000a23e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0014347a  00000000  00000000  000dac8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0021e108  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006594  00000000  00000000  0021e14c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  002246e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000006c 	.word	0x2000006c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007e18 	.word	0x08007e18

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000070 	.word	0x20000070
 8000214:	08007e18 	.word	0x08007e18

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_dmul>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800022e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000236:	bf1d      	ittte	ne
 8000238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800023c:	ea94 0f0c 	teqne	r4, ip
 8000240:	ea95 0f0c 	teqne	r5, ip
 8000244:	f000 f8de 	bleq	8000404 <__aeabi_dmul+0x1dc>
 8000248:	442c      	add	r4, r5
 800024a:	ea81 0603 	eor.w	r6, r1, r3
 800024e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800025a:	bf18      	it	ne
 800025c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000264:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000268:	d038      	beq.n	80002dc <__aeabi_dmul+0xb4>
 800026a:	fba0 ce02 	umull	ip, lr, r0, r2
 800026e:	f04f 0500 	mov.w	r5, #0
 8000272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000276:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800027a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027e:	f04f 0600 	mov.w	r6, #0
 8000282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000286:	f09c 0f00 	teq	ip, #0
 800028a:	bf18      	it	ne
 800028c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000290:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000294:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000298:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800029c:	d204      	bcs.n	80002a8 <__aeabi_dmul+0x80>
 800029e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002a2:	416d      	adcs	r5, r5
 80002a4:	eb46 0606 	adc.w	r6, r6, r6
 80002a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c0:	bf88      	it	hi
 80002c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002c6:	d81e      	bhi.n	8000306 <__aeabi_dmul+0xde>
 80002c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e0:	ea46 0101 	orr.w	r1, r6, r1
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	ea81 0103 	eor.w	r1, r1, r3
 80002ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f0:	bfc2      	ittt	gt
 80002f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002fa:	bd70      	popgt	{r4, r5, r6, pc}
 80002fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000300:	f04f 0e00 	mov.w	lr, #0
 8000304:	3c01      	subs	r4, #1
 8000306:	f300 80ab 	bgt.w	8000460 <__aeabi_dmul+0x238>
 800030a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800030e:	bfde      	ittt	le
 8000310:	2000      	movle	r0, #0
 8000312:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000316:	bd70      	pople	{r4, r5, r6, pc}
 8000318:	f1c4 0400 	rsb	r4, r4, #0
 800031c:	3c20      	subs	r4, #32
 800031e:	da35      	bge.n	800038c <__aeabi_dmul+0x164>
 8000320:	340c      	adds	r4, #12
 8000322:	dc1b      	bgt.n	800035c <__aeabi_dmul+0x134>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f305 	lsl.w	r3, r0, r5
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f205 	lsl.w	r2, r1, r5
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000340:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000348:	fa21 f604 	lsr.w	r6, r1, r4
 800034c:	eb42 0106 	adc.w	r1, r2, r6
 8000350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000354:	bf08      	it	eq
 8000356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f1c4 040c 	rsb	r4, r4, #12
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f304 	lsl.w	r3, r0, r4
 8000368:	fa20 f005 	lsr.w	r0, r0, r5
 800036c:	fa01 f204 	lsl.w	r2, r1, r4
 8000370:	ea40 0002 	orr.w	r0, r0, r2
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f1c4 0520 	rsb	r5, r4, #32
 8000390:	fa00 f205 	lsl.w	r2, r0, r5
 8000394:	ea4e 0e02 	orr.w	lr, lr, r2
 8000398:	fa20 f304 	lsr.w	r3, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea43 0302 	orr.w	r3, r3, r2
 80003a4:	fa21 f004 	lsr.w	r0, r1, r4
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	fa21 f204 	lsr.w	r2, r1, r4
 80003b0:	ea20 0002 	bic.w	r0, r0, r2
 80003b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f094 0f00 	teq	r4, #0
 80003c8:	d10f      	bne.n	80003ea <__aeabi_dmul+0x1c2>
 80003ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	eb41 0101 	adc.w	r1, r1, r1
 80003d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3c01      	subeq	r4, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1a6>
 80003de:	ea41 0106 	orr.w	r1, r1, r6
 80003e2:	f095 0f00 	teq	r5, #0
 80003e6:	bf18      	it	ne
 80003e8:	4770      	bxne	lr
 80003ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	eb43 0303 	adc.w	r3, r3, r3
 80003f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003f8:	bf08      	it	eq
 80003fa:	3d01      	subeq	r5, #1
 80003fc:	d0f7      	beq.n	80003ee <__aeabi_dmul+0x1c6>
 80003fe:	ea43 0306 	orr.w	r3, r3, r6
 8000402:	4770      	bx	lr
 8000404:	ea94 0f0c 	teq	r4, ip
 8000408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800040c:	bf18      	it	ne
 800040e:	ea95 0f0c 	teqne	r5, ip
 8000412:	d00c      	beq.n	800042e <__aeabi_dmul+0x206>
 8000414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000418:	bf18      	it	ne
 800041a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041e:	d1d1      	bne.n	80003c4 <__aeabi_dmul+0x19c>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000432:	bf06      	itte	eq
 8000434:	4610      	moveq	r0, r2
 8000436:	4619      	moveq	r1, r3
 8000438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800043c:	d019      	beq.n	8000472 <__aeabi_dmul+0x24a>
 800043e:	ea94 0f0c 	teq	r4, ip
 8000442:	d102      	bne.n	800044a <__aeabi_dmul+0x222>
 8000444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000448:	d113      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800044a:	ea95 0f0c 	teq	r5, ip
 800044e:	d105      	bne.n	800045c <__aeabi_dmul+0x234>
 8000450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000454:	bf1c      	itt	ne
 8000456:	4610      	movne	r0, r2
 8000458:	4619      	movne	r1, r3
 800045a:	d10a      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800045c:	ea81 0103 	eor.w	r1, r1, r3
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000464:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000476:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <__aeabi_drsub>:
 800047c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	e002      	b.n	8000488 <__adddf3>
 8000482:	bf00      	nop

08000484 <__aeabi_dsub>:
 8000484:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000488 <__adddf3>:
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000492:	ea94 0f05 	teq	r4, r5
 8000496:	bf08      	it	eq
 8000498:	ea90 0f02 	teqeq	r0, r2
 800049c:	bf1f      	itttt	ne
 800049e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ae:	f000 80e2 	beq.w	8000676 <__adddf3+0x1ee>
 80004b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ba:	bfb8      	it	lt
 80004bc:	426d      	neglt	r5, r5
 80004be:	dd0c      	ble.n	80004da <__adddf3+0x52>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	ea82 0000 	eor.w	r0, r2, r0
 80004ce:	ea83 0101 	eor.w	r1, r3, r1
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	2d36      	cmp	r5, #54	@ 0x36
 80004dc:	bf88      	it	hi
 80004de:	bd30      	pophi	{r4, r5, pc}
 80004e0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x70>
 80004f2:	4240      	negs	r0, r0
 80004f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x84>
 8000506:	4252      	negs	r2, r2
 8000508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800050c:	ea94 0f05 	teq	r4, r5
 8000510:	f000 80a7 	beq.w	8000662 <__adddf3+0x1da>
 8000514:	f1a4 0401 	sub.w	r4, r4, #1
 8000518:	f1d5 0e20 	rsbs	lr, r5, #32
 800051c:	db0d      	blt.n	800053a <__adddf3+0xb2>
 800051e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000522:	fa22 f205 	lsr.w	r2, r2, r5
 8000526:	1880      	adds	r0, r0, r2
 8000528:	f141 0100 	adc.w	r1, r1, #0
 800052c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000530:	1880      	adds	r0, r0, r2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	4159      	adcs	r1, r3
 8000538:	e00e      	b.n	8000558 <__adddf3+0xd0>
 800053a:	f1a5 0520 	sub.w	r5, r5, #32
 800053e:	f10e 0e20 	add.w	lr, lr, #32
 8000542:	2a01      	cmp	r2, #1
 8000544:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000548:	bf28      	it	cs
 800054a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054e:	fa43 f305 	asr.w	r3, r3, r5
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800055c:	d507      	bpl.n	800056e <__adddf3+0xe6>
 800055e:	f04f 0e00 	mov.w	lr, #0
 8000562:	f1dc 0c00 	rsbs	ip, ip, #0
 8000566:	eb7e 0000 	sbcs.w	r0, lr, r0
 800056a:	eb6e 0101 	sbc.w	r1, lr, r1
 800056e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000572:	d31b      	bcc.n	80005ac <__adddf3+0x124>
 8000574:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000578:	d30c      	bcc.n	8000594 <__adddf3+0x10c>
 800057a:	0849      	lsrs	r1, r1, #1
 800057c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000580:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000584:	f104 0401 	add.w	r4, r4, #1
 8000588:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800058c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000590:	f080 809a 	bcs.w	80006c8 <__adddf3+0x240>
 8000594:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	ea41 0105 	orr.w	r1, r1, r5
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b0:	4140      	adcs	r0, r0
 80005b2:	eb41 0101 	adc.w	r1, r1, r1
 80005b6:	3c01      	subs	r4, #1
 80005b8:	bf28      	it	cs
 80005ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005be:	d2e9      	bcs.n	8000594 <__adddf3+0x10c>
 80005c0:	f091 0f00 	teq	r1, #0
 80005c4:	bf04      	itt	eq
 80005c6:	4601      	moveq	r1, r0
 80005c8:	2000      	moveq	r0, #0
 80005ca:	fab1 f381 	clz	r3, r1
 80005ce:	bf08      	it	eq
 80005d0:	3320      	addeq	r3, #32
 80005d2:	f1a3 030b 	sub.w	r3, r3, #11
 80005d6:	f1b3 0220 	subs.w	r2, r3, #32
 80005da:	da0c      	bge.n	80005f6 <__adddf3+0x16e>
 80005dc:	320c      	adds	r2, #12
 80005de:	dd08      	ble.n	80005f2 <__adddf3+0x16a>
 80005e0:	f102 0c14 	add.w	ip, r2, #20
 80005e4:	f1c2 020c 	rsb	r2, r2, #12
 80005e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ec:	fa21 f102 	lsr.w	r1, r1, r2
 80005f0:	e00c      	b.n	800060c <__adddf3+0x184>
 80005f2:	f102 0214 	add.w	r2, r2, #20
 80005f6:	bfd8      	it	le
 80005f8:	f1c2 0c20 	rsble	ip, r2, #32
 80005fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000600:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000604:	bfdc      	itt	le
 8000606:	ea41 010c 	orrle.w	r1, r1, ip
 800060a:	4090      	lslle	r0, r2
 800060c:	1ae4      	subs	r4, r4, r3
 800060e:	bfa2      	ittt	ge
 8000610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000614:	4329      	orrge	r1, r5
 8000616:	bd30      	popge	{r4, r5, pc}
 8000618:	ea6f 0404 	mvn.w	r4, r4
 800061c:	3c1f      	subs	r4, #31
 800061e:	da1c      	bge.n	800065a <__adddf3+0x1d2>
 8000620:	340c      	adds	r4, #12
 8000622:	dc0e      	bgt.n	8000642 <__adddf3+0x1ba>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0220 	rsb	r2, r4, #32
 800062c:	fa20 f004 	lsr.w	r0, r0, r4
 8000630:	fa01 f302 	lsl.w	r3, r1, r2
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	fa21 f304 	lsr.w	r3, r1, r4
 800063c:	ea45 0103 	orr.w	r1, r5, r3
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f1c4 040c 	rsb	r4, r4, #12
 8000646:	f1c4 0220 	rsb	r2, r4, #32
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 f304 	lsl.w	r3, r1, r4
 8000652:	ea40 0003 	orr.w	r0, r0, r3
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	fa21 f004 	lsr.w	r0, r1, r4
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	f094 0f00 	teq	r4, #0
 8000666:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800066a:	bf06      	itte	eq
 800066c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000670:	3401      	addeq	r4, #1
 8000672:	3d01      	subne	r5, #1
 8000674:	e74e      	b.n	8000514 <__adddf3+0x8c>
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf18      	it	ne
 800067c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000680:	d029      	beq.n	80006d6 <__adddf3+0x24e>
 8000682:	ea94 0f05 	teq	r4, r5
 8000686:	bf08      	it	eq
 8000688:	ea90 0f02 	teqeq	r0, r2
 800068c:	d005      	beq.n	800069a <__adddf3+0x212>
 800068e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000692:	bf04      	itt	eq
 8000694:	4619      	moveq	r1, r3
 8000696:	4610      	moveq	r0, r2
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf1e      	ittt	ne
 80006a0:	2100      	movne	r1, #0
 80006a2:	2000      	movne	r0, #0
 80006a4:	bd30      	popne	{r4, r5, pc}
 80006a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006aa:	d105      	bne.n	80006b8 <__adddf3+0x230>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	4149      	adcs	r1, r1
 80006b0:	bf28      	it	cs
 80006b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006bc:	bf3c      	itt	cc
 80006be:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006c2:	bd30      	popcc	{r4, r5, pc}
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006cc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf1a      	itte	ne
 80006dc:	4619      	movne	r1, r3
 80006de:	4610      	movne	r0, r2
 80006e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e4:	bf1c      	itt	ne
 80006e6:	460b      	movne	r3, r1
 80006e8:	4602      	movne	r2, r0
 80006ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ee:	bf06      	itte	eq
 80006f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f4:	ea91 0f03 	teqeq	r1, r3
 80006f8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop

08000700 <__aeabi_ui2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000714:	f04f 0500 	mov.w	r5, #0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e750      	b.n	80005c0 <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_i2d>:
 8000720:	f090 0f00 	teq	r0, #0
 8000724:	bf04      	itt	eq
 8000726:	2100      	moveq	r1, #0
 8000728:	4770      	bxeq	lr
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000730:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000734:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000738:	bf48      	it	mi
 800073a:	4240      	negmi	r0, r0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e73e      	b.n	80005c0 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_f2d>:
 8000744:	0042      	lsls	r2, r0, #1
 8000746:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800074a:	ea4f 0131 	mov.w	r1, r1, rrx
 800074e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000752:	bf1f      	itttt	ne
 8000754:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000758:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800075c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000760:	4770      	bxne	lr
 8000762:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000766:	bf08      	it	eq
 8000768:	4770      	bxeq	lr
 800076a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800076e:	bf04      	itt	eq
 8000770:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	e71c      	b.n	80005c0 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_ul2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f04f 0500 	mov.w	r5, #0
 8000796:	e00a      	b.n	80007ae <__aeabi_l2d+0x16>

08000798 <__aeabi_l2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007a6:	d502      	bpl.n	80007ae <__aeabi_l2d+0x16>
 80007a8:	4240      	negs	r0, r0
 80007aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ae:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ba:	f43f aed8 	beq.w	800056e <__adddf3+0xe6>
 80007be:	f04f 0203 	mov.w	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d6:	f1c2 0320 	rsb	r3, r2, #32
 80007da:	fa00 fc03 	lsl.w	ip, r0, r3
 80007de:	fa20 f002 	lsr.w	r0, r0, r2
 80007e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e6:	ea40 000e 	orr.w	r0, r0, lr
 80007ea:	fa21 f102 	lsr.w	r1, r1, r2
 80007ee:	4414      	add	r4, r2
 80007f0:	e6bd      	b.n	800056e <__adddf3+0xe6>
 80007f2:	bf00      	nop

080007f4 <__aeabi_d2uiz>:
 80007f4:	004a      	lsls	r2, r1, #1
 80007f6:	d211      	bcs.n	800081c <__aeabi_d2uiz+0x28>
 80007f8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007fc:	d211      	bcs.n	8000822 <__aeabi_d2uiz+0x2e>
 80007fe:	d50d      	bpl.n	800081c <__aeabi_d2uiz+0x28>
 8000800:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000804:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000808:	d40e      	bmi.n	8000828 <__aeabi_d2uiz+0x34>
 800080a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800080e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000812:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000816:	fa23 f002 	lsr.w	r0, r3, r2
 800081a:	4770      	bx	lr
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	4770      	bx	lr
 8000822:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000826:	d102      	bne.n	800082e <__aeabi_d2uiz+0x3a>
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	4770      	bx	lr
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	4770      	bx	lr

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295
 8000844:	f04f 30ff 	movne.w	r0, #4294967295
 8000848:	f000 b96a 	b.w	8000b20 <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	9d08      	ldr	r5, [sp, #32]
 800086a:	460c      	mov	r4, r1
 800086c:	2b00      	cmp	r3, #0
 800086e:	d14e      	bne.n	800090e <__udivmoddi4+0xaa>
 8000870:	4694      	mov	ip, r2
 8000872:	458c      	cmp	ip, r1
 8000874:	4686      	mov	lr, r0
 8000876:	fab2 f282 	clz	r2, r2
 800087a:	d962      	bls.n	8000942 <__udivmoddi4+0xde>
 800087c:	b14a      	cbz	r2, 8000892 <__udivmoddi4+0x2e>
 800087e:	f1c2 0320 	rsb	r3, r2, #32
 8000882:	4091      	lsls	r1, r2
 8000884:	fa20 f303 	lsr.w	r3, r0, r3
 8000888:	fa0c fc02 	lsl.w	ip, ip, r2
 800088c:	4319      	orrs	r1, r3
 800088e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000892:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000896:	fa1f f68c 	uxth.w	r6, ip
 800089a:	fbb1 f4f7 	udiv	r4, r1, r7
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb07 1114 	mls	r1, r7, r4, r1
 80008a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008aa:	fb04 f106 	mul.w	r1, r4, r6
 80008ae:	4299      	cmp	r1, r3
 80008b0:	d90a      	bls.n	80008c8 <__udivmoddi4+0x64>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f104 30ff 	add.w	r0, r4, #4294967295
 80008ba:	f080 8112 	bcs.w	8000ae2 <__udivmoddi4+0x27e>
 80008be:	4299      	cmp	r1, r3
 80008c0:	f240 810f 	bls.w	8000ae2 <__udivmoddi4+0x27e>
 80008c4:	3c02      	subs	r4, #2
 80008c6:	4463      	add	r3, ip
 80008c8:	1a59      	subs	r1, r3, r1
 80008ca:	fa1f f38e 	uxth.w	r3, lr
 80008ce:	fbb1 f0f7 	udiv	r0, r1, r7
 80008d2:	fb07 1110 	mls	r1, r7, r0, r1
 80008d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008da:	fb00 f606 	mul.w	r6, r0, r6
 80008de:	429e      	cmp	r6, r3
 80008e0:	d90a      	bls.n	80008f8 <__udivmoddi4+0x94>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80008ea:	f080 80fc 	bcs.w	8000ae6 <__udivmoddi4+0x282>
 80008ee:	429e      	cmp	r6, r3
 80008f0:	f240 80f9 	bls.w	8000ae6 <__udivmoddi4+0x282>
 80008f4:	4463      	add	r3, ip
 80008f6:	3802      	subs	r0, #2
 80008f8:	1b9b      	subs	r3, r3, r6
 80008fa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008fe:	2100      	movs	r1, #0
 8000900:	b11d      	cbz	r5, 800090a <__udivmoddi4+0xa6>
 8000902:	40d3      	lsrs	r3, r2
 8000904:	2200      	movs	r2, #0
 8000906:	e9c5 3200 	strd	r3, r2, [r5]
 800090a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090e:	428b      	cmp	r3, r1
 8000910:	d905      	bls.n	800091e <__udivmoddi4+0xba>
 8000912:	b10d      	cbz	r5, 8000918 <__udivmoddi4+0xb4>
 8000914:	e9c5 0100 	strd	r0, r1, [r5]
 8000918:	2100      	movs	r1, #0
 800091a:	4608      	mov	r0, r1
 800091c:	e7f5      	b.n	800090a <__udivmoddi4+0xa6>
 800091e:	fab3 f183 	clz	r1, r3
 8000922:	2900      	cmp	r1, #0
 8000924:	d146      	bne.n	80009b4 <__udivmoddi4+0x150>
 8000926:	42a3      	cmp	r3, r4
 8000928:	d302      	bcc.n	8000930 <__udivmoddi4+0xcc>
 800092a:	4290      	cmp	r0, r2
 800092c:	f0c0 80f0 	bcc.w	8000b10 <__udivmoddi4+0x2ac>
 8000930:	1a86      	subs	r6, r0, r2
 8000932:	eb64 0303 	sbc.w	r3, r4, r3
 8000936:	2001      	movs	r0, #1
 8000938:	2d00      	cmp	r5, #0
 800093a:	d0e6      	beq.n	800090a <__udivmoddi4+0xa6>
 800093c:	e9c5 6300 	strd	r6, r3, [r5]
 8000940:	e7e3      	b.n	800090a <__udivmoddi4+0xa6>
 8000942:	2a00      	cmp	r2, #0
 8000944:	f040 8090 	bne.w	8000a68 <__udivmoddi4+0x204>
 8000948:	eba1 040c 	sub.w	r4, r1, ip
 800094c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000950:	fa1f f78c 	uxth.w	r7, ip
 8000954:	2101      	movs	r1, #1
 8000956:	fbb4 f6f8 	udiv	r6, r4, r8
 800095a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800095e:	fb08 4416 	mls	r4, r8, r6, r4
 8000962:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000966:	fb07 f006 	mul.w	r0, r7, r6
 800096a:	4298      	cmp	r0, r3
 800096c:	d908      	bls.n	8000980 <__udivmoddi4+0x11c>
 800096e:	eb1c 0303 	adds.w	r3, ip, r3
 8000972:	f106 34ff 	add.w	r4, r6, #4294967295
 8000976:	d202      	bcs.n	800097e <__udivmoddi4+0x11a>
 8000978:	4298      	cmp	r0, r3
 800097a:	f200 80cd 	bhi.w	8000b18 <__udivmoddi4+0x2b4>
 800097e:	4626      	mov	r6, r4
 8000980:	1a1c      	subs	r4, r3, r0
 8000982:	fa1f f38e 	uxth.w	r3, lr
 8000986:	fbb4 f0f8 	udiv	r0, r4, r8
 800098a:	fb08 4410 	mls	r4, r8, r0, r4
 800098e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000992:	fb00 f707 	mul.w	r7, r0, r7
 8000996:	429f      	cmp	r7, r3
 8000998:	d908      	bls.n	80009ac <__udivmoddi4+0x148>
 800099a:	eb1c 0303 	adds.w	r3, ip, r3
 800099e:	f100 34ff 	add.w	r4, r0, #4294967295
 80009a2:	d202      	bcs.n	80009aa <__udivmoddi4+0x146>
 80009a4:	429f      	cmp	r7, r3
 80009a6:	f200 80b0 	bhi.w	8000b0a <__udivmoddi4+0x2a6>
 80009aa:	4620      	mov	r0, r4
 80009ac:	1bdb      	subs	r3, r3, r7
 80009ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009b2:	e7a5      	b.n	8000900 <__udivmoddi4+0x9c>
 80009b4:	f1c1 0620 	rsb	r6, r1, #32
 80009b8:	408b      	lsls	r3, r1
 80009ba:	fa22 f706 	lsr.w	r7, r2, r6
 80009be:	431f      	orrs	r7, r3
 80009c0:	fa20 fc06 	lsr.w	ip, r0, r6
 80009c4:	fa04 f301 	lsl.w	r3, r4, r1
 80009c8:	ea43 030c 	orr.w	r3, r3, ip
 80009cc:	40f4      	lsrs	r4, r6
 80009ce:	fa00 f801 	lsl.w	r8, r0, r1
 80009d2:	0c38      	lsrs	r0, r7, #16
 80009d4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009d8:	fbb4 fef0 	udiv	lr, r4, r0
 80009dc:	fa1f fc87 	uxth.w	ip, r7
 80009e0:	fb00 441e 	mls	r4, r0, lr, r4
 80009e4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009e8:	fb0e f90c 	mul.w	r9, lr, ip
 80009ec:	45a1      	cmp	r9, r4
 80009ee:	fa02 f201 	lsl.w	r2, r2, r1
 80009f2:	d90a      	bls.n	8000a0a <__udivmoddi4+0x1a6>
 80009f4:	193c      	adds	r4, r7, r4
 80009f6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009fa:	f080 8084 	bcs.w	8000b06 <__udivmoddi4+0x2a2>
 80009fe:	45a1      	cmp	r9, r4
 8000a00:	f240 8081 	bls.w	8000b06 <__udivmoddi4+0x2a2>
 8000a04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a08:	443c      	add	r4, r7
 8000a0a:	eba4 0409 	sub.w	r4, r4, r9
 8000a0e:	fa1f f983 	uxth.w	r9, r3
 8000a12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a16:	fb00 4413 	mls	r4, r0, r3, r4
 8000a1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a22:	45a4      	cmp	ip, r4
 8000a24:	d907      	bls.n	8000a36 <__udivmoddi4+0x1d2>
 8000a26:	193c      	adds	r4, r7, r4
 8000a28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a2c:	d267      	bcs.n	8000afe <__udivmoddi4+0x29a>
 8000a2e:	45a4      	cmp	ip, r4
 8000a30:	d965      	bls.n	8000afe <__udivmoddi4+0x29a>
 8000a32:	3b02      	subs	r3, #2
 8000a34:	443c      	add	r4, r7
 8000a36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000a3e:	eba4 040c 	sub.w	r4, r4, ip
 8000a42:	429c      	cmp	r4, r3
 8000a44:	46ce      	mov	lr, r9
 8000a46:	469c      	mov	ip, r3
 8000a48:	d351      	bcc.n	8000aee <__udivmoddi4+0x28a>
 8000a4a:	d04e      	beq.n	8000aea <__udivmoddi4+0x286>
 8000a4c:	b155      	cbz	r5, 8000a64 <__udivmoddi4+0x200>
 8000a4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000a52:	eb64 040c 	sbc.w	r4, r4, ip
 8000a56:	fa04 f606 	lsl.w	r6, r4, r6
 8000a5a:	40cb      	lsrs	r3, r1
 8000a5c:	431e      	orrs	r6, r3
 8000a5e:	40cc      	lsrs	r4, r1
 8000a60:	e9c5 6400 	strd	r6, r4, [r5]
 8000a64:	2100      	movs	r1, #0
 8000a66:	e750      	b.n	800090a <__udivmoddi4+0xa6>
 8000a68:	f1c2 0320 	rsb	r3, r2, #32
 8000a6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000a70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a74:	fa24 f303 	lsr.w	r3, r4, r3
 8000a78:	4094      	lsls	r4, r2
 8000a7a:	430c      	orrs	r4, r1
 8000a7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a84:	fa1f f78c 	uxth.w	r7, ip
 8000a88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000a90:	0c23      	lsrs	r3, r4, #16
 8000a92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a96:	fb00 f107 	mul.w	r1, r0, r7
 8000a9a:	4299      	cmp	r1, r3
 8000a9c:	d908      	bls.n	8000ab0 <__udivmoddi4+0x24c>
 8000a9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000aa6:	d22c      	bcs.n	8000b02 <__udivmoddi4+0x29e>
 8000aa8:	4299      	cmp	r1, r3
 8000aaa:	d92a      	bls.n	8000b02 <__udivmoddi4+0x29e>
 8000aac:	3802      	subs	r0, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	1a5b      	subs	r3, r3, r1
 8000ab2:	b2a4      	uxth	r4, r4
 8000ab4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ab8:	fb08 3311 	mls	r3, r8, r1, r3
 8000abc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac0:	fb01 f307 	mul.w	r3, r1, r7
 8000ac4:	42a3      	cmp	r3, r4
 8000ac6:	d908      	bls.n	8000ada <__udivmoddi4+0x276>
 8000ac8:	eb1c 0404 	adds.w	r4, ip, r4
 8000acc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ad0:	d213      	bcs.n	8000afa <__udivmoddi4+0x296>
 8000ad2:	42a3      	cmp	r3, r4
 8000ad4:	d911      	bls.n	8000afa <__udivmoddi4+0x296>
 8000ad6:	3902      	subs	r1, #2
 8000ad8:	4464      	add	r4, ip
 8000ada:	1ae4      	subs	r4, r4, r3
 8000adc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ae0:	e739      	b.n	8000956 <__udivmoddi4+0xf2>
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	e6f0      	b.n	80008c8 <__udivmoddi4+0x64>
 8000ae6:	4608      	mov	r0, r1
 8000ae8:	e706      	b.n	80008f8 <__udivmoddi4+0x94>
 8000aea:	45c8      	cmp	r8, r9
 8000aec:	d2ae      	bcs.n	8000a4c <__udivmoddi4+0x1e8>
 8000aee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000af2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000af6:	3801      	subs	r0, #1
 8000af8:	e7a8      	b.n	8000a4c <__udivmoddi4+0x1e8>
 8000afa:	4631      	mov	r1, r6
 8000afc:	e7ed      	b.n	8000ada <__udivmoddi4+0x276>
 8000afe:	4603      	mov	r3, r0
 8000b00:	e799      	b.n	8000a36 <__udivmoddi4+0x1d2>
 8000b02:	4630      	mov	r0, r6
 8000b04:	e7d4      	b.n	8000ab0 <__udivmoddi4+0x24c>
 8000b06:	46d6      	mov	lr, sl
 8000b08:	e77f      	b.n	8000a0a <__udivmoddi4+0x1a6>
 8000b0a:	4463      	add	r3, ip
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	e74d      	b.n	80009ac <__udivmoddi4+0x148>
 8000b10:	4606      	mov	r6, r0
 8000b12:	4623      	mov	r3, r4
 8000b14:	4608      	mov	r0, r1
 8000b16:	e70f      	b.n	8000938 <__udivmoddi4+0xd4>
 8000b18:	3e02      	subs	r6, #2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	e730      	b.n	8000980 <__udivmoddi4+0x11c>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_idiv0>:
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <gpio_handler>:
static void MX_TIM3_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

void gpio_handler(uint8_t* data, size_t size)
{
 8000b24:	b500      	push	{lr}
  // format: PA<0/00-15>:<0/1/A>
  char port_id = data[1];
  int pin_num;
  char level;
  if (data[3] == ':')
 8000b26:	78c2      	ldrb	r2, [r0, #3]
  {
    pin_num = data[2] - '0';
 8000b28:	7883      	ldrb	r3, [r0, #2]
  char port_id = data[1];
 8000b2a:	f890 c001 	ldrb.w	ip, [r0, #1]
  if (data[3] == ':')
 8000b2e:	2a3a      	cmp	r2, #58	@ 0x3a
    pin_num = data[2] - '0';
 8000b30:	f1a3 0330 	sub.w	r3, r3, #48	@ 0x30
  if (data[3] == ':')
 8000b34:	d01e      	beq.n	8000b74 <gpio_handler+0x50>
    level = data[4];
  }
  else
  {
    pin_num = (data[2]-'0') * 10 + (data[3]-'0');
 8000b36:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000b3a:	3a30      	subs	r2, #48	@ 0x30
    level = data[5];
 8000b3c:	f890 e005 	ldrb.w	lr, [r0, #5]
    pin_num = (data[2]-'0') * 10 + (data[3]-'0');
 8000b40:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  }
  GPIO_TypeDef* port = 0;
  switch (port_id)
 8000b44:	f1ac 0141 	sub.w	r1, ip, #65	@ 0x41
 8000b48:	2903      	cmp	r1, #3
 8000b4a:	d901      	bls.n	8000b50 <gpio_handler+0x2c>
//    else
//    {
//      LL_GPIO_SetPinMode(port, 1 << pin_num, LL_GPIO_MODE_ALTERNATE);
//    }
  }
}
 8000b4c:	f85d fb04 	ldr.w	pc, [sp], #4
      HAL_GPIO_WritePin(port, 1 << pin_num, level ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000b50:	f1ae 0231 	sub.w	r2, lr, #49	@ 0x31
 8000b54:	2101      	movs	r1, #1
 8000b56:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8000b5a:	4099      	lsls	r1, r3
 8000b5c:	f100 4090 	add.w	r0, r0, #1207959552	@ 0x48000000
 8000b60:	fab2 f282 	clz	r2, r2
}
 8000b64:	f85d eb04 	ldr.w	lr, [sp], #4
      HAL_GPIO_WritePin(port, 1 << pin_num, level ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000b68:	0952      	lsrs	r2, r2, #5
 8000b6a:	b289      	uxth	r1, r1
 8000b6c:	f5a0 3082 	sub.w	r0, r0, #66560	@ 0x10400
 8000b70:	f003 ba34 	b.w	8003fdc <HAL_GPIO_WritePin>
    level = data[4];
 8000b74:	f890 e004 	ldrb.w	lr, [r0, #4]
 8000b78:	e7e4      	b.n	8000b44 <gpio_handler+0x20>
 8000b7a:	bf00      	nop

08000b7c <spi_handler>:

void spi_handler(uint8_t* data, size_t size)
{
  SPI_HandleTypeDef* hspi = &hspi3;
  if (data[0] == 'M')
 8000b7c:	7803      	ldrb	r3, [r0, #0]
 8000b7e:	2b4d      	cmp	r3, #77	@ 0x4d
{
 8000b80:	4684      	mov	ip, r0
  if (data[0] == 'M')
 8000b82:	d002      	beq.n	8000b8a <spi_handler+0xe>
    LL_SPI_SetClockPolarity(hspi->Instance, cpol);
    LL_SPI_SetClockPhase(hspi->Instance, cpha);
    LL_SPI_Enable(hspi->Instance);
    LL_SPI_Disable(hspi->Instance);
  }
  else if (data[0] == 'W')
 8000b84:	2b57      	cmp	r3, #87	@ 0x57
 8000b86:	d020      	beq.n	8000bca <spi_handler+0x4e>
//    // return: <CONTENT(binary)>
//    uint8_t buffer[100];
//    HAL_SPI_Receive(hspi, buffer, data[1], 1000);
//    HAL_UART_Transmit(&huart2, buffer, data[1], 1000);
//  }
}
 8000b88:	4770      	bx	lr
    LL_SPI_SetClockPolarity(hspi->Instance, cpol);
 8000b8a:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <spi_handler+0x60>)
    uint32_t cpol = data[1] == '1' ? SPI_POLARITY_HIGH : SPI_POLARITY_LOW;
 8000b8c:	7841      	ldrb	r1, [r0, #1]
    LL_SPI_SetClockPolarity(hspi->Instance, cpol);
 8000b8e:	681b      	ldr	r3, [r3, #0]
    uint32_t cpha = data[2] == '1' ? SPI_PHASE_2EDGE : SPI_PHASE_1EDGE;
 8000b90:	7880      	ldrb	r0, [r0, #2]
  *         @arg @ref LL_SPI_POLARITY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPolarity(SPI_TypeDef *SPIx, uint32_t ClockPolarity)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8000b92:	681a      	ldr	r2, [r3, #0]
    uint32_t cpol = data[1] == '1' ? SPI_POLARITY_HIGH : SPI_POLARITY_LOW;
 8000b94:	f1a1 0131 	sub.w	r1, r1, #49	@ 0x31
 8000b98:	fab1 f181 	clz	r1, r1
 8000b9c:	0949      	lsrs	r1, r1, #5
 8000b9e:	f022 0202 	bic.w	r2, r2, #2
 8000ba2:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000ba6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	f022 0201 	bic.w	r2, r2, #1
 8000bae:	2831      	cmp	r0, #49	@ 0x31
 8000bb0:	bf08      	it	eq
 8000bb2:	f042 0201 	orreq.w	r2, r2, #1
 8000bb6:	601a      	str	r2, [r3, #0]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000bbe:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000bc6:	601a      	str	r2, [r3, #0]
}
 8000bc8:	4770      	bx	lr
    HAL_SPI_Transmit(hspi, data+1, size-1, 1000);
 8000bca:	3901      	subs	r1, #1
 8000bcc:	b28a      	uxth	r2, r1
 8000bce:	4803      	ldr	r0, [pc, #12]	@ (8000bdc <spi_handler+0x60>)
 8000bd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bd4:	f10c 0101 	add.w	r1, ip, #1
 8000bd8:	f004 bf40 	b.w	8005a5c <HAL_SPI_Transmit>
 8000bdc:	20000ac8 	.word	0x20000ac8

08000be0 <i2c_handler>:
 * define 2 mode:
 * 1. write: "W" data[0] = 'W' if W: data[1] = addr data[2:] = the content you want to write
 * 2. read: "R" data[0] = 'R' if R: data[1] = addr data[2] = length
 */
void i2c_handler(uint8_t * data, size_t size)
{
 8000be0:	b510      	push	{r4, lr}
	if (data[0] == 'W')
 8000be2:	7803      	ldrb	r3, [r0, #0]
 8000be4:	2b57      	cmp	r3, #87	@ 0x57
{
 8000be6:	b088      	sub	sp, #32
 8000be8:	4602      	mov	r2, r0
	if (data[0] == 'W')
 8000bea:	d003      	beq.n	8000bf4 <i2c_handler+0x14>
		{
			result = -1 ;
		}
		uart_transmit(&result, 1);
	}
	else if (data[0] == 'R')
 8000bec:	2b52      	cmp	r3, #82	@ 0x52
 8000bee:	d018      	beq.n	8000c22 <i2c_handler+0x42>
		{
			i2c_buffer[0] = -1;
		}
		uart_transmit(i2c_buffer, length + 1);
	}
}
 8000bf0:	b008      	add	sp, #32
 8000bf2:	bd10      	pop	{r4, pc}
		uint8_t result = 0;
 8000bf4:	460c      	mov	r4, r1
		if (HAL_I2C_Master_Transmit(&hi2c1, data[1], data+2 , size - 2, size) !=  HAL_OK)
 8000bf6:	1e8b      	subs	r3, r1, #2
		uint8_t result = 0;
 8000bf8:	f04f 0c00 	mov.w	ip, #0
		if (HAL_I2C_Master_Transmit(&hi2c1, data[1], data+2 , size - 2, size) !=  HAL_OK)
 8000bfc:	7841      	ldrb	r1, [r0, #1]
 8000bfe:	4816      	ldr	r0, [pc, #88]	@ (8000c58 <i2c_handler+0x78>)
 8000c00:	9400      	str	r4, [sp, #0]
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	3202      	adds	r2, #2
		uint8_t result = 0;
 8000c06:	f88d c00c 	strb.w	ip, [sp, #12]
		if (HAL_I2C_Master_Transmit(&hi2c1, data[1], data+2 , size - 2, size) !=  HAL_OK)
 8000c0a:	f003 fd35 	bl	8004678 <HAL_I2C_Master_Transmit>
 8000c0e:	b110      	cbz	r0, 8000c16 <i2c_handler+0x36>
			result = -1 ;
 8000c10:	23ff      	movs	r3, #255	@ 0xff
 8000c12:	f88d 300c 	strb.w	r3, [sp, #12]
		uart_transmit(&result, 1);
 8000c16:	2101      	movs	r1, #1
 8000c18:	a803      	add	r0, sp, #12
 8000c1a:	f001 f817 	bl	8001c4c <uart_transmit>
}
 8000c1e:	b008      	add	sp, #32
 8000c20:	bd10      	pop	{r4, pc}
		if (length > 16)
 8000c22:	7883      	ldrb	r3, [r0, #2]
		if (HAL_I2C_Master_Receive(&hi2c1, data[1], i2c_buffer + 1, length , length + 1) != HAL_OK)
 8000c24:	7841      	ldrb	r1, [r0, #1]
		if (length > 16)
 8000c26:	2b10      	cmp	r3, #16
 8000c28:	bf28      	it	cs
 8000c2a:	2310      	movcs	r3, #16
		if (HAL_I2C_Master_Receive(&hi2c1, data[1], i2c_buffer + 1, length , length + 1) != HAL_OK)
 8000c2c:	1c5c      	adds	r4, r3, #1
		i2c_buffer[0] = 0;
 8000c2e:	2000      	movs	r0, #0
		if (HAL_I2C_Master_Receive(&hi2c1, data[1], i2c_buffer + 1, length , length + 1) != HAL_OK)
 8000c30:	b2e4      	uxtb	r4, r4
		i2c_buffer[0] = 0;
 8000c32:	f88d 000c 	strb.w	r0, [sp, #12]
		if (HAL_I2C_Master_Receive(&hi2c1, data[1], i2c_buffer + 1, length , length + 1) != HAL_OK)
 8000c36:	9400      	str	r4, [sp, #0]
 8000c38:	4807      	ldr	r0, [pc, #28]	@ (8000c58 <i2c_handler+0x78>)
 8000c3a:	f10d 020d 	add.w	r2, sp, #13
 8000c3e:	f003 fe8b 	bl	8004958 <HAL_I2C_Master_Receive>
 8000c42:	b110      	cbz	r0, 8000c4a <i2c_handler+0x6a>
			i2c_buffer[0] = -1;
 8000c44:	23ff      	movs	r3, #255	@ 0xff
 8000c46:	f88d 300c 	strb.w	r3, [sp, #12]
		uart_transmit(i2c_buffer, length + 1);
 8000c4a:	4621      	mov	r1, r4
 8000c4c:	a803      	add	r0, sp, #12
 8000c4e:	f000 fffd 	bl	8001c4c <uart_transmit>
}
 8000c52:	b008      	add	sp, #32
 8000c54:	bd10      	pop	{r4, pc}
 8000c56:	bf00      	nop
 8000c58:	20000b2c 	.word	0x20000b2c

08000c5c <HAL_ADC_ConvCpltCallback>:
uint8_t adc_buffer[2050];
//int adc_ongoing = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000c5c:	b508      	push	{r3, lr}
	if (hadc != &hadc1)
 8000c5e:	4b07      	ldr	r3, [pc, #28]	@ (8000c7c <HAL_ADC_ConvCpltCallback+0x20>)
 8000c60:	4283      	cmp	r3, r0
 8000c62:	d000      	beq.n	8000c66 <HAL_ADC_ConvCpltCallback+0xa>
		return;
	adc_ongoing = 0;
	HAL_ADC_Stop_DMA(hadc);
	HAL_TIM_Base_Stop(&htim6);
}
 8000c64:	bd08      	pop	{r3, pc}
	adc_ongoing = 0;
 8000c66:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <HAL_ADC_ConvCpltCallback+0x24>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop_DMA(hadc);
 8000c6c:	f002 f940 	bl	8002ef0 <HAL_ADC_Stop_DMA>
}
 8000c70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Stop(&htim6);
 8000c74:	4803      	ldr	r0, [pc, #12]	@ (8000c84 <HAL_ADC_ConvCpltCallback+0x28>)
 8000c76:	f005 b8f9 	b.w	8005e6c <HAL_TIM_Base_Stop>
 8000c7a:	bf00      	nop
 8000c7c:	20000c3c 	.word	0x20000c3c
 8000c80:	20000cb0 	.word	0x20000cb0
 8000c84:	200009e4 	.word	0x200009e4

08000c88 <HAL_TIM_IC_CaptureCallback>:
	}
}
GPIO_PinState prevalue;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
  if (htim == &htim3)
 8000c88:	4b04      	ldr	r3, [pc, #16]	@ (8000c9c <HAL_TIM_IC_CaptureCallback+0x14>)
 8000c8a:	4283      	cmp	r3, r0
 8000c8c:	d000      	beq.n	8000c90 <HAL_TIM_IC_CaptureCallback+0x8>
  {
    ic_ongoing = 0;
    HAL_TIM_IC_Stop_DMA(&htim3, TIM_CHANNEL_1);
  }
}
 8000c8e:	4770      	bx	lr
    ic_ongoing = 0;
 8000c90:	4b03      	ldr	r3, [pc, #12]	@ (8000ca0 <HAL_TIM_IC_CaptureCallback+0x18>)
 8000c92:	2100      	movs	r1, #0
 8000c94:	6019      	str	r1, [r3, #0]
    HAL_TIM_IC_Stop_DMA(&htim3, TIM_CHANNEL_1);
 8000c96:	f005 bae5 	b.w	8006264 <HAL_TIM_IC_Stop_DMA>
 8000c9a:	bf00      	nop
 8000c9c:	20000a30 	.word	0x20000a30
 8000ca0:	20000cac 	.word	0x20000cac

08000ca4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca4:	b510      	push	{r4, lr}
 8000ca6:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca8:	2238      	movs	r2, #56	@ 0x38
 8000caa:	2100      	movs	r1, #0
 8000cac:	a806      	add	r0, sp, #24
 8000cae:	f006 ffd3 	bl	8007c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb2:	2300      	movs	r3, #0

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cb4:	f44f 7000 	mov.w	r0, #512	@ 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb8:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8000cbc:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000cc0:	9305      	str	r3, [sp, #20]
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cc2:	2403      	movs	r4, #3
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cc4:	f003 ff58 	bl	8004b78 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc8:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV5;
 8000cca:	2205      	movs	r2, #5
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8000cd2:	e9cd 0106 	strd	r0, r1, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cd6:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 60;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8000cda:	e9cd 2311 	strd	r2, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cde:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce0:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000ce2:	233c      	movs	r3, #60	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV5;
 8000ce4:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000ce6:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce8:	f003 ffc0 	bl	8004c6c <HAL_RCC_OscConfig>
 8000cec:	b108      	cbz	r0, 8000cf2 <SystemClock_Config+0x4e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cee:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <SystemClock_Config+0x4c>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cf2:	2104      	movs	r1, #4
 8000cf4:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf6:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cf8:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cfc:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d00:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d04:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d06:	f004 fa59 	bl	80051bc <HAL_RCC_ClockConfig>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	b108      	cbz	r0, 8000d12 <SystemClock_Config+0x6e>
 8000d0e:	b672      	cpsid	i
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <SystemClock_Config+0x6c>
  HAL_RCC_MCOConfig(RCC_MCO_PG10, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8000d12:	4803      	ldr	r0, [pc, #12]	@ (8000d20 <SystemClock_Config+0x7c>)
 8000d14:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8000d18:	f004 f9ee 	bl	80050f8 <HAL_RCC_MCOConfig>
}
 8000d1c:	b014      	add	sp, #80	@ 0x50
 8000d1e:	bd10      	pop	{r4, pc}
 8000d20:	00060400 	.word	0x00060400

08000d24 <main>:
{
 8000d24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d28:	f5ad 5d1f 	sub.w	sp, sp, #10176	@ 0x27c0
 8000d2c:	b08f      	sub	sp, #60	@ 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2e:	2400      	movs	r4, #0
 8000d30:	f60d 0654 	addw	r6, sp, #2132	@ 0x854
  HAL_Init();
 8000d34:	f001 fb1c 	bl	8002370 <HAL_Init>
  SystemClock_Config();
 8000d38:	f7ff ffb4 	bl	8000ca4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	e9c6 4400 	strd	r4, r4, [r6]
 8000d40:	e9c6 4402 	strd	r4, r4, [r6, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d44:	4dab      	ldr	r5, [pc, #684]	@ (8000ff4 <main+0x2d0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d46:	6134      	str	r4, [r6, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d48:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
  HAL_GPIO_WritePin(con_GPIO_Port, con_Pin, GPIO_PIN_RESET);
 8000d4a:	48ab      	ldr	r0, [pc, #684]	@ (8000ff8 <main+0x2d4>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d4c:	f043 0320 	orr.w	r3, r3, #32
 8000d50:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000d52:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000d54:	aa0c      	add	r2, sp, #48	@ 0x30
 8000d56:	f003 0320 	and.w	r3, r3, #32
 8000d5a:	6013      	str	r3, [r2, #0]
 8000d5c:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d5e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000d60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d64:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000d66:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000d68:	aa0d      	add	r2, sp, #52	@ 0x34
 8000d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d6e:	6013      	str	r3, [r2, #0]
 8000d70:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d72:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000d7a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000d7c:	f003 0304 	and.w	r3, r3, #4
 8000d80:	930e      	str	r3, [sp, #56]	@ 0x38
 8000d82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d84:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000d8c:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000d8e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	6013      	str	r3, [r2, #0]
 8000d96:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d98:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000d9a:	f043 0302 	orr.w	r3, r3, #2
 8000d9e:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000da0:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000da2:	aa10      	add	r2, sp, #64	@ 0x40
 8000da4:	f003 0302 	and.w	r3, r3, #2
 8000da8:	6013      	str	r3, [r2, #0]
 8000daa:	6813      	ldr	r3, [r2, #0]
  HAL_GPIO_WritePin(con_GPIO_Port, con_Pin, GPIO_PIN_RESET);
 8000dac:	2101      	movs	r1, #1
 8000dae:	4622      	mov	r2, r4
 8000db0:	f003 f914 	bl	8003fdc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000db4:	4622      	mov	r2, r4
 8000db6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dbe:	f003 f90d 	bl	8003fdc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000dc2:	4622      	mov	r2, r4
 8000dc4:	488d      	ldr	r0, [pc, #564]	@ (8000ffc <main+0x2d8>)
 8000dc6:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000dca:	f003 f907 	bl	8003fdc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000dce:	f44f 6880 	mov.w	r8, #1024	@ 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
  GPIO_InitStruct.Pin = con_Pin;
 8000dd4:	2701      	movs	r7, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	6073      	str	r3, [r6, #4]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dd8:	4889      	ldr	r0, [pc, #548]	@ (8001000 <main+0x2dc>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000dda:	6134      	str	r4, [r6, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ddc:	4631      	mov	r1, r6
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	e9c6 4402 	strd	r4, r4, [r6, #8]
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000de2:	f8c6 8000 	str.w	r8, [r6]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000de6:	f002 ffeb 	bl	8003dc0 <HAL_GPIO_Init>
  HAL_GPIO_Init(con_GPIO_Port, &GPIO_InitStruct);
 8000dea:	4883      	ldr	r0, [pc, #524]	@ (8000ff8 <main+0x2d4>)
 8000dec:	4631      	mov	r1, r6
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	e9c6 4402 	strd	r4, r4, [r6, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df2:	e9c6 7700 	strd	r7, r7, [r6]
  HAL_GPIO_Init(con_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f002 ffe3 	bl	8003dc0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	4631      	mov	r1, r6
 8000dfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e00:	e9c6 8700 	strd	r8, r7, [r6]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	e9c6 4402 	strd	r4, r4, [r6, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e08:	f002 ffda 	bl	8003dc0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e0c:	f44f 7340 	mov.w	r3, #768	@ 0x300
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e10:	487a      	ldr	r0, [pc, #488]	@ (8000ffc <main+0x2d8>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e12:	6033      	str	r3, [r6, #0]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e14:	4631      	mov	r1, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	e9c6 7401 	strd	r7, r4, [r6, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	60f4      	str	r4, [r6, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1c:	f002 ffd0 	bl	8003dc0 <HAL_GPIO_Init>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e20:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8000e22:	f043 0304 	orr.w	r3, r3, #4
 8000e26:	64ab      	str	r3, [r5, #72]	@ 0x48
 8000e28:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8000e2a:	aa09      	add	r2, sp, #36	@ 0x24
 8000e2c:	f003 0304 	and.w	r3, r3, #4
 8000e30:	6013      	str	r3, [r2, #0]
 8000e32:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e34:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8000e36:	f043 0302 	orr.w	r3, r3, #2
 8000e3a:	64ab      	str	r3, [r5, #72]	@ 0x48
 8000e3c:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8000e3e:	aa0a      	add	r2, sp, #40	@ 0x28
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e48:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8000e4a:	433b      	orrs	r3, r7
 8000e4c:	64ab      	str	r3, [r5, #72]	@ 0x48
 8000e4e:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8000e50:	aa0b      	add	r2, sp, #44	@ 0x2c
 8000e52:	403b      	ands	r3, r7
 8000e54:	6013      	str	r3, [r2, #0]
 8000e56:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e58:	4621      	mov	r1, r4
 8000e5a:	4622      	mov	r2, r4
 8000e5c:	200b      	movs	r0, #11
 8000e5e:	f002 fb39 	bl	80034d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e62:	200b      	movs	r0, #11
 8000e64:	f002 fb72 	bl	800354c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000e68:	4622      	mov	r2, r4
 8000e6a:	4621      	mov	r1, r4
 8000e6c:	200c      	movs	r0, #12
 8000e6e:	f002 fb31 	bl	80034d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000e72:	200c      	movs	r0, #12
 8000e74:	f002 fb6a 	bl	800354c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel8_IRQn, 0, 0);
 8000e78:	4622      	mov	r2, r4
 8000e7a:	4621      	mov	r1, r4
 8000e7c:	2063      	movs	r0, #99	@ 0x63
 8000e7e:	f002 fb29 	bl	80034d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel8_IRQn);
 8000e82:	2063      	movs	r0, #99	@ 0x63
 8000e84:	f002 fb62 	bl	800354c <HAL_NVIC_EnableIRQ>
  hcrc.Instance = CRC;
 8000e88:	485e      	ldr	r0, [pc, #376]	@ (8001004 <main+0x2e0>)
 8000e8a:	4b5f      	ldr	r3, [pc, #380]	@ (8001008 <main+0x2e4>)
 8000e8c:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8000e8e:	f240 1301 	movw	r3, #257	@ 0x101
 8000e92:	8083      	strh	r3, [r0, #4]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8000e94:	2508      	movs	r5, #8
 8000e96:	f241 0321 	movw	r3, #4129	@ 0x1021
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000e9a:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8000e9e:	e9c0 3502 	strd	r3, r5, [r0, #8]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000ea2:	6184      	str	r4, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000ea4:	6207      	str	r7, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000ea6:	f002 fbb3 	bl	8003610 <HAL_CRC_Init>
 8000eaa:	b108      	cbz	r0, 8000eb0 <main+0x18c>
 8000eac:	b672      	cpsid	i
  while (1)
 8000eae:	e7fe      	b.n	8000eae <main+0x18a>
  huart2.Instance = USART2;
 8000eb0:	4c56      	ldr	r4, [pc, #344]	@ (800100c <main+0x2e8>)
  huart2.Init.BaudRate = 115200;
 8000eb2:	4957      	ldr	r1, [pc, #348]	@ (8001010 <main+0x2ec>)
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eb4:	6120      	str	r0, [r4, #16]
  huart2.Init.BaudRate = 115200;
 8000eb6:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eba:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ebe:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ec2:	e9c4 0008 	strd	r0, r0, [r4, #32]
  huart2.Init.BaudRate = 115200;
 8000ec6:	e9c4 1300 	strd	r1, r3, [r4]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eca:	62a0      	str	r0, [r4, #40]	@ 0x28
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ecc:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ece:	4620      	mov	r0, r4
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ed0:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ed2:	f006 fb95 	bl	8007600 <HAL_UART_Init>
 8000ed6:	b108      	cbz	r0, 8000edc <main+0x1b8>
 8000ed8:	b672      	cpsid	i
  while (1)
 8000eda:	e7fe      	b.n	8000eda <main+0x1b6>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000edc:	4601      	mov	r1, r0
 8000ede:	4620      	mov	r0, r4
 8000ee0:	f006 fc36 	bl	8007750 <HAL_UARTEx_SetTxFifoThreshold>
 8000ee4:	b108      	cbz	r0, 8000eea <main+0x1c6>
 8000ee6:	b672      	cpsid	i
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <main+0x1c4>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eea:	4601      	mov	r1, r0
 8000eec:	4620      	mov	r0, r4
 8000eee:	f006 fc71 	bl	80077d4 <HAL_UARTEx_SetRxFifoThreshold>
 8000ef2:	b108      	cbz	r0, 8000ef8 <main+0x1d4>
 8000ef4:	b672      	cpsid	i
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <main+0x1d2>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ef8:	4620      	mov	r0, r4
 8000efa:	f006 fc0b 	bl	8007714 <HAL_UARTEx_DisableFifoMode>
 8000efe:	4601      	mov	r1, r0
 8000f00:	b108      	cbz	r0, 8000f06 <main+0x1e2>
 8000f02:	b672      	cpsid	i
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <main+0x1e0>
  ADC_MultiModeTypeDef multimode = {0};
 8000f06:	f10d 0950 	add.w	r9, sp, #80	@ 0x50
  hadc1.Instance = ADC1;
 8000f0a:	4c42      	ldr	r4, [pc, #264]	@ (8001014 <main+0x2f0>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f0c:	9007      	str	r0, [sp, #28]
  ADC_MultiModeTypeDef multimode = {0};
 8000f0e:	e9c9 0000 	strd	r0, r0, [r9]
 8000f12:	f8c9 0008 	str.w	r0, [r9, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f16:	2220      	movs	r2, #32
 8000f18:	4630      	mov	r0, r6
 8000f1a:	f006 fe9d 	bl	8007c58 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f1e:	9907      	ldr	r1, [sp, #28]
  hadc1.Init.NbrOfConversion = 1;
 8000f20:	6227      	str	r7, [r4, #32]
  hadc1.Instance = ADC1;
 8000f22:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000f26:	6023      	str	r3, [r4, #0]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f28:	2704      	movs	r7, #4
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000f2a:	f44f 63b4 	mov.w	r3, #1440	@ 0x5a0
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f2e:	4620      	mov	r0, r4
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f30:	e9c4 1101 	strd	r1, r1, [r4, #4]
  hadc1.Init.GainCompensation = 0;
 8000f34:	e9c4 1103 	strd	r1, r1, [r4, #12]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f38:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f3c:	6161      	str	r1, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f3e:	83a1      	strh	r1, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f40:	f884 1024 	strb.w	r1, [r4, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f44:	f884 1038 	strb.w	r1, [r4, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f48:	63e1      	str	r1, [r4, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f4a:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f4e:	61a7      	str	r7, [r4, #24]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000f50:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f52:	f001 fa2f 	bl	80023b4 <HAL_ADC_Init>
 8000f56:	b108      	cbz	r0, 8000f5c <main+0x238>
 8000f58:	b672      	cpsid	i
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <main+0x236>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f5c:	f8c9 0000 	str.w	r0, [r9]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f60:	a914      	add	r1, sp, #80	@ 0x50
 8000f62:	4620      	mov	r0, r4
 8000f64:	f002 f80c 	bl	8002f80 <HAL_ADCEx_MultiModeConfigChannel>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	b108      	cbz	r0, 8000f70 <main+0x24c>
 8000f6c:	b672      	cpsid	i
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <main+0x24a>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f70:	4a29      	ldr	r2, [pc, #164]	@ (8001018 <main+0x2f4>)
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f72:	60b3      	str	r3, [r6, #8]
  sConfig.Offset = 0;
 8000f74:	6173      	str	r3, [r6, #20]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f76:	2306      	movs	r3, #6
 8000f78:	e9c6 2300 	strd	r2, r3, [r6]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f7c:	237f      	movs	r3, #127	@ 0x7f
 8000f7e:	60f3      	str	r3, [r6, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f80:	6137      	str	r7, [r6, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f82:	4620      	mov	r0, r4
 8000f84:	f60d 0154 	addw	r1, sp, #2132	@ 0x854
 8000f88:	f001 fb7e 	bl	8002688 <HAL_ADC_ConfigChannel>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	b108      	cbz	r0, 8000f94 <main+0x270>
 8000f90:	b672      	cpsid	i
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <main+0x26e>
  hspi3.Instance = SPI3;
 8000f94:	4821      	ldr	r0, [pc, #132]	@ (800101c <main+0x2f8>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f96:	f8df e090 	ldr.w	lr, [pc, #144]	@ 8001028 <main+0x304>
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000f9a:	6083      	str	r3, [r0, #8]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f9c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fa0:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fa4:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fa6:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000fa8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000fac:	e9c0 e300 	strd	lr, r3, [r0]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fb0:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000fb4:	60c3      	str	r3, [r0, #12]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000fb6:	f44f 7900 	mov.w	r9, #512	@ 0x200
 8000fba:	2318      	movs	r3, #24
 8000fbc:	e9c0 9306 	strd	r9, r3, [r0, #24]
  hspi3.Init.CRCPolynomial = 7;
 8000fc0:	2307      	movs	r3, #7
 8000fc2:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fc4:	6345      	str	r5, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000fc6:	f004 fccb 	bl	8005960 <HAL_SPI_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	b108      	cbz	r0, 8000fd2 <main+0x2ae>
 8000fce:	b672      	cpsid	i
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <main+0x2ac>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd2:	e9c6 0000 	strd	r0, r0, [r6]
 8000fd6:	60b0      	str	r0, [r6, #8]
  htim6.Instance = TIM6;
 8000fd8:	4811      	ldr	r0, [pc, #68]	@ (8001020 <main+0x2fc>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fda:	e9c0 3301 	strd	r3, r3, [r0, #4]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fde:	6183      	str	r3, [r0, #24]
  htim6.Instance = TIM6;
 8000fe0:	4b10      	ldr	r3, [pc, #64]	@ (8001024 <main+0x300>)
 8000fe2:	6003      	str	r3, [r0, #0]
  htim6.Init.Period = 149;
 8000fe4:	2395      	movs	r3, #149	@ 0x95
 8000fe6:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000fe8:	f004 fe66 	bl	8005cb8 <HAL_TIM_Base_Init>
 8000fec:	b1f0      	cbz	r0, 800102c <main+0x308>
 8000fee:	b672      	cpsid	i
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <main+0x2cc>
 8000ff2:	bf00      	nop
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	48000800 	.word	0x48000800
 8000ffc:	48000400 	.word	0x48000400
 8001000:	48001800 	.word	0x48001800
 8001004:	20000b94 	.word	0x20000b94
 8001008:	40023000 	.word	0x40023000
 800100c:	200008f0 	.word	0x200008f0
 8001010:	40004400 	.word	0x40004400
 8001014:	20000c3c 	.word	0x20000c3c
 8001018:	04300002 	.word	0x04300002
 800101c:	20000ac8 	.word	0x20000ac8
 8001020:	200009e4 	.word	0x200009e4
 8001024:	40001000 	.word	0x40001000
 8001028:	40003c00 	.word	0x40003c00
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800102c:	f60d 0454 	addw	r4, sp, #2132	@ 0x854
 8001030:	2320      	movs	r3, #32
 8001032:	6023      	str	r3, [r4, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001034:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001036:	489c      	ldr	r0, [pc, #624]	@ (80012a8 <main+0x584>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001038:	60a3      	str	r3, [r4, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800103a:	4621      	mov	r1, r4
 800103c:	f005 fc36 	bl	80068ac <HAL_TIMEx_MasterConfigSynchronization>
 8001040:	b108      	cbz	r0, 8001046 <main+0x322>
 8001042:	b672      	cpsid	i
  while (1)
 8001044:	e7fe      	b.n	8001044 <main+0x320>
  hi2c1.Instance = I2C1;
 8001046:	4d99      	ldr	r5, [pc, #612]	@ (80012ac <main+0x588>)
  hi2c1.Init.Timing = 0x10E32879;
 8001048:	4b99      	ldr	r3, [pc, #612]	@ (80012b0 <main+0x58c>)
 800104a:	4e9a      	ldr	r6, [pc, #616]	@ (80012b4 <main+0x590>)
  hi2c1.Init.OwnAddress1 = 0;
 800104c:	60a8      	str	r0, [r5, #8]
  hi2c1.Init.OwnAddress2 = 0;
 800104e:	e9c5 0004 	strd	r0, r0, [r5, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001052:	e9c5 0006 	strd	r0, r0, [r5, #24]
  hi2c1.Init.Timing = 0x10E32879;
 8001056:	e9c5 6300 	strd	r6, r3, [r5]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800105a:	6228      	str	r0, [r5, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800105c:	2301      	movs	r3, #1
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800105e:	4628      	mov	r0, r5
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001060:	60eb      	str	r3, [r5, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001062:	f003 faaf 	bl	80045c4 <HAL_I2C_Init>
 8001066:	4601      	mov	r1, r0
 8001068:	b108      	cbz	r0, 800106e <main+0x34a>
 800106a:	b672      	cpsid	i
  while (1)
 800106c:	e7fe      	b.n	800106c <main+0x348>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800106e:	4628      	mov	r0, r5
 8001070:	f003 fd2c 	bl	8004acc <HAL_I2CEx_ConfigAnalogFilter>
 8001074:	4601      	mov	r1, r0
 8001076:	b108      	cbz	r0, 800107c <main+0x358>
 8001078:	b672      	cpsid	i
  while (1)
 800107a:	e7fe      	b.n	800107a <main+0x356>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800107c:	4628      	mov	r0, r5
 800107e:	f003 fd4f 	bl	8004b20 <HAL_I2CEx_ConfigDigitalFilter>
 8001082:	4601      	mov	r1, r0
 8001084:	b108      	cbz	r0, 800108a <main+0x366>
 8001086:	b672      	cpsid	i
  while (1)
 8001088:	e7fe      	b.n	8001088 <main+0x364>
  hdac1.Instance = DAC1;
 800108a:	4d8b      	ldr	r5, [pc, #556]	@ (80012b8 <main+0x594>)
  DAC_ChannelConfTypeDef sConfig = {0};
 800108c:	2230      	movs	r2, #48	@ 0x30
 800108e:	4620      	mov	r0, r4
 8001090:	f006 fde2 	bl	8007c58 <memset>
  hdac1.Instance = DAC1;
 8001094:	4b89      	ldr	r3, [pc, #548]	@ (80012bc <main+0x598>)
 8001096:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001098:	4628      	mov	r0, r5
 800109a:	f002 fb6d 	bl	8003778 <HAL_DAC_Init>
 800109e:	4602      	mov	r2, r0
 80010a0:	b108      	cbz	r0, 80010a6 <main+0x382>
 80010a2:	b672      	cpsid	i
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <main+0x380>
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80010a6:	2302      	movs	r3, #2
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80010a8:	e9c4 3305 	strd	r3, r3, [r4, #20]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80010ac:	6023      	str	r3, [r4, #0]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80010ae:	e9c4 2202 	strd	r2, r2, [r4, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80010b2:	4628      	mov	r0, r5
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80010b4:	80a2      	strh	r2, [r4, #4]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80010b6:	6122      	str	r2, [r4, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80010b8:	61e2      	str	r2, [r4, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80010ba:	f60d 0154 	addw	r1, sp, #2132	@ 0x854
 80010be:	f002 fbd9 	bl	8003874 <HAL_DAC_ConfigChannel>
 80010c2:	4603      	mov	r3, r0
 80010c4:	b108      	cbz	r0, 80010ca <main+0x3a6>
 80010c6:	b672      	cpsid	i
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <main+0x3a4>
  hcomp3.Instance = COMP3;
 80010ca:	487d      	ldr	r0, [pc, #500]	@ (80012c0 <main+0x59c>)
  hcomp3.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80010cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80010d0:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp3.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80010d4:	6043      	str	r3, [r0, #4]
  hcomp3.Instance = COMP3;
 80010d6:	4b7b      	ldr	r3, [pc, #492]	@ (80012c4 <main+0x5a0>)
 80010d8:	6003      	str	r3, [r0, #0]
  hcomp3.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 80010da:	2350      	movs	r3, #80	@ 0x50
 80010dc:	6083      	str	r3, [r0, #8]
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 80010de:	f002 f803 	bl	80030e8 <HAL_COMP_Init>
 80010e2:	b108      	cbz	r0, 80010e8 <main+0x3c4>
 80010e4:	b672      	cpsid	i
  while (1)
 80010e6:	e7fe      	b.n	80010e6 <main+0x3c2>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010e8:	f50d 63ff 	add.w	r3, sp, #2040	@ 0x7f8
  htim3.Instance = TIM3;
 80010ec:	4f76      	ldr	r7, [pc, #472]	@ (80012c8 <main+0x5a4>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ee:	f2a3 72b4 	subw	r2, r3, #1972	@ 0x7b4
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010f2:	e9c4 0000 	strd	r0, r0, [r4]
 80010f6:	e9c4 0002 	strd	r0, r0, [r4, #8]
  htim3.Instance = TIM3;
 80010fa:	4b74      	ldr	r3, [pc, #464]	@ (80012cc <main+0x5a8>)
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fc:	6138      	str	r0, [r7, #16]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010fe:	ac14      	add	r4, sp, #80	@ 0x50
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001100:	e9c7 0001 	strd	r0, r0, [r7, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001104:	e9c4 0000 	strd	r0, r0, [r4]
 8001108:	e9c4 0002 	strd	r0, r0, [r4, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800110c:	e9c2 0000 	strd	r0, r0, [r2]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001110:	61b8      	str	r0, [r7, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001112:	6090      	str	r0, [r2, #8]
  htim3.Instance = TIM3;
 8001114:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001116:	4638      	mov	r0, r7
  htim3.Init.Period = 65535;
 8001118:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800111c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800111e:	f004 fdcb 	bl	8005cb8 <HAL_TIM_Base_Init>
 8001122:	b108      	cbz	r0, 8001128 <main+0x404>
 8001124:	b672      	cpsid	i
  while (1)
 8001126:	e7fe      	b.n	8001126 <main+0x402>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001128:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800112c:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800112e:	a914      	add	r1, sp, #80	@ 0x50
 8001130:	4638      	mov	r0, r7
 8001132:	f005 fa21 	bl	8006578 <HAL_TIM_ConfigClockSource>
 8001136:	b108      	cbz	r0, 800113c <main+0x418>
 8001138:	b672      	cpsid	i
  while (1)
 800113a:	e7fe      	b.n	800113a <main+0x416>
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800113c:	4638      	mov	r0, r7
 800113e:	f004 feab 	bl	8005e98 <HAL_TIM_IC_Init>
 8001142:	b108      	cbz	r0, 8001148 <main+0x424>
 8001144:	b672      	cpsid	i
  while (1)
 8001146:	e7fe      	b.n	8001146 <main+0x422>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001148:	a911      	add	r1, sp, #68	@ 0x44
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114a:	2200      	movs	r2, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800114c:	485e      	ldr	r0, [pc, #376]	@ (80012c8 <main+0x5a4>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114e:	600a      	str	r2, [r1, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001150:	608a      	str	r2, [r1, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001152:	f005 fbab 	bl	80068ac <HAL_TIMEx_MasterConfigSynchronization>
 8001156:	4602      	mov	r2, r0
 8001158:	b108      	cbz	r0, 800115e <main+0x43a>
 800115a:	b672      	cpsid	i
  while (1)
 800115c:	e7fe      	b.n	800115c <main+0x438>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800115e:	f60d 0554 	addw	r5, sp, #2132	@ 0x854
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001162:	f04f 0801 	mov.w	r8, #1
  sConfigIC.ICFilter = 0;
 8001166:	e9c5 0002 	strd	r0, r0, [r5, #8]
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800116a:	6028      	str	r0, [r5, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800116c:	f8c5 8004 	str.w	r8, [r5, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001170:	4855      	ldr	r0, [pc, #340]	@ (80012c8 <main+0x5a4>)
 8001172:	4629      	mov	r1, r5
 8001174:	f005 f92c 	bl	80063d0 <HAL_TIM_IC_ConfigChannel>
 8001178:	4602      	mov	r2, r0
 800117a:	b108      	cbz	r0, 8001180 <main+0x45c>
 800117c:	b672      	cpsid	i
  while (1)
 800117e:	e7fe      	b.n	800117e <main+0x45a>
  if (HAL_TIMEx_TISelection(&htim3, TIM_TIM3_TI1_COMP3, TIM_CHANNEL_1) != HAL_OK)
 8001180:	4851      	ldr	r0, [pc, #324]	@ (80012c8 <main+0x5a4>)
 8001182:	2103      	movs	r1, #3
 8001184:	f005 fbec 	bl	8006960 <HAL_TIMEx_TISelection>
 8001188:	b108      	cbz	r0, 800118e <main+0x46a>
 800118a:	b672      	cpsid	i
  while (1)
 800118c:	e7fe      	b.n	800118c <main+0x468>
  htim2.Instance = TIM2;
 800118e:	4e50      	ldr	r6, [pc, #320]	@ (80012d0 <main+0x5ac>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001190:	9016      	str	r0, [sp, #88]	@ 0x58
 8001192:	ac14      	add	r4, sp, #80	@ 0x50
  htim2.Instance = TIM2;
 8001194:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001198:	e9c5 0000 	strd	r0, r0, [r5]
 800119c:	e9c5 0002 	strd	r0, r0, [r5, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a0:	e9c4 0000 	strd	r0, r0, [r4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a4:	e9c6 0001 	strd	r0, r0, [r6, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a8:	6130      	str	r0, [r6, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011aa:	61b0      	str	r0, [r6, #24]
  htim2.Instance = TIM2;
 80011ac:	6033      	str	r3, [r6, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011ae:	4630      	mov	r0, r6
  htim2.Init.Period = 4294967295;
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295
 80011b4:	60f3      	str	r3, [r6, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011b6:	f004 fd7f 	bl	8005cb8 <HAL_TIM_Base_Init>
 80011ba:	b108      	cbz	r0, 80011c0 <main+0x49c>
 80011bc:	b672      	cpsid	i
  while (1)
 80011be:	e7fe      	b.n	80011be <main+0x49a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011c4:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011c6:	f60d 0154 	addw	r1, sp, #2132	@ 0x854
 80011ca:	4630      	mov	r0, r6
 80011cc:	f005 f9d4 	bl	8006578 <HAL_TIM_ConfigClockSource>
 80011d0:	b108      	cbz	r0, 80011d6 <main+0x4b2>
 80011d2:	b672      	cpsid	i
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <main+0x4b0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d6:	6020      	str	r0, [r4, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d8:	60a0      	str	r0, [r4, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011da:	a914      	add	r1, sp, #80	@ 0x50
 80011dc:	4630      	mov	r0, r6
 80011de:	f005 fb65 	bl	80068ac <HAL_TIMEx_MasterConfigSynchronization>
 80011e2:	b108      	cbz	r0, 80011e8 <main+0x4c4>
 80011e4:	b672      	cpsid	i
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <main+0x4c2>
  uart_init();
 80011e8:	f001 f83a 	bl	8002260 <uart_init>
  uart_register_handler("GPIO", gpio_handler);
 80011ec:	4939      	ldr	r1, [pc, #228]	@ (80012d4 <main+0x5b0>)
 80011ee:	483a      	ldr	r0, [pc, #232]	@ (80012d8 <main+0x5b4>)
	  if (HAL_GPIO_ReadPin(con_GPIO_Port,con_Pin) != prevalue)
 80011f0:	4d3a      	ldr	r5, [pc, #232]	@ (80012dc <main+0x5b8>)
		  samp(adc_buffer, 1025, &htim6, &hadc1);
 80011f2:	4c3b      	ldr	r4, [pc, #236]	@ (80012e0 <main+0x5bc>)
  uart_register_handler("GPIO", gpio_handler);
 80011f4:	f000 ffb2 	bl	800215c <uart_register_handler>
  uart_register_handler("SPI", spi_handler);
 80011f8:	493a      	ldr	r1, [pc, #232]	@ (80012e4 <main+0x5c0>)
 80011fa:	483b      	ldr	r0, [pc, #236]	@ (80012e8 <main+0x5c4>)
 80011fc:	f000 ffae 	bl	800215c <uart_register_handler>
  uart_register_handler("I2C", i2c_handler);
 8001200:	483a      	ldr	r0, [pc, #232]	@ (80012ec <main+0x5c8>)
 8001202:	493b      	ldr	r1, [pc, #236]	@ (80012f0 <main+0x5cc>)
 8001204:	f000 ffaa 	bl	800215c <uart_register_handler>
  prevalue = HAL_GPIO_ReadPin(con_GPIO_Port, con_Pin);
 8001208:	4641      	mov	r1, r8
 800120a:	4834      	ldr	r0, [pc, #208]	@ (80012dc <main+0x5b8>)
 800120c:	f8df 80ec 	ldr.w	r8, [pc, #236]	@ 80012fc <main+0x5d8>
 8001210:	f002 fede 	bl	8003fd0 <HAL_GPIO_ReadPin>
 8001214:	4603      	mov	r3, r0
	  if (HAL_GPIO_ReadPin(con_GPIO_Port,con_Pin) != prevalue)
 8001216:	2101      	movs	r1, #1
 8001218:	4628      	mov	r0, r5
  prevalue = HAL_GPIO_ReadPin(con_GPIO_Port, con_Pin);
 800121a:	f888 3000 	strb.w	r3, [r8]
	  if (HAL_GPIO_ReadPin(con_GPIO_Port,con_Pin) != prevalue)
 800121e:	f002 fed7 	bl	8003fd0 <HAL_GPIO_ReadPin>
 8001222:	f898 e000 	ldrb.w	lr, [r8]
		  samp(adc_buffer, 1025, &htim6, &hadc1);
 8001226:	4a20      	ldr	r2, [pc, #128]	@ (80012a8 <main+0x584>)
	  if (HAL_GPIO_ReadPin(con_GPIO_Port,con_Pin) != prevalue)
 8001228:	4684      	mov	ip, r0
 800122a:	45e6      	cmp	lr, ip
		  samp(adc_buffer, 1025, &htim6, &hadc1);
 800122c:	4831      	ldr	r0, [pc, #196]	@ (80012f4 <main+0x5d0>)
 800122e:	4623      	mov	r3, r4
 8001230:	f240 4101 	movw	r1, #1025	@ 0x401
	  if (HAL_GPIO_ReadPin(con_GPIO_Port,con_Pin) != prevalue)
 8001234:	d031      	beq.n	800129a <main+0x576>
		  samp(adc_buffer, 1025, &htim6, &hadc1);
 8001236:	f000 f8a1 	bl	800137c <samp>
		  make_8to16(adc_buffer, 2050,temp_buffer );
 800123a:	aa14      	add	r2, sp, #80	@ 0x50
 800123c:	f640 0102 	movw	r1, #2050	@ 0x802
 8001240:	482c      	ldr	r0, [pc, #176]	@ (80012f4 <main+0x5d0>)
 8001242:	f000 f85f 	bl	8001304 <make_8to16>
		  uint16_t threshold = get_max_min(temp_buffer, 1025);
 8001246:	f240 4101 	movw	r1, #1025	@ 0x401
 800124a:	a814      	add	r0, sp, #80	@ 0x50
 800124c:	f000 f874 	bl	8001338 <get_max_min>
		  float freq = get_freq(&hcomp3, &hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, threshold,
 8001250:	f60d 0354 	addw	r3, sp, #2132	@ 0x854
 8001254:	9303      	str	r3, [sp, #12]
 8001256:	f240 72e9 	movw	r2, #2025	@ 0x7e9
 800125a:	2300      	movs	r3, #0
 800125c:	9302      	str	r3, [sp, #8]
 800125e:	4916      	ldr	r1, [pc, #88]	@ (80012b8 <main+0x594>)
 8001260:	9000      	str	r0, [sp, #0]
 8001262:	9204      	str	r2, [sp, #16]
 8001264:	4816      	ldr	r0, [pc, #88]	@ (80012c0 <main+0x59c>)
 8001266:	9605      	str	r6, [sp, #20]
 8001268:	461a      	mov	r2, r3
 800126a:	9701      	str	r7, [sp, #4]
 800126c:	f000 f8aa 	bl	80013c4 <get_freq>
		  set_sm_freq(get_fit_sm_hz(freq) , &htim6);
 8001270:	eddf 7a21 	vldr	s15, [pc, #132]	@ 80012f8 <main+0x5d4>
 8001274:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001278:	f000 f8fa 	bl	8001470 <get_fit_sm_hz>
 800127c:	490a      	ldr	r1, [pc, #40]	@ (80012a8 <main+0x584>)
 800127e:	f000 f893 	bl	80013a8 <set_sm_freq>
		  samp(adc_buffer, 1025, &htim6, &hadc1);
 8001282:	481c      	ldr	r0, [pc, #112]	@ (80012f4 <main+0x5d0>)
 8001284:	4a08      	ldr	r2, [pc, #32]	@ (80012a8 <main+0x584>)
 8001286:	f240 4101 	movw	r1, #1025	@ 0x401
 800128a:	4623      	mov	r3, r4
 800128c:	f000 f876 	bl	800137c <samp>
		  uart_transmit(adc_buffer, 2050);
 8001290:	4818      	ldr	r0, [pc, #96]	@ (80012f4 <main+0x5d0>)
 8001292:	f640 0102 	movw	r1, #2050	@ 0x802
 8001296:	f000 fcd9 	bl	8001c4c <uart_transmit>
	  prevalue = HAL_GPIO_ReadPin(con_GPIO_Port, con_Pin);
 800129a:	2101      	movs	r1, #1
 800129c:	4628      	mov	r0, r5
 800129e:	f002 fe97 	bl	8003fd0 <HAL_GPIO_ReadPin>
 80012a2:	4603      	mov	r3, r0
	  if (HAL_GPIO_ReadPin(con_GPIO_Port,con_Pin) != prevalue)
 80012a4:	e7b7      	b.n	8001216 <main+0x4f2>
 80012a6:	bf00      	nop
 80012a8:	200009e4 	.word	0x200009e4
 80012ac:	20000b2c 	.word	0x20000b2c
 80012b0:	10e32879 	.word	0x10e32879
 80012b4:	40005400 	.word	0x40005400
 80012b8:	20000b80 	.word	0x20000b80
 80012bc:	50000800 	.word	0x50000800
 80012c0:	20000bb8 	.word	0x20000bb8
 80012c4:	40010208 	.word	0x40010208
 80012c8:	20000a30 	.word	0x20000a30
 80012cc:	40000400 	.word	0x40000400
 80012d0:	20000a7c 	.word	0x20000a7c
 80012d4:	08000b25 	.word	0x08000b25
 80012d8:	08007e30 	.word	0x08007e30
 80012dc:	48000800 	.word	0x48000800
 80012e0:	20000c3c 	.word	0x20000c3c
 80012e4:	08000b7d 	.word	0x08000b7d
 80012e8:	08007e38 	.word	0x08007e38
 80012ec:	08007e3c 	.word	0x08007e3c
 80012f0:	08000be1 	.word	0x08000be1
 80012f4:	2000008c 	.word	0x2000008c
 80012f8:	49742400 	.word	0x49742400
 80012fc:	20000088 	.word	0x20000088

08001300 <Error_Handler>:
 8001300:	b672      	cpsid	i
  while (1)
 8001302:	e7fe      	b.n	8001302 <Error_Handler+0x2>

08001304 <make_8to16>:


uint16_t *make_8to16(uint8_t *buffer, size_t size , uint16_t *new_buffer)
{
	int i = 0;
	if (size % 2 != 0)
 8001304:	07cb      	lsls	r3, r1, #31
 8001306:	d412      	bmi.n	800132e <make_8to16+0x2a>
		return 0;
	//uint16_t buffer_16[size / 2];
	while (i < size / 2)
 8001308:	0849      	lsrs	r1, r1, #1
 800130a:	d012      	beq.n	8001332 <make_8to16+0x2e>
{
 800130c:	b510      	push	{r4, lr}
 800130e:	4603      	mov	r3, r0
 8001310:	f1a2 0e02 	sub.w	lr, r2, #2
 8001314:	eb00 0c41 	add.w	ip, r0, r1, lsl #1
	{
		new_buffer[i] = buffer[2*i] | buffer[2 * i + 1] << 8;
 8001318:	785c      	ldrb	r4, [r3, #1]
 800131a:	f813 1b02 	ldrb.w	r1, [r3], #2
 800131e:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
	while (i < size / 2)
 8001322:	4563      	cmp	r3, ip
		new_buffer[i] = buffer[2*i] | buffer[2 * i + 1] << 8;
 8001324:	f82e 1f02 	strh.w	r1, [lr, #2]!
	while (i < size / 2)
 8001328:	d1f6      	bne.n	8001318 <make_8to16+0x14>
		++i;
	}
	return new_buffer;
 800132a:	4610      	mov	r0, r2
}
 800132c:	bd10      	pop	{r4, pc}
		return 0;
 800132e:	2000      	movs	r0, #0
 8001330:	4770      	bx	lr
	return new_buffer;
 8001332:	4610      	mov	r0, r2
}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop

08001338 <get_max_min>:
uint16_t min = 4097;



uint16_t get_max_min(uint16_t * buffer, size_t size)
{
 8001338:	b430      	push	{r4, r5}
		{
			min = buffer[i];
		}
		i++;
	}
	return (max + min) / 2 ;
 800133a:	4c0e      	ldr	r4, [pc, #56]	@ (8001374 <get_max_min+0x3c>)
 800133c:	4d0e      	ldr	r5, [pc, #56]	@ (8001378 <get_max_min+0x40>)
 800133e:	8822      	ldrh	r2, [r4, #0]
 8001340:	f8b5 c000 	ldrh.w	ip, [r5]
	while (i < size)
 8001344:	2901      	cmp	r1, #1
 8001346:	d90e      	bls.n	8001366 <get_max_min+0x2e>
 8001348:	1e83      	subs	r3, r0, #2
 800134a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
		if (max < buffer[i])
 800134e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8001352:	4293      	cmp	r3, r2
			max = buffer[i];
 8001354:	bf84      	itt	hi
 8001356:	8023      	strhhi	r3, [r4, #0]
		if (max < buffer[i])
 8001358:	461a      	movhi	r2, r3
		if (min > buffer[i])
 800135a:	4563      	cmp	r3, ip
			min = buffer[i];
 800135c:	bf3c      	itt	cc
 800135e:	802b      	strhcc	r3, [r5, #0]
 8001360:	469c      	movcc	ip, r3
	while (i < size)
 8001362:	4281      	cmp	r1, r0
 8001364:	d1f3      	bne.n	800134e <get_max_min+0x16>
	return (max + min) / 2 ;
 8001366:	eb02 000c 	add.w	r0, r2, ip
}
 800136a:	f3c0 004f 	ubfx	r0, r0, #1, #16
 800136e:	bc30      	pop	{r4, r5}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20000ca8 	.word	0x20000ca8
 8001378:	20000004 	.word	0x20000004

0800137c <samp>:

void samp(uint8_t * buffer,size_t size ,TIM_HandleTypeDef *htim, ADC_HandleTypeDef *hadc)
{
 800137c:	b570      	push	{r4, r5, r6, lr}
 800137e:	461c      	mov	r4, r3
 8001380:	460e      	mov	r6, r1
 8001382:	4605      	mov	r5, r0
	HAL_TIM_Base_Start(htim);
 8001384:	4610      	mov	r0, r2
 8001386:	f004 fd37 	bl	8005df8 <HAL_TIM_Base_Start>

	HAL_ADC_Start_DMA(hadc, (uint32_t *) buffer, size);
 800138a:	4632      	mov	r2, r6
 800138c:	4629      	mov	r1, r5
 800138e:	4620      	mov	r0, r4
 8001390:	f001 fcea 	bl	8002d68 <HAL_ADC_Start_DMA>

    adc_ongoing = 1;
 8001394:	4a03      	ldr	r2, [pc, #12]	@ (80013a4 <samp+0x28>)
 8001396:	2301      	movs	r3, #1
 8001398:	6013      	str	r3, [r2, #0]
    while (1)
    {
    	if (adc_ongoing == 0)
 800139a:	6813      	ldr	r3, [r2, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1fc      	bne.n	800139a <samp+0x1e>
    		break;
    }
    return;
    //uart_transmit(adc_buffer,2050);
}
 80013a0:	bd70      	pop	{r4, r5, r6, pc}
 80013a2:	bf00      	nop
 80013a4:	20000cb0 	.word	0x20000cb0

080013a8 <set_sm_freq>:
uint32_t sys_clock = 150e6;
void set_sm_freq(uint32_t freq, TIM_HandleTypeDef *htim)
{
	uint32_t set = sys_clock / freq - 1;
 80013a8:	4b05      	ldr	r3, [pc, #20]	@ (80013c0 <set_sm_freq+0x18>)
	if (set <38)
		set = 38;
	htim->Instance->ARR = set;
 80013aa:	680a      	ldr	r2, [r1, #0]
	uint32_t set = sys_clock / freq - 1;
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	fbb3 f0f0 	udiv	r0, r3, r0
 80013b2:	3801      	subs	r0, #1
	if (set <38)
 80013b4:	2826      	cmp	r0, #38	@ 0x26
 80013b6:	bf38      	it	cc
 80013b8:	2026      	movcc	r0, #38	@ 0x26
	htim->Instance->ARR = set;
 80013ba:	62d0      	str	r0, [r2, #44]	@ 0x2c
}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	20000000 	.word	0x20000000

080013c4 <get_freq>:
float get_freq(COMP_HandleTypeDef * hcomp ,DAC_HandleTypeDef * hdac,
		uint32_t dac_channel, uint32_t Alignment,uint32_t threshold , TIM_HandleTypeDef *htim,
		uint32_t tim_channel, uint32_t *pData, uint16_t length, TIM_HandleTypeDef *htim_sec )
{
 80013c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013c8:	460e      	mov	r6, r1
 80013ca:	4617      	mov	r7, r2
 80013cc:	4680      	mov	r8, r0
	HAL_DAC_SetValue(hdac, dac_channel, Alignment , threshold);
 80013ce:	461a      	mov	r2, r3
 80013d0:	4639      	mov	r1, r7
 80013d2:	9b06      	ldr	r3, [sp, #24]
{
 80013d4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80013d6:	f8bd 4028 	ldrh.w	r4, [sp, #40]	@ 0x28
	HAL_DAC_SetValue(hdac, dac_channel, Alignment , threshold);
 80013da:	4630      	mov	r0, r6
 80013dc:	f002 fa2c 	bl	8003838 <HAL_DAC_SetValue>
	HAL_DAC_Start(hdac, dac_channel);
 80013e0:	4639      	mov	r1, r7
 80013e2:	4630      	mov	r0, r6
 80013e4:	f002 f9de 	bl	80037a4 <HAL_DAC_Start>
	HAL_COMP_Start(hcomp);
 80013e8:	4640      	mov	r0, r8
 80013ea:	f002 f835 	bl	8003458 <HAL_COMP_Start>

	HAL_TIM_IC_Start_DMA(htim, tim_channel, pData, length);
 80013ee:	4623      	mov	r3, r4
 80013f0:	462a      	mov	r2, r5
 80013f2:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
 80013f6:	f004 fdef 	bl	8005fd8 <HAL_TIM_IC_Start_DMA>
	ic_ongoing = 1;
 80013fa:	4a1a      	ldr	r2, [pc, #104]	@ (8001464 <get_freq+0xa0>)
 80013fc:	2301      	movs	r3, #1
 80013fe:	6013      	str	r3, [r2, #0]
	while (ic_ongoing)
 8001400:	6813      	ldr	r3, [r2, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1fc      	bne.n	8001400 <get_freq+0x3c>
	  ;

	uint32_t base = 0;
	for (int i = 1; i != length; ++i)
 8001406:	2c01      	cmp	r4, #1
 8001408:	d029      	beq.n	800145e <get_freq+0x9a>
 800140a:	4629      	mov	r1, r5
	uint32_t base = 0;
 800140c:	461a      	mov	r2, r3
 800140e:	f851 3b04 	ldr.w	r3, [r1], #4
 8001412:	eb05 0c84 	add.w	ip, r5, r4, lsl #2
	{
	  if (pData[i] < (pData[i-1] & ((1<<16)-1)))
 8001416:	f851 0b04 	ldr.w	r0, [r1], #4
 800141a:	b29b      	uxth	r3, r3
 800141c:	4283      	cmp	r3, r0
		  base += 1u << 16;
 800141e:	bf88      	it	hi
 8001420:	f502 3280 	addhi.w	r2, r2, #65536	@ 0x10000
      pData[i] += base;
 8001424:	1813      	adds	r3, r2, r0
	for (int i = 1; i != length; ++i)
 8001426:	458c      	cmp	ip, r1
      pData[i] += base;
 8001428:	f841 3c04 	str.w	r3, [r1, #-4]
	for (int i = 1; i != length; ++i)
 800142c:	d1f3      	bne.n	8001416 <get_freq+0x52>
//	HAL_TIM_Base_Stop(htim_sec);
//    const float f_cpu = 150.f;
//    float freq = f_cpu / cyc;
	uint32_t t1 = pData[1];
	uint32_t t2 = pData[length-1];
	float freq = 150.f/ (t2 - t1) * (length-2);
 800142e:	1ea3      	subs	r3, r4, #2
 8001430:	ee07 3a10 	vmov	s14, r3
 8001434:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	uint32_t t2 = pData[length-1];
 8001438:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 800143c:	3c01      	subs	r4, #1
	float freq = 150.f/ (t2 - t1) * (length-2);
 800143e:	686a      	ldr	r2, [r5, #4]
 8001440:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8001444:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001468 <get_freq+0xa4>
 8001448:	1a9b      	subs	r3, r3, r2
 800144a:	ee07 3a90 	vmov	s15, r3
 800144e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001452:	ee86 0aa7 	vdiv.f32	s0, s13, s15
	return freq ;

}
 8001456:	ee20 0a07 	vmul.f32	s0, s0, s14
 800145a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (int i = 1; i != length; ++i)
 800145e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001462:	e7e9      	b.n	8001438 <get_freq+0x74>
 8001464:	20000cac 	.word	0x20000cac
 8001468:	43160000 	.word	0x43160000
 800146c:	00000000 	.word	0x00000000

08001470 <get_fit_sm_hz>:

uint32_t get_fit_sm_hz(float freq)
{
 8001470:	b508      	push	{r3, lr}
 8001472:	ee10 0a10 	vmov	r0, s0
	uint32_t a = freq *1e6;
 8001476:	f7ff f965 	bl	8000744 <__aeabi_f2d>
 800147a:	a30d      	add	r3, pc, #52	@ (adr r3, 80014b0 <get_fit_sm_hz+0x40>)
 800147c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001480:	f7fe fed2 	bl	8000228 <__aeabi_dmul>
 8001484:	f7ff f9b6 	bl	80007f4 <__aeabi_d2uiz>
	return a*1e3/4;
 8001488:	f7ff f93a 	bl	8000700 <__aeabi_ui2d>
 800148c:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <get_fit_sm_hz+0x38>)
 800148e:	2200      	movs	r2, #0
 8001490:	f7fe feca 	bl	8000228 <__aeabi_dmul>
 8001494:	4b05      	ldr	r3, [pc, #20]	@ (80014ac <get_fit_sm_hz+0x3c>)
 8001496:	2200      	movs	r2, #0
 8001498:	f7fe fec6 	bl	8000228 <__aeabi_dmul>
 800149c:	f7ff f9aa 	bl	80007f4 <__aeabi_d2uiz>

}
 80014a0:	bd08      	pop	{r3, pc}
 80014a2:	bf00      	nop
 80014a4:	f3af 8000 	nop.w
 80014a8:	408f4000 	.word	0x408f4000
 80014ac:	3fd00000 	.word	0x3fd00000
 80014b0:	00000000 	.word	0x00000000
 80014b4:	412e8480 	.word	0x412e8480

080014b8 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b8:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <HAL_MspInit+0x30>)
 80014ba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80014bc:	f042 0201 	orr.w	r2, r2, #1
 80014c0:	661a      	str	r2, [r3, #96]	@ 0x60
 80014c2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
{
 80014c4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c6:	f002 0201 	and.w	r2, r2, #1
 80014ca:	9200      	str	r2, [sp, #0]
 80014cc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ce:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80014d0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80014d4:	659a      	str	r2, [r3, #88]	@ 0x58
 80014d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e0:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 80014e2:	f003 bbbb 	b.w	8004c5c <HAL_PWREx_DisableUCPDDeadBattery>
 80014e6:	bf00      	nop
 80014e8:	40021000 	.word	0x40021000

080014ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014ec:	b570      	push	{r4, r5, r6, lr}
 80014ee:	4604      	mov	r4, r0
 80014f0:	b09c      	sub	sp, #112	@ 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f2:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f4:	2254      	movs	r2, #84	@ 0x54
 80014f6:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80014fc:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001500:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001502:	f006 fba9 	bl	8007c58 <memset>
  if(hadc->Instance==ADC1)
 8001506:	6823      	ldr	r3, [r4, #0]
 8001508:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800150c:	d001      	beq.n	8001512 <HAL_ADC_MspInit+0x26>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800150e:	b01c      	add	sp, #112	@ 0x70
 8001510:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001512:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8001516:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800151a:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800151c:	9207      	str	r2, [sp, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 800151e:	9318      	str	r3, [sp, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001520:	f003 ff7a 	bl	8005418 <HAL_RCCEx_PeriphCLKConfig>
 8001524:	2800      	cmp	r0, #0
 8001526:	d136      	bne.n	8001596 <HAL_ADC_MspInit+0xaa>
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001528:	4b1e      	ldr	r3, [pc, #120]	@ (80015a4 <HAL_ADC_MspInit+0xb8>)
    hdma_adc1.Instance = DMA1_Channel1;
 800152a:	4d1f      	ldr	r5, [pc, #124]	@ (80015a8 <HAL_ADC_MspInit+0xbc>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 800152c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800152e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001532:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001534:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001536:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800153a:	9200      	str	r2, [sp, #0]
 800153c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001540:	f042 0201 	orr.w	r2, r2, #1
 8001544:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001548:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001550:	2201      	movs	r2, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001552:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001556:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001558:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800155a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001560:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	f002 fc2d 	bl	8003dc0 <HAL_GPIO_Init>
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001566:	4a11      	ldr	r2, [pc, #68]	@ (80015ac <HAL_ADC_MspInit+0xc0>)
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001568:	622e      	str	r6, [r5, #32]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800156a:	2305      	movs	r3, #5
 800156c:	e9c5 2300 	strd	r2, r3, [r5]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001570:	f44f 7380 	mov.w	r3, #256	@ 0x100
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001574:	2280      	movs	r2, #128	@ 0x80
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001576:	e9c5 2304 	strd	r2, r3, [r5, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800157a:	4628      	mov	r0, r5
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800157c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001580:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001584:	e9c5 3606 	strd	r3, r6, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001588:	f002 fa6c 	bl	8003a64 <HAL_DMA_Init>
 800158c:	b930      	cbnz	r0, 800159c <HAL_ADC_MspInit+0xb0>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800158e:	6565      	str	r5, [r4, #84]	@ 0x54
 8001590:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 8001592:	b01c      	add	sp, #112	@ 0x70
 8001594:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001596:	f7ff feb3 	bl	8001300 <Error_Handler>
 800159a:	e7c5      	b.n	8001528 <HAL_ADC_MspInit+0x3c>
      Error_Handler();
 800159c:	f7ff feb0 	bl	8001300 <Error_Handler>
 80015a0:	e7f5      	b.n	800158e <HAL_ADC_MspInit+0xa2>
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000
 80015a8:	20000bdc 	.word	0x20000bdc
 80015ac:	40020008 	.word	0x40020008

080015b0 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80015b0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcomp->Instance==COMP3)
 80015b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001624 <HAL_COMP_MspInit+0x74>)
 80015b4:	6802      	ldr	r2, [r0, #0]
{
 80015b6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	2400      	movs	r4, #0
  if(hcomp->Instance==COMP3)
 80015ba:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80015c0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80015c4:	9406      	str	r4, [sp, #24]
  if(hcomp->Instance==COMP3)
 80015c6:	d001      	beq.n	80015cc <HAL_COMP_MspInit+0x1c>

  /* USER CODE END COMP3_MspInit 1 */

  }

}
 80015c8:	b008      	add	sp, #32
 80015ca:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015cc:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 80015d0:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80015d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d6:	4814      	ldr	r0, [pc, #80]	@ (8001628 <HAL_COMP_MspInit+0x78>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d8:	f042 0204 	orr.w	r2, r2, #4
 80015dc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80015de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015e0:	f002 0204 	and.w	r2, r2, #4
 80015e4:	9200      	str	r2, [sp, #0]
 80015e6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015ea:	f042 0201 	orr.w	r2, r2, #1
 80015ee:	64da      	str	r2, [r3, #76]	@ 0x4c
 80015f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015f8:	2204      	movs	r2, #4
 80015fa:	2302      	movs	r3, #2
 80015fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001600:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF3_COMP3;
 8001602:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001604:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF3_COMP3;
 8001606:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001608:	f002 fbda 	bl	8003dc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800160c:	2201      	movs	r2, #1
 800160e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001610:	a902      	add	r1, sp, #8
 8001612:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001616:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161c:	f002 fbd0 	bl	8003dc0 <HAL_GPIO_Init>
}
 8001620:	b008      	add	sp, #32
 8001622:	bd10      	pop	{r4, pc}
 8001624:	40010208 	.word	0x40010208
 8001628:	48000800 	.word	0x48000800

0800162c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 800162c:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <HAL_CRC_MspInit+0x28>)
 800162e:	6802      	ldr	r2, [r0, #0]
 8001630:	429a      	cmp	r2, r3
 8001632:	d000      	beq.n	8001636 <HAL_CRC_MspInit+0xa>
 8001634:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001636:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
{
 800163a:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 800163c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800163e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001642:	649a      	str	r2, [r3, #72]	@ 0x48
 8001644:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001646:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800164a:	9301      	str	r3, [sp, #4]
 800164c:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 800164e:	b002      	add	sp, #8
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	40023000 	.word	0x40023000

08001658 <HAL_DAC_MspInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  if(hdac->Instance==DAC1)
 8001658:	4b0a      	ldr	r3, [pc, #40]	@ (8001684 <HAL_DAC_MspInit+0x2c>)
 800165a:	6802      	ldr	r2, [r0, #0]
 800165c:	429a      	cmp	r2, r3
 800165e:	d000      	beq.n	8001662 <HAL_DAC_MspInit+0xa>
 8001660:	4770      	bx	lr
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001662:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
 8001666:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
{
 800166a:	b082      	sub	sp, #8
    __HAL_RCC_DAC1_CLK_ENABLE();
 800166c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800166e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001672:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001676:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800167a:	9301      	str	r3, [sp, #4]
 800167c:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 800167e:	b002      	add	sp, #8
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	50000800 	.word	0x50000800

08001688 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800168a:	4604      	mov	r4, r0
 800168c:	b09f      	sub	sp, #124	@ 0x7c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001690:	2254      	movs	r2, #84	@ 0x54
 8001692:	a809      	add	r0, sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001698:	e9cd 1106 	strd	r1, r1, [sp, #24]
 800169c:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800169e:	f006 fadb 	bl	8007c58 <memset>
  if(hi2c->Instance==I2C1)
 80016a2:	4b24      	ldr	r3, [pc, #144]	@ (8001734 <HAL_I2C_MspInit+0xac>)
 80016a4:	6822      	ldr	r2, [r4, #0]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d001      	beq.n	80016ae <HAL_I2C_MspInit+0x26>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80016aa:	b01f      	add	sp, #124	@ 0x7c
 80016ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016ae:	2340      	movs	r3, #64	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b0:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016b2:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b4:	f003 feb0 	bl	8005418 <HAL_RCCEx_PeriphCLKConfig>
 80016b8:	2800      	cmp	r0, #0
 80016ba:	d138      	bne.n	800172e <HAL_I2C_MspInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016bc:	4c1e      	ldr	r4, [pc, #120]	@ (8001738 <HAL_I2C_MspInit+0xb0>)
 80016be:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80016c6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	9301      	str	r3, [sp, #4]
 80016ce:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80016d2:	f043 0302 	orr.w	r3, r3, #2
 80016d6:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80016d8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016e0:	2504      	movs	r5, #4
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016e2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80016e6:	2600      	movs	r6, #0
 80016e8:	2700      	movs	r7, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ea:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016ec:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80016f6:	e9cd 6706 	strd	r6, r7, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016fc:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fe:	f002 fb5f 	bl	8003dc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001702:	2280      	movs	r2, #128	@ 0x80
 8001704:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001706:	480d      	ldr	r0, [pc, #52]	@ (800173c <HAL_I2C_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001708:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800170c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001710:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001714:	f002 fb54 	bl	8003dc0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001718:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800171a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800171e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001720:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001722:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001726:	9303      	str	r3, [sp, #12]
 8001728:	9b03      	ldr	r3, [sp, #12]
}
 800172a:	b01f      	add	sp, #124	@ 0x7c
 800172c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 800172e:	f7ff fde7 	bl	8001300 <Error_Handler>
 8001732:	e7c3      	b.n	80016bc <HAL_I2C_MspInit+0x34>
 8001734:	40005400 	.word	0x40005400
 8001738:	40021000 	.word	0x40021000
 800173c:	48000400 	.word	0x48000400

08001740 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001740:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI3)
 8001742:	4a1b      	ldr	r2, [pc, #108]	@ (80017b0 <HAL_SPI_MspInit+0x70>)
 8001744:	6801      	ldr	r1, [r0, #0]
{
 8001746:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	2300      	movs	r3, #0
  if(hspi->Instance==SPI3)
 800174a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001750:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001754:	9306      	str	r3, [sp, #24]
  if(hspi->Instance==SPI3)
 8001756:	d002      	beq.n	800175e <HAL_SPI_MspInit+0x1e>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001758:	b009      	add	sp, #36	@ 0x24
 800175a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI3_CLK_ENABLE();
 800175e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001762:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001766:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80017a8 <HAL_SPI_MspInit+0x68>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800176a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800176c:	4811      	ldr	r0, [pc, #68]	@ (80017b4 <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 800176e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001772:	659a      	str	r2, [r3, #88]	@ 0x58
 8001774:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001776:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 800177a:	9200      	str	r2, [sp, #0]
 800177c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800177e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001780:	f042 0204 	orr.w	r2, r2, #4
 8001784:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800178e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001790:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001792:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001796:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001798:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800179a:	f002 fb11 	bl	8003dc0 <HAL_GPIO_Init>
}
 800179e:	b009      	add	sp, #36	@ 0x24
 80017a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80017a4:	f3af 8000 	nop.w
 80017a8:	00001400 	.word	0x00001400
 80017ac:	00000002 	.word	0x00000002
 80017b0:	40003c00 	.word	0x40003c00
 80017b4:	48000800 	.word	0x48000800

080017b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017b8:	b530      	push	{r4, r5, lr}
  if(htim_base->Instance==TIM2)
 80017ba:	6803      	ldr	r3, [r0, #0]
 80017bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
{
 80017c0:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM2)
 80017c2:	d007      	beq.n	80017d4 <HAL_TIM_Base_MspInit+0x1c>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 80017c4:	4a25      	ldr	r2, [pc, #148]	@ (800185c <HAL_TIM_Base_MspInit+0xa4>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d01d      	beq.n	8001806 <HAL_TIM_Base_MspInit+0x4e>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 80017ca:	4a25      	ldr	r2, [pc, #148]	@ (8001860 <HAL_TIM_Base_MspInit+0xa8>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d00e      	beq.n	80017ee <HAL_TIM_Base_MspInit+0x36>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80017d0:	b005      	add	sp, #20
 80017d2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017d4:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80017d8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80017da:	f042 0201 	orr.w	r2, r2, #1
 80017de:	659a      	str	r2, [r3, #88]	@ 0x58
 80017e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	9301      	str	r3, [sp, #4]
 80017e8:	9b01      	ldr	r3, [sp, #4]
}
 80017ea:	b005      	add	sp, #20
 80017ec:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM6_CLK_ENABLE();
 80017ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001864 <HAL_TIM_Base_MspInit+0xac>)
 80017f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80017f2:	f042 0210 	orr.w	r2, r2, #16
 80017f6:	659a      	str	r2, [r3, #88]	@ 0x58
 80017f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fa:	f003 0310 	and.w	r3, r3, #16
 80017fe:	9303      	str	r3, [sp, #12]
 8001800:	9b03      	ldr	r3, [sp, #12]
}
 8001802:	b005      	add	sp, #20
 8001804:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001806:	f502 3203 	add.w	r2, r2, #134144	@ 0x20c00
    hdma_tim3_ch1.Instance = DMA1_Channel2;
 800180a:	4d17      	ldr	r5, [pc, #92]	@ (8001868 <HAL_TIM_Base_MspInit+0xb0>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 800180c:	6d91      	ldr	r1, [r2, #88]	@ 0x58
 800180e:	f041 0102 	orr.w	r1, r1, #2
 8001812:	6591      	str	r1, [r2, #88]	@ 0x58
 8001814:	6d92      	ldr	r2, [r2, #88]	@ 0x58
    hdma_tim3_ch1.Instance = DMA1_Channel2;
 8001816:	4915      	ldr	r1, [pc, #84]	@ (800186c <HAL_TIM_Base_MspInit+0xb4>)
 8001818:	6029      	str	r1, [r5, #0]
    __HAL_RCC_TIM3_CLK_ENABLE();
 800181a:	f002 0202 	and.w	r2, r2, #2
 800181e:	9202      	str	r2, [sp, #8]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8001820:	2300      	movs	r3, #0
 8001822:	213d      	movs	r1, #61	@ 0x3d
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001824:	9a02      	ldr	r2, [sp, #8]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8001826:	2280      	movs	r2, #128	@ 0x80
 8001828:	e9c5 1301 	strd	r1, r3, [r5, #4]
 800182c:	e9c5 3203 	strd	r3, r2, [r5, #12]
 8001830:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001834:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001838:	e9c5 1205 	strd	r1, r2, [r5, #20]
 800183c:	4604      	mov	r4, r0
 800183e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8001842:	4628      	mov	r0, r5
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8001844:	e9c5 3207 	strd	r3, r2, [r5, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8001848:	f002 f90c 	bl	8003a64 <HAL_DMA_Init>
 800184c:	b918      	cbnz	r0, 8001856 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 800184e:	6265      	str	r5, [r4, #36]	@ 0x24
 8001850:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 8001852:	b005      	add	sp, #20
 8001854:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8001856:	f7ff fd53 	bl	8001300 <Error_Handler>
 800185a:	e7f8      	b.n	800184e <HAL_TIM_Base_MspInit+0x96>
 800185c:	40000400 	.word	0x40000400
 8001860:	40001000 	.word	0x40001000
 8001864:	40021000 	.word	0x40021000
 8001868:	20000984 	.word	0x20000984
 800186c:	4002001c 	.word	0x4002001c

08001870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001870:	b530      	push	{r4, r5, lr}
 8001872:	4604      	mov	r4, r0
 8001874:	b09d      	sub	sp, #116	@ 0x74
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001876:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001878:	2254      	movs	r2, #84	@ 0x54
 800187a:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8001880:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001884:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001886:	f006 f9e7 	bl	8007c58 <memset>
  if(huart->Instance==USART2)
 800188a:	4b2a      	ldr	r3, [pc, #168]	@ (8001934 <HAL_UART_MspInit+0xc4>)
 800188c:	6822      	ldr	r2, [r4, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d001      	beq.n	8001896 <HAL_UART_MspInit+0x26>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001892:	b01d      	add	sp, #116	@ 0x74
 8001894:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001896:	2202      	movs	r2, #2
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001898:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800189a:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800189c:	9207      	str	r2, [sp, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800189e:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018a0:	f003 fdba 	bl	8005418 <HAL_RCCEx_PeriphCLKConfig>
 80018a4:	2800      	cmp	r0, #0
 80018a6:	d13f      	bne.n	8001928 <HAL_UART_MspInit+0xb8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018a8:	4b23      	ldr	r3, [pc, #140]	@ (8001938 <HAL_UART_MspInit+0xc8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018aa:	4824      	ldr	r0, [pc, #144]	@ (800193c <HAL_UART_MspInit+0xcc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80018ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    hdma_usart2_rx.Instance = DMA2_Channel8;
 80018ae:	4d24      	ldr	r5, [pc, #144]	@ (8001940 <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80018b0:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80018b4:	659a      	str	r2, [r3, #88]	@ 0x58
 80018b6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80018b8:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80018bc:	9200      	str	r2, [sp, #0]
 80018be:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80018c2:	f042 0202 	orr.w	r2, r2, #2
 80018c6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80018c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80018d0:	2218      	movs	r2, #24
 80018d2:	2302      	movs	r3, #2
 80018d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018d8:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018da:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80018dc:	2300      	movs	r3, #0
 80018de:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018e4:	2307      	movs	r3, #7
 80018e6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e8:	f002 fa6a 	bl	8003dc0 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80018ec:	4915      	ldr	r1, [pc, #84]	@ (8001944 <HAL_UART_MspInit+0xd4>)
 80018ee:	221a      	movs	r2, #26
 80018f0:	2300      	movs	r3, #0
 80018f2:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80018f6:	4628      	mov	r0, r5
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80018f8:	2280      	movs	r2, #128	@ 0x80
 80018fa:	e9c5 3302 	strd	r3, r3, [r5, #8]
 80018fe:	e9c5 2304 	strd	r2, r3, [r5, #16]
 8001902:	e9c5 3306 	strd	r3, r3, [r5, #24]
 8001906:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001908:	f002 f8ac 	bl	8003a64 <HAL_DMA_Init>
 800190c:	b978      	cbnz	r0, 800192e <HAL_UART_MspInit+0xbe>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	4611      	mov	r1, r2
 8001912:	2026      	movs	r0, #38	@ 0x26
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001914:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
 8001918:	62ac      	str	r4, [r5, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800191a:	f001 fddb 	bl	80034d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800191e:	2026      	movs	r0, #38	@ 0x26
 8001920:	f001 fe14 	bl	800354c <HAL_NVIC_EnableIRQ>
}
 8001924:	b01d      	add	sp, #116	@ 0x74
 8001926:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8001928:	f7ff fcea 	bl	8001300 <Error_Handler>
 800192c:	e7bc      	b.n	80018a8 <HAL_UART_MspInit+0x38>
      Error_Handler();
 800192e:	f7ff fce7 	bl	8001300 <Error_Handler>
 8001932:	e7ec      	b.n	800190e <HAL_UART_MspInit+0x9e>
 8001934:	40004400 	.word	0x40004400
 8001938:	40021000 	.word	0x40021000
 800193c:	48000400 	.word	0x48000400
 8001940:	20000890 	.word	0x20000890
 8001944:	40020494 	.word	0x40020494

08001948 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001948:	e7fe      	b.n	8001948 <NMI_Handler>
 800194a:	bf00      	nop

0800194c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194c:	e7fe      	b.n	800194c <HardFault_Handler>
 800194e:	bf00      	nop

08001950 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <MemManage_Handler>
 8001952:	bf00      	nop

08001954 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <BusFault_Handler>
 8001956:	bf00      	nop

08001958 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001958:	e7fe      	b.n	8001958 <UsageFault_Handler>
 800195a:	bf00      	nop

0800195c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop

08001960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop

08001964 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop

08001968 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001968:	f000 bd12 	b.w	8002390 <HAL_IncTick>

0800196c <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800196c:	4801      	ldr	r0, [pc, #4]	@ (8001974 <DMA1_Channel1_IRQHandler+0x8>)
 800196e:	f002 b9d9 	b.w	8003d24 <HAL_DMA_IRQHandler>
 8001972:	bf00      	nop
 8001974:	20000bdc 	.word	0x20000bdc

08001978 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8001978:	4801      	ldr	r0, [pc, #4]	@ (8001980 <DMA1_Channel2_IRQHandler+0x8>)
 800197a:	f002 b9d3 	b.w	8003d24 <HAL_DMA_IRQHandler>
 800197e:	bf00      	nop
 8001980:	20000984 	.word	0x20000984

08001984 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001984:	4801      	ldr	r0, [pc, #4]	@ (800198c <USART2_IRQHandler+0x8>)
 8001986:	f005 b92f 	b.w	8006be8 <HAL_UART_IRQHandler>
 800198a:	bf00      	nop
 800198c:	200008f0 	.word	0x200008f0

08001990 <DMA2_Channel8_IRQHandler>:
void DMA2_Channel8_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel8_IRQn 0 */

  /* USER CODE END DMA2_Channel8_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001990:	4801      	ldr	r0, [pc, #4]	@ (8001998 <DMA2_Channel8_IRQHandler+0x8>)
 8001992:	f002 b9c7 	b.w	8003d24 <HAL_DMA_IRQHandler>
 8001996:	bf00      	nop
 8001998:	20000890 	.word	0x20000890

0800199c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800199c:	2001      	movs	r0, #1
 800199e:	4770      	bx	lr

080019a0 <_kill>:

int _kill(int pid, int sig)
{
 80019a0:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019a2:	f006 f9b5 	bl	8007d10 <__errno>
 80019a6:	2316      	movs	r3, #22
 80019a8:	6003      	str	r3, [r0, #0]
  return -1;
}
 80019aa:	f04f 30ff 	mov.w	r0, #4294967295
 80019ae:	bd08      	pop	{r3, pc}

080019b0 <_exit>:

void _exit (int status)
{
 80019b0:	b508      	push	{r3, lr}
  errno = EINVAL;
 80019b2:	f006 f9ad 	bl	8007d10 <__errno>
 80019b6:	2316      	movs	r3, #22
 80019b8:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80019ba:	e7fe      	b.n	80019ba <_exit+0xa>

080019bc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019bc:	490c      	ldr	r1, [pc, #48]	@ (80019f0 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019be:	4a0d      	ldr	r2, [pc, #52]	@ (80019f4 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 80019c0:	680b      	ldr	r3, [r1, #0]
{
 80019c2:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019c4:	4c0c      	ldr	r4, [pc, #48]	@ (80019f8 <_sbrk+0x3c>)
 80019c6:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80019c8:	b12b      	cbz	r3, 80019d6 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ca:	4418      	add	r0, r3
 80019cc:	4290      	cmp	r0, r2
 80019ce:	d807      	bhi.n	80019e0 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80019d0:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80019d6:	4b09      	ldr	r3, [pc, #36]	@ (80019fc <_sbrk+0x40>)
 80019d8:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80019da:	4418      	add	r0, r3
 80019dc:	4290      	cmp	r0, r2
 80019de:	d9f7      	bls.n	80019d0 <_sbrk+0x14>
    errno = ENOMEM;
 80019e0:	f006 f996 	bl	8007d10 <__errno>
 80019e4:	230c      	movs	r3, #12
 80019e6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80019e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	bd10      	pop	{r4, pc}
 80019f0:	20000cb4 	.word	0x20000cb4
 80019f4:	20020000 	.word	0x20020000
 80019f8:	00000400 	.word	0x00000400
 80019fc:	20001028 	.word	0x20001028

08001a00 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a00:	4a03      	ldr	r2, [pc, #12]	@ (8001a10 <SystemInit+0x10>)
 8001a02:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001a06:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a0a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a0e:	4770      	bx	lr
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <_ZL17reg_write_handlerPhj>:
  uart_transmit((uint8_t*)&value, 4);
}

static void reg_write_handler(uint8_t* data, size_t size)
{
  if (size != 12)
 8001a14:	290c      	cmp	r1, #12
 8001a16:	d10b      	bne.n	8001a30 <_ZL17reg_write_handlerPhj+0x1c>
    return;

  uint32_t addr = *(uint32_t*)data;
  volatile uint32_t* reg = (volatile uint32_t*)addr;
 8001a18:	6802      	ldr	r2, [r0, #0]
  uint32_t value = *(uint32_t*)(data+4);
  uint32_t mask = *(uint32_t*)(data+8);

  *reg = (*reg & ~mask) | value;
 8001a1a:	6841      	ldr	r1, [r0, #4]
 8001a1c:	6813      	ldr	r3, [r2, #0]
{
 8001a1e:	b410      	push	{r4}
  *reg = (*reg & ~mask) | value;
 8001a20:	6884      	ldr	r4, [r0, #8]
 8001a22:	ea23 0304 	bic.w	r3, r3, r4
 8001a26:	430b      	orrs	r3, r1
}
 8001a28:	f85d 4b04 	ldr.w	r4, [sp], #4
  *reg = (*reg & ~mask) | value;
 8001a2c:	6013      	str	r3, [r2, #0]
}
 8001a2e:	4770      	bx	lr
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop

08001a34 <_ZL16reg_read_handlerPhj>:
  if (size != 4)
 8001a34:	2904      	cmp	r1, #4
 8001a36:	d000      	beq.n	8001a3a <_ZL16reg_read_handlerPhj+0x6>
 8001a38:	4770      	bx	lr
{
 8001a3a:	b530      	push	{r4, r5, lr}
  volatile uint32_t* reg = (volatile uint32_t*)addr;
 8001a3c:	6803      	ldr	r3, [r0, #0]
  HAL_UART_Transmit(huart_reg, tx_buf, 4, 10);
 8001a3e:	4d11      	ldr	r5, [pc, #68]	@ (8001a84 <_ZL16reg_read_handlerPhj+0x50>)
  uint32_t value = *reg;
 8001a40:	681a      	ldr	r2, [r3, #0]
  HAL_UART_Transmit(huart_reg, tx_buf, 4, 10);
 8001a42:	6828      	ldr	r0, [r5, #0]
 8001a44:	460c      	mov	r4, r1
  uint8_t tx_buf[4] = {0x55, 0xA5,
 8001a46:	4910      	ldr	r1, [pc, #64]	@ (8001a88 <_ZL16reg_read_handlerPhj+0x54>)
{
 8001a48:	b083      	sub	sp, #12
  uint32_t value = *reg;
 8001a4a:	e9cd 2100 	strd	r2, r1, [sp]
  HAL_UART_Transmit(huart_reg, tx_buf, 4, 10);
 8001a4e:	230a      	movs	r3, #10
 8001a50:	4622      	mov	r2, r4
 8001a52:	a901      	add	r1, sp, #4
 8001a54:	f004 ffd8 	bl	8006a08 <HAL_UART_Transmit>
  uint16_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t*)data, size);
 8001a58:	4622      	mov	r2, r4
 8001a5a:	4669      	mov	r1, sp
 8001a5c:	480b      	ldr	r0, [pc, #44]	@ (8001a8c <_ZL16reg_read_handlerPhj+0x58>)
 8001a5e:	f001 fe15 	bl	800368c <HAL_CRC_Calculate>
  HAL_UART_Transmit(huart_reg, data, size, size+1);
 8001a62:	4622      	mov	r2, r4
 8001a64:	4669      	mov	r1, sp
  uint16_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t*)data, size);
 8001a66:	4604      	mov	r4, r0
  HAL_UART_Transmit(huart_reg, data, size, size+1);
 8001a68:	2305      	movs	r3, #5
 8001a6a:	6828      	ldr	r0, [r5, #0]
 8001a6c:	f004 ffcc 	bl	8006a08 <HAL_UART_Transmit>
  HAL_UART_Transmit(huart_reg, tx_buf, 2, 10);
 8001a70:	6828      	ldr	r0, [r5, #0]
  tx_buf[0] = crc & 0xFF;
 8001a72:	f8ad 4004 	strh.w	r4, [sp, #4]
  HAL_UART_Transmit(huart_reg, tx_buf, 2, 10);
 8001a76:	230a      	movs	r3, #10
 8001a78:	2202      	movs	r2, #2
 8001a7a:	a901      	add	r1, sp, #4
 8001a7c:	f004 ffc4 	bl	8006a08 <HAL_UART_Transmit>
}
 8001a80:	b003      	add	sp, #12
 8001a82:	bd30      	pop	{r4, r5, pc}
 8001a84:	20000010 	.word	0x20000010
 8001a88:	0004a555 	.word	0x0004a555
 8001a8c:	20000b94 	.word	0x20000b94

08001a90 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a94:	b083      	sub	sp, #12
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 8001a96:	9001      	str	r0, [sp, #4]
 8001a98:	2800      	cmp	r0, #0
 8001a9a:	f000 80d3 	beq.w	8001c44 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x1b4>
      { return static_cast<_Link_type>(__x->_M_right); }
 8001a9e:	9b01      	ldr	r3, [sp, #4]
 8001aa0:	f8d3 800c 	ldr.w	r8, [r3, #12]
      while (__x != 0)
 8001aa4:	f1b8 0f00 	cmp.w	r8, #0
 8001aa8:	f000 80ba 	beq.w	8001c20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x190>
      { return static_cast<_Link_type>(__x->_M_right); }
 8001aac:	f8d8 900c 	ldr.w	r9, [r8, #12]
      while (__x != 0)
 8001ab0:	f1b9 0f00 	cmp.w	r9, #0
 8001ab4:	f000 80a0 	beq.w	8001bf8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x168>
      { return static_cast<_Link_type>(__x->_M_right); }
 8001ab8:	f8d9 a00c 	ldr.w	sl, [r9, #12]
      while (__x != 0)
 8001abc:	f1ba 0f00 	cmp.w	sl, #0
 8001ac0:	f000 8086 	beq.w	8001bd0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x140>
      { return static_cast<_Link_type>(__x->_M_right); }
 8001ac4:	f8da 400c 	ldr.w	r4, [sl, #12]
      while (__x != 0)
 8001ac8:	2c00      	cmp	r4, #0
 8001aca:	d058      	beq.n	8001b7e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0xee>
      { return static_cast<_Link_type>(__x->_M_right); }
 8001acc:	68e5      	ldr	r5, [r4, #12]
      while (__x != 0)
 8001ace:	2d00      	cmp	r5, #0
 8001ad0:	d032      	beq.n	8001b38 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0xa8>
      { return static_cast<_Link_type>(__x->_M_right); }
 8001ad2:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      while (__x != 0)
 8001ad6:	f1bb 0f00 	cmp.w	fp, #0
 8001ada:	d03e      	beq.n	8001b5a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0xca>
      { return static_cast<_Link_type>(__x->_M_right); }
 8001adc:	f8db 600c 	ldr.w	r6, [fp, #12]
      while (__x != 0)
 8001ae0:	2e00      	cmp	r6, #0
 8001ae2:	d060      	beq.n	8001ba6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x116>
      { return static_cast<_Link_type>(__x->_M_right); }
 8001ae4:	68f7      	ldr	r7, [r6, #12]
      while (__x != 0)
 8001ae6:	b1af      	cbz	r7, 8001b14 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x84>
	{
	  _M_erase(_S_right(__x));
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	9700      	str	r7, [sp, #0]
 8001aec:	f7ff ffd0 	bl	8001a90 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0>
      { _M_string_length = __length; }

      _GLIBCXX20_CONSTEXPR
      pointer
      _M_data() const
      { return _M_dataplus._M_p; }
 8001af0:	9a00      	ldr	r2, [sp, #0]
      { return static_cast<_Link_type>(__x->_M_left); }
 8001af2:	68bf      	ldr	r7, [r7, #8]
 8001af4:	6910      	ldr	r0, [r2, #16]
      _GLIBCXX20_CONSTEXPR
      const_pointer
      _M_local_data() const
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 8001af6:	f102 0118 	add.w	r1, r2, #24

      _GLIBCXX20_CONSTEXPR
      bool
      _M_is_local() const
      {
	if (_M_data() == _M_local_data())
 8001afa:	4288      	cmp	r0, r1
 8001afc:	d004      	beq.n	8001b08 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x78>
      }

      _GLIBCXX20_CONSTEXPR
      void
      _M_destroy(size_type __size) throw()
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 8001afe:	6991      	ldr	r1, [r2, #24]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8001b00:	3101      	adds	r1, #1
 8001b02:	f005 fecd 	bl	80078a0 <_ZdlPvj>
 8001b06:	9a00      	ldr	r2, [sp, #0]
 8001b08:	212c      	movs	r1, #44	@ 0x2c
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	f005 fec8 	bl	80078a0 <_ZdlPvj>
      while (__x != 0)
 8001b10:	2f00      	cmp	r7, #0
 8001b12:	d1e9      	bne.n	8001ae8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x58>
      { return _M_dataplus._M_p; }
 8001b14:	6930      	ldr	r0, [r6, #16]
      { return static_cast<_Link_type>(__x->_M_left); }
 8001b16:	68b7      	ldr	r7, [r6, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 8001b18:	f106 0318 	add.w	r3, r6, #24
	if (_M_data() == _M_local_data())
 8001b1c:	4298      	cmp	r0, r3
 8001b1e:	d003      	beq.n	8001b28 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x98>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 8001b20:	69b1      	ldr	r1, [r6, #24]
 8001b22:	3101      	adds	r1, #1
 8001b24:	f005 febc 	bl	80078a0 <_ZdlPvj>
 8001b28:	212c      	movs	r1, #44	@ 0x2c
 8001b2a:	4630      	mov	r0, r6
 8001b2c:	f005 feb8 	bl	80078a0 <_ZdlPvj>
      while (__x != 0)
 8001b30:	2f00      	cmp	r7, #0
 8001b32:	d038      	beq.n	8001ba6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x116>
	  _Link_type __y = _S_left(__x);
	  _M_drop_node(__x);
	  __x = __y;
 8001b34:	463e      	mov	r6, r7
 8001b36:	e7d5      	b.n	8001ae4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x54>
      { return _M_dataplus._M_p; }
 8001b38:	6920      	ldr	r0, [r4, #16]
      { return static_cast<_Link_type>(__x->_M_left); }
 8001b3a:	68a5      	ldr	r5, [r4, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 8001b3c:	f104 0318 	add.w	r3, r4, #24
	if (_M_data() == _M_local_data())
 8001b40:	4298      	cmp	r0, r3
 8001b42:	d003      	beq.n	8001b4c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0xbc>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 8001b44:	69a1      	ldr	r1, [r4, #24]
 8001b46:	3101      	adds	r1, #1
 8001b48:	f005 feaa 	bl	80078a0 <_ZdlPvj>
 8001b4c:	212c      	movs	r1, #44	@ 0x2c
 8001b4e:	4620      	mov	r0, r4
 8001b50:	f005 fea6 	bl	80078a0 <_ZdlPvj>
      while (__x != 0)
 8001b54:	b19d      	cbz	r5, 8001b7e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0xee>
	  __x = __y;
 8001b56:	462c      	mov	r4, r5
 8001b58:	e7b8      	b.n	8001acc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x3c>
      { return _M_dataplus._M_p; }
 8001b5a:	6928      	ldr	r0, [r5, #16]
      { return static_cast<_Link_type>(__x->_M_left); }
 8001b5c:	68ae      	ldr	r6, [r5, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 8001b5e:	f105 0318 	add.w	r3, r5, #24
	if (_M_data() == _M_local_data())
 8001b62:	4298      	cmp	r0, r3
 8001b64:	d003      	beq.n	8001b6e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0xde>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 8001b66:	69a9      	ldr	r1, [r5, #24]
 8001b68:	3101      	adds	r1, #1
 8001b6a:	f005 fe99 	bl	80078a0 <_ZdlPvj>
 8001b6e:	212c      	movs	r1, #44	@ 0x2c
 8001b70:	4628      	mov	r0, r5
 8001b72:	f005 fe95 	bl	80078a0 <_ZdlPvj>
      while (__x != 0)
 8001b76:	2e00      	cmp	r6, #0
 8001b78:	d0de      	beq.n	8001b38 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0xa8>
	  __x = __y;
 8001b7a:	4635      	mov	r5, r6
 8001b7c:	e7a9      	b.n	8001ad2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x42>
      { return _M_dataplus._M_p; }
 8001b7e:	f8da 0010 	ldr.w	r0, [sl, #16]
      { return static_cast<_Link_type>(__x->_M_left); }
 8001b82:	f8da 4008 	ldr.w	r4, [sl, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 8001b86:	f10a 0318 	add.w	r3, sl, #24
	if (_M_data() == _M_local_data())
 8001b8a:	4298      	cmp	r0, r3
 8001b8c:	d004      	beq.n	8001b98 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x108>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 8001b8e:	f8da 1018 	ldr.w	r1, [sl, #24]
 8001b92:	3101      	adds	r1, #1
 8001b94:	f005 fe84 	bl	80078a0 <_ZdlPvj>
 8001b98:	212c      	movs	r1, #44	@ 0x2c
 8001b9a:	4650      	mov	r0, sl
 8001b9c:	f005 fe80 	bl	80078a0 <_ZdlPvj>
      while (__x != 0)
 8001ba0:	b1b4      	cbz	r4, 8001bd0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x140>
	  __x = __y;
 8001ba2:	46a2      	mov	sl, r4
 8001ba4:	e78e      	b.n	8001ac4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x34>
      { return _M_dataplus._M_p; }
 8001ba6:	f8db 0010 	ldr.w	r0, [fp, #16]
      { return static_cast<_Link_type>(__x->_M_left); }
 8001baa:	f8db 6008 	ldr.w	r6, [fp, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 8001bae:	f10b 0318 	add.w	r3, fp, #24
	if (_M_data() == _M_local_data())
 8001bb2:	4298      	cmp	r0, r3
 8001bb4:	d004      	beq.n	8001bc0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x130>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 8001bb6:	f8db 1018 	ldr.w	r1, [fp, #24]
 8001bba:	3101      	adds	r1, #1
 8001bbc:	f005 fe70 	bl	80078a0 <_ZdlPvj>
 8001bc0:	212c      	movs	r1, #44	@ 0x2c
 8001bc2:	4658      	mov	r0, fp
 8001bc4:	f005 fe6c 	bl	80078a0 <_ZdlPvj>
      while (__x != 0)
 8001bc8:	2e00      	cmp	r6, #0
 8001bca:	d0c6      	beq.n	8001b5a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0xca>
	  __x = __y;
 8001bcc:	46b3      	mov	fp, r6
 8001bce:	e785      	b.n	8001adc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x4c>
      { return _M_dataplus._M_p; }
 8001bd0:	f8d9 0010 	ldr.w	r0, [r9, #16]
      { return static_cast<_Link_type>(__x->_M_left); }
 8001bd4:	f8d9 4008 	ldr.w	r4, [r9, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 8001bd8:	f109 0318 	add.w	r3, r9, #24
	if (_M_data() == _M_local_data())
 8001bdc:	4298      	cmp	r0, r3
 8001bde:	d004      	beq.n	8001bea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x15a>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 8001be0:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8001be4:	3101      	adds	r1, #1
 8001be6:	f005 fe5b 	bl	80078a0 <_ZdlPvj>
 8001bea:	212c      	movs	r1, #44	@ 0x2c
 8001bec:	4648      	mov	r0, r9
 8001bee:	f005 fe57 	bl	80078a0 <_ZdlPvj>
      while (__x != 0)
 8001bf2:	b10c      	cbz	r4, 8001bf8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x168>
	  __x = __y;
 8001bf4:	46a1      	mov	r9, r4
 8001bf6:	e75f      	b.n	8001ab8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x28>
      { return _M_dataplus._M_p; }
 8001bf8:	f8d8 0010 	ldr.w	r0, [r8, #16]
      { return static_cast<_Link_type>(__x->_M_left); }
 8001bfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 8001c00:	f108 0318 	add.w	r3, r8, #24
	if (_M_data() == _M_local_data())
 8001c04:	4298      	cmp	r0, r3
 8001c06:	d004      	beq.n	8001c12 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x182>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 8001c08:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8001c0c:	3101      	adds	r1, #1
 8001c0e:	f005 fe47 	bl	80078a0 <_ZdlPvj>
 8001c12:	212c      	movs	r1, #44	@ 0x2c
 8001c14:	4640      	mov	r0, r8
 8001c16:	f005 fe43 	bl	80078a0 <_ZdlPvj>
      while (__x != 0)
 8001c1a:	b10c      	cbz	r4, 8001c20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x190>
	  __x = __y;
 8001c1c:	46a0      	mov	r8, r4
 8001c1e:	e745      	b.n	8001aac <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x1c>
      { return _M_dataplus._M_p; }
 8001c20:	9a01      	ldr	r2, [sp, #4]
 8001c22:	6910      	ldr	r0, [r2, #16]
      { return static_cast<_Link_type>(__x->_M_left); }
 8001c24:	6894      	ldr	r4, [r2, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 8001c26:	f102 0318 	add.w	r3, r2, #24
	if (_M_data() == _M_local_data())
 8001c2a:	4298      	cmp	r0, r3
 8001c2c:	d003      	beq.n	8001c36 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x1a6>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 8001c2e:	6991      	ldr	r1, [r2, #24]
 8001c30:	3101      	adds	r1, #1
 8001c32:	f005 fe35 	bl	80078a0 <_ZdlPvj>
 8001c36:	9801      	ldr	r0, [sp, #4]
 8001c38:	212c      	movs	r1, #44	@ 0x2c
 8001c3a:	f005 fe31 	bl	80078a0 <_ZdlPvj>
      while (__x != 0)
 8001c3e:	b10c      	cbz	r4, 8001c44 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x1b4>
	  __x = __y;
 8001c40:	9401      	str	r4, [sp, #4]
 8001c42:	e72c      	b.n	8001a9e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0xe>
	}
    }
 8001c44:	b003      	add	sp, #12
 8001c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c4a:	bf00      	nop

08001c4c <uart_transmit>:
{
 8001c4c:	b570      	push	{r4, r5, r6, lr}
 8001c4e:	b082      	sub	sp, #8
  HAL_UART_Transmit(huart_reg, tx_buf, 4, 10);
 8001c50:	4e12      	ldr	r6, [pc, #72]	@ (8001c9c <uart_transmit+0x50>)
      (uint8_t)(size & 0xFF), (uint8_t)(size >> 8)};
 8001c52:	f8ad 1006 	strh.w	r1, [sp, #6]
  uint8_t tx_buf[4] = {0x55, 0xA5,
 8001c56:	f24a 5255 	movw	r2, #42325	@ 0xa555
 8001c5a:	f8ad 2004 	strh.w	r2, [sp, #4]
  HAL_UART_Transmit(huart_reg, tx_buf, 4, 10);
 8001c5e:	2204      	movs	r2, #4
{
 8001c60:	460c      	mov	r4, r1
 8001c62:	4605      	mov	r5, r0
  HAL_UART_Transmit(huart_reg, tx_buf, 4, 10);
 8001c64:	eb0d 0102 	add.w	r1, sp, r2
 8001c68:	230a      	movs	r3, #10
 8001c6a:	6830      	ldr	r0, [r6, #0]
 8001c6c:	f004 fecc 	bl	8006a08 <HAL_UART_Transmit>
  uint16_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t*)data, size);
 8001c70:	4622      	mov	r2, r4
 8001c72:	4629      	mov	r1, r5
 8001c74:	480a      	ldr	r0, [pc, #40]	@ (8001ca0 <uart_transmit+0x54>)
 8001c76:	f001 fd09 	bl	800368c <HAL_CRC_Calculate>
  HAL_UART_Transmit(huart_reg, data, size, size+1);
 8001c7a:	4629      	mov	r1, r5
 8001c7c:	1c63      	adds	r3, r4, #1
  uint16_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t*)data, size);
 8001c7e:	4605      	mov	r5, r0
  HAL_UART_Transmit(huart_reg, data, size, size+1);
 8001c80:	b2a2      	uxth	r2, r4
 8001c82:	6830      	ldr	r0, [r6, #0]
 8001c84:	f004 fec0 	bl	8006a08 <HAL_UART_Transmit>
  HAL_UART_Transmit(huart_reg, tx_buf, 2, 10);
 8001c88:	6830      	ldr	r0, [r6, #0]
  tx_buf[0] = crc & 0xFF;
 8001c8a:	f8ad 5004 	strh.w	r5, [sp, #4]
  HAL_UART_Transmit(huart_reg, tx_buf, 2, 10);
 8001c8e:	230a      	movs	r3, #10
 8001c90:	2202      	movs	r2, #2
 8001c92:	a901      	add	r1, sp, #4
 8001c94:	f004 feb8 	bl	8006a08 <HAL_UART_Transmit>
}
 8001c98:	b002      	add	sp, #8
 8001c9a:	bd70      	pop	{r4, r5, r6, pc}
 8001c9c:	20000010 	.word	0x20000010
 8001ca0:	20000b94 	.word	0x20000b94

08001ca4 <HAL_UARTEx_RxEventCallback>:
  if (huart != huart_reg)
 8001ca4:	4b81      	ldr	r3, [pc, #516]	@ (8001eac <HAL_UARTEx_RxEventCallback+0x208>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4283      	cmp	r3, r0
 8001caa:	d000      	beq.n	8001cae <HAL_UARTEx_RxEventCallback+0xa>
 8001cac:	4770      	bx	lr
{
 8001cae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  auto end = rx_buf + Size;
 8001cb2:	4a7f      	ldr	r2, [pc, #508]	@ (8001eb0 <HAL_UARTEx_RxEventCallback+0x20c>)
 8001cb4:	eb02 0c01 	add.w	ip, r2, r1
  for (auto* p = rx_buf; p < end; )
 8001cb8:	4594      	cmp	ip, r2
{
 8001cba:	b08b      	sub	sp, #44	@ 0x2c
  for (auto* p = rx_buf; p < end; )
 8001cbc:	f240 80b5 	bls.w	8001e2a <HAL_UARTEx_RxEventCallback+0x186>
  if (end - begin < 8)
 8001cc0:	2907      	cmp	r1, #7
 8001cc2:	f240 80b2 	bls.w	8001e2a <HAL_UARTEx_RxEventCallback+0x186>
  for (auto* p = rx_buf; p < end; )
 8001cc6:	4690      	mov	r8, r2
 8001cc8:	f8cd c000 	str.w	ip, [sp]
  if (*begin++ != 0x55)
 8001ccc:	f898 3000 	ldrb.w	r3, [r8]
 8001cd0:	2b55      	cmp	r3, #85	@ 0x55
 8001cd2:	f040 80a8 	bne.w	8001e26 <HAL_UARTEx_RxEventCallback+0x182>
  if (*begin++ != 0xA5)
 8001cd6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001cda:	2ba5      	cmp	r3, #165	@ 0xa5
 8001cdc:	f040 80a3 	bne.w	8001e26 <HAL_UARTEx_RxEventCallback+0x182>
  if (size > end - begin + 2 || size < 2)
 8001ce0:	9b00      	ldr	r3, [sp, #0]
 8001ce2:	f8b8 9002 	ldrh.w	r9, [r8, #2]
  size += *begin++ << 8;
 8001ce6:	f108 0604 	add.w	r6, r8, #4
  if (size > end - begin + 2 || size < 2)
 8001cea:	1b9b      	subs	r3, r3, r6
 8001cec:	3302      	adds	r3, #2
 8001cee:	4599      	cmp	r9, r3
 8001cf0:	f300 8099 	bgt.w	8001e26 <HAL_UARTEx_RxEventCallback+0x182>
 8001cf4:	f1b9 0f01 	cmp.w	r9, #1
 8001cf8:	f340 8095 	ble.w	8001e26 <HAL_UARTEx_RxEventCallback+0x182>
  int crc = begin[size] + (begin[size+1] << 8);
 8001cfc:	eb06 0709 	add.w	r7, r6, r9
 8001d00:	f816 4009 	ldrb.w	r4, [r6, r9]
 8001d04:	787b      	ldrb	r3, [r7, #1]
  int calc = HAL_CRC_Calculate(&hcrc, (uint32_t*)begin, size);
 8001d06:	486b      	ldr	r0, [pc, #428]	@ (8001eb4 <HAL_UARTEx_RxEventCallback+0x210>)
 8001d08:	464a      	mov	r2, r9
 8001d0a:	4631      	mov	r1, r6
  int crc = begin[size] + (begin[size+1] << 8);
 8001d0c:	eb04 2403 	add.w	r4, r4, r3, lsl #8
  int calc = HAL_CRC_Calculate(&hcrc, (uint32_t*)begin, size);
 8001d10:	f001 fcbc 	bl	800368c <HAL_CRC_Calculate>
  if (calc != crc)
 8001d14:	4284      	cmp	r4, r0
 8001d16:	f040 8086 	bne.w	8001e26 <HAL_UARTEx_RxEventCallback+0x182>
 8001d1a:	46b2      	mov	sl, r6
 8001d1c:	4633      	mov	r3, r6
 8001d1e:	e001      	b.n	8001d24 <HAL_UARTEx_RxEventCallback+0x80>
  for (; p != end; ++p)
 8001d20:	429f      	cmp	r7, r3
 8001d22:	d075      	beq.n	8001e10 <HAL_UARTEx_RxEventCallback+0x16c>
    if (*p == ':')
 8001d24:	781a      	ldrb	r2, [r3, #0]
 8001d26:	2a3a      	cmp	r2, #58	@ 0x3a
 8001d28:	461d      	mov	r5, r3
 8001d2a:	461c      	mov	r4, r3
 8001d2c:	f103 0301 	add.w	r3, r3, #1
 8001d30:	d1f6      	bne.n	8001d20 <HAL_UARTEx_RxEventCallback+0x7c>
  if (p != end)
 8001d32:	42af      	cmp	r7, r5
 8001d34:	d06c      	beq.n	8001e10 <HAL_UARTEx_RxEventCallback+0x16c>
	: allocator_type(__a), _M_p(__dat) { }
 8001d36:	ab06      	add	r3, sp, #24
 8001d38:	9304      	str	r3, [sp, #16]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 8001d3a:	1bab      	subs	r3, r5, r6
      template<typename _InputIterator>
#endif
	_GLIBCXX20_CONSTEXPR
        basic_string(_InputIterator __beg, _InputIterator __end,
		     const _Alloc& __a = _Alloc())
	: _M_dataplus(_M_local_data(), __a), _M_string_length(0)
 8001d3c:	2200      	movs	r2, #0
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
 8001d3e:	2b0f      	cmp	r3, #15
 8001d40:	9205      	str	r2, [sp, #20]
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8001d42:	9303      	str	r3, [sp, #12]
	if (__dnew > size_type(_S_local_capacity))
 8001d44:	f200 80a9 	bhi.w	8001e9a <HAL_UARTEx_RxEventCallback+0x1f6>
 8001d48:	a806      	add	r0, sp, #24
	  for (; __k1 != __k2; ++__k1, (void)++__p)
 8001d4a:	42ae      	cmp	r6, r5
 8001d4c:	d014      	beq.n	8001d78 <HAL_UARTEx_RxEventCallback+0xd4>
 8001d4e:	eba4 0208 	sub.w	r2, r4, r8
 8001d52:	1f53      	subs	r3, r2, #5
 8001d54:	2b05      	cmp	r3, #5
 8001d56:	d904      	bls.n	8001d62 <HAL_UARTEx_RxEventCallback+0xbe>
 8001d58:	f108 0305 	add.w	r3, r8, #5
 8001d5c:	1ac3      	subs	r3, r0, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d873      	bhi.n	8001e4a <HAL_UARTEx_RxEventCallback+0x1a6>
 8001d62:	3c01      	subs	r4, #1
 8001d64:	f108 0303 	add.w	r3, r8, #3
	    traits_type::assign(*__p, *__k1); // These types are off.
 8001d68:	f813 2f01 	ldrb.w	r2, [r3, #1]!
#if __cpp_constexpr_dynamic_alloc
	if (std::__is_constant_evaluated())
	  std::construct_at(__builtin_addressof(__c1), __c2);
	else
#endif
	__c1 = __c2;
 8001d6c:	f800 2b01 	strb.w	r2, [r0], #1
	  for (; __k1 != __k2; ++__k1, (void)++__p)
 8001d70:	429c      	cmp	r4, r3
 8001d72:	d1f9      	bne.n	8001d68 <HAL_UARTEx_RxEventCallback+0xc4>
      { return _M_dataplus._M_p; }
 8001d74:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
 8001d78:	2200      	movs	r2, #0
      { _M_string_length = __length; }
 8001d7a:	9305      	str	r3, [sp, #20]
 8001d7c:	54c2      	strb	r2, [r0, r3]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8001d7e:	4b4e      	ldr	r3, [pc, #312]	@ (8001eb8 <HAL_UARTEx_RxEventCallback+0x214>)
 8001d80:	f8dd b010 	ldr.w	fp, [sp, #16]
 8001d84:	689c      	ldr	r4, [r3, #8]
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Base_ptr __y,
		   const _Key& __k)
    {
      while (__x != 0)
 8001d86:	2c00      	cmp	r4, #0
 8001d88:	d03a      	beq.n	8001e00 <HAL_UARTEx_RxEventCallback+0x15c>
 8001d8a:	f8dd a014 	ldr.w	sl, [sp, #20]
 8001d8e:	9701      	str	r7, [sp, #4]
 8001d90:	1d19      	adds	r1, r3, #4
 8001d92:	4657      	mov	r7, sl
 8001d94:	46aa      	mov	sl, r5
 8001d96:	460d      	mov	r5, r1
	      else if (lt(__s2[__i], __s1[__i]))
		return 1;
	    return 0;
	  }
#endif
	return __builtin_memcmp(__s1, __s2, __n);
 8001d98:	6966      	ldr	r6, [r4, #20]
       *  If the result of the comparison is nonzero returns it,
       *  otherwise the shorter one is ordered first.
      */
      _GLIBCXX20_CONSTEXPR
      int
      compare(const basic_string& __str) const
 8001d9a:	6920      	ldr	r0, [r4, #16]
 8001d9c:	42be      	cmp	r6, r7
 8001d9e:	4632      	mov	r2, r6
 8001da0:	bf28      	it	cs
 8001da2:	463a      	movcs	r2, r7
 8001da4:	4659      	mov	r1, fp
	if (__n == 0)
 8001da6:	b112      	cbz	r2, 8001dae <HAL_UARTEx_RxEventCallback+0x10a>
	return __builtin_memcmp(__s1, __s2, __n);
 8001da8:	f005 ff46 	bl	8007c38 <memcmp>
	const size_type __size = this->size();
	const size_type __osize = __str.size();
	const size_type __len = std::min(__size, __osize);

	int __r = traits_type::compare(_M_data(), __str.data(), __len);
	if (!__r)
 8001dac:	b900      	cbnz	r0, 8001db0 <HAL_UARTEx_RxEventCallback+0x10c>
	const difference_type __d = difference_type(__n1 - __n2);
 8001dae:	1bf0      	subs	r0, r6, r7
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8001db0:	2800      	cmp	r0, #0
      { return static_cast<_Link_type>(__x->_M_right); }
 8001db2:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8001db6:	db03      	blt.n	8001dc0 <HAL_UARTEx_RxEventCallback+0x11c>
      while (__x != 0)
 8001db8:	b13a      	cbz	r2, 8001dca <HAL_UARTEx_RxEventCallback+0x126>
 8001dba:	4625      	mov	r5, r4
 8001dbc:	4614      	mov	r4, r2
 8001dbe:	e7eb      	b.n	8001d98 <HAL_UARTEx_RxEventCallback+0xf4>
 8001dc0:	2900      	cmp	r1, #0
 8001dc2:	d064      	beq.n	8001e8e <HAL_UARTEx_RxEventCallback+0x1ea>
	  __y = __x, __x = _S_left(__x);
	else
	  __x = _S_right(__x);
 8001dc4:	460a      	mov	r2, r1
 8001dc6:	4614      	mov	r4, r2
 8001dc8:	e7e6      	b.n	8001d98 <HAL_UARTEx_RxEventCallback+0xf4>
 8001dca:	4655      	mov	r5, sl
 8001dcc:	46ba      	mov	sl, r7
 8001dce:	9f01      	ldr	r7, [sp, #4]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8001dd0:	4b3a      	ldr	r3, [pc, #232]	@ (8001ebc <HAL_UARTEx_RxEventCallback+0x218>)
 8001dd2:	429c      	cmp	r4, r3
 8001dd4:	d014      	beq.n	8001e00 <HAL_UARTEx_RxEventCallback+0x15c>
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8001dd6:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
 8001dda:	45b2      	cmp	sl, r6
 8001ddc:	4652      	mov	r2, sl
 8001dde:	bf28      	it	cs
 8001de0:	4632      	movcs	r2, r6
	if (__n == 0)
 8001de2:	b11a      	cbz	r2, 8001dec <HAL_UARTEx_RxEventCallback+0x148>
	return __builtin_memcmp(__s1, __s2, __n);
 8001de4:	4658      	mov	r0, fp
 8001de6:	f005 ff27 	bl	8007c38 <memcmp>
	if (!__r)
 8001dea:	b908      	cbnz	r0, 8001df0 <HAL_UARTEx_RxEventCallback+0x14c>
	const difference_type __d = difference_type(__n1 - __n2);
 8001dec:	ebaa 0006 	sub.w	r0, sl, r6
	      || _M_impl._M_key_compare(__k,
 8001df0:	2800      	cmp	r0, #0
 8001df2:	db05      	blt.n	8001e00 <HAL_UARTEx_RxEventCallback+0x15c>
      ++p;
 8001df4:	1c68      	adds	r0, r5, #1
      it->second(p, end-p);
 8001df6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001df8:	1a39      	subs	r1, r7, r0
 8001dfa:	4798      	blx	r3
      { return _M_dataplus._M_p; }
 8001dfc:	f8dd b010 	ldr.w	fp, [sp, #16]
	if (_M_data() == _M_local_data())
 8001e00:	ab06      	add	r3, sp, #24
 8001e02:	459b      	cmp	fp, r3
 8001e04:	d004      	beq.n	8001e10 <HAL_UARTEx_RxEventCallback+0x16c>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 8001e06:	9906      	ldr	r1, [sp, #24]
 8001e08:	4658      	mov	r0, fp
 8001e0a:	3101      	adds	r1, #1
 8001e0c:	f005 fd48 	bl	80078a0 <_ZdlPvj>
  for (auto* p = rx_buf; p < end; )
 8001e10:	9b00      	ldr	r3, [sp, #0]
  return size + 6;
 8001e12:	f109 0906 	add.w	r9, r9, #6
    p += res;
 8001e16:	44c8      	add	r8, r9
  for (auto* p = rx_buf; p < end; )
 8001e18:	4543      	cmp	r3, r8
 8001e1a:	d904      	bls.n	8001e26 <HAL_UARTEx_RxEventCallback+0x182>
  if (end - begin < 8)
 8001e1c:	eba3 0308 	sub.w	r3, r3, r8
 8001e20:	2b07      	cmp	r3, #7
 8001e22:	f73f af53 	bgt.w	8001ccc <HAL_UARTEx_RxEventCallback+0x28>
  HAL_UARTEx_ReceiveToIdle_DMA(huart_reg, rx_buf, sizeof(rx_buf)/sizeof(*rx_buf));
 8001e26:	4b21      	ldr	r3, [pc, #132]	@ (8001eac <HAL_UARTEx_RxEventCallback+0x208>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4921      	ldr	r1, [pc, #132]	@ (8001eb0 <HAL_UARTEx_RxEventCallback+0x20c>)
 8001e2c:	f44f 7202 	mov.w	r2, #520	@ 0x208
 8001e30:	4618      	mov	r0, r3
 8001e32:	f005 fd11 	bl	8007858 <HAL_UARTEx_ReceiveToIdle_DMA>
  hdma_rx->Instance->CCR &= ~DMA_CCR_HTIE;
 8001e36:	4b22      	ldr	r3, [pc, #136]	@ (8001ec0 <HAL_UARTEx_RxEventCallback+0x21c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	6813      	ldr	r3, [r2, #0]
 8001e3e:	f023 0304 	bic.w	r3, r3, #4
 8001e42:	6013      	str	r3, [r2, #0]
}
 8001e44:	b00b      	add	sp, #44	@ 0x2c
 8001e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e4a:	1f14      	subs	r4, r2, #4
 8001e4c:	f024 0103 	bic.w	r1, r4, #3
 8001e50:	4401      	add	r1, r0
 8001e52:	4603      	mov	r3, r0
	    traits_type::assign(*__p, *__k1); // These types are off.
 8001e54:	f85a 2b04 	ldr.w	r2, [sl], #4
	__c1 = __c2;
 8001e58:	f843 2b04 	str.w	r2, [r3], #4
	  for (; __k1 != __k2; ++__k1, (void)++__p)
 8001e5c:	428b      	cmp	r3, r1
 8001e5e:	d1f9      	bne.n	8001e54 <HAL_UARTEx_RxEventCallback+0x1b0>
 8001e60:	f024 0303 	bic.w	r3, r4, #3
 8001e64:	07a4      	lsls	r4, r4, #30
 8001e66:	eb06 0203 	add.w	r2, r6, r3
 8001e6a:	eb00 0103 	add.w	r1, r0, r3
 8001e6e:	d081      	beq.n	8001d74 <HAL_UARTEx_RxEventCallback+0xd0>
	    traits_type::assign(*__p, *__k1); // These types are off.
 8001e70:	5cf4      	ldrb	r4, [r6, r3]
 8001e72:	54c4      	strb	r4, [r0, r3]
	  for (; __k1 != __k2; ++__k1, (void)++__p)
 8001e74:	1c53      	adds	r3, r2, #1
 8001e76:	429d      	cmp	r5, r3
 8001e78:	f43f af7c 	beq.w	8001d74 <HAL_UARTEx_RxEventCallback+0xd0>
	    traits_type::assign(*__p, *__k1); // These types are off.
 8001e7c:	7853      	ldrb	r3, [r2, #1]
 8001e7e:	704b      	strb	r3, [r1, #1]
	  for (; __k1 != __k2; ++__k1, (void)++__p)
 8001e80:	1c93      	adds	r3, r2, #2
 8001e82:	429d      	cmp	r5, r3
 8001e84:	f43f af76 	beq.w	8001d74 <HAL_UARTEx_RxEventCallback+0xd0>
	    traits_type::assign(*__p, *__k1); // These types are off.
 8001e88:	7893      	ldrb	r3, [r2, #2]
 8001e8a:	708b      	strb	r3, [r1, #2]
	  for (; __k1 != __k2; ++__k1, (void)++__p)
 8001e8c:	e772      	b.n	8001d74 <HAL_UARTEx_RxEventCallback+0xd0>
      while (__x != 0)
 8001e8e:	4629      	mov	r1, r5
 8001e90:	460c      	mov	r4, r1
 8001e92:	4655      	mov	r5, sl
 8001e94:	46ba      	mov	sl, r7
 8001e96:	9f01      	ldr	r7, [sp, #4]
 8001e98:	e79a      	b.n	8001dd0 <HAL_UARTEx_RxEventCallback+0x12c>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8001e9a:	a804      	add	r0, sp, #16
 8001e9c:	a903      	add	r1, sp, #12
 8001e9e:	f005 fdd9 	bl	8007a54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
	    _M_capacity(__dnew);
 8001ea2:	9b03      	ldr	r3, [sp, #12]
      { _M_dataplus._M_p = __p; }
 8001ea4:	9004      	str	r0, [sp, #16]
      { _M_allocated_capacity = __capacity; }
 8001ea6:	9306      	str	r3, [sp, #24]
 8001ea8:	e74f      	b.n	8001d4a <HAL_UARTEx_RxEventCallback+0xa6>
 8001eaa:	bf00      	nop
 8001eac:	20000010 	.word	0x20000010
 8001eb0:	20000cd0 	.word	0x20000cd0
 8001eb4:	20000b94 	.word	0x20000b94
 8001eb8:	20000cb8 	.word	0x20000cb8
 8001ebc:	20000cbc 	.word	0x20000cbc
 8001ec0:	2000000c 	.word	0x2000000c

08001ec4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8001ec8:	688c      	ldr	r4, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001eca:	b083      	sub	sp, #12
 8001ecc:	468b      	mov	fp, r1
 8001ece:	4681      	mov	r9, r0
 8001ed0:	9201      	str	r2, [sp, #4]
      while (__x != 0)
 8001ed2:	2c00      	cmp	r4, #0
 8001ed4:	d049      	beq.n	8001f6a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0xa6>
 8001ed6:	e9d2 8700 	ldrd	r8, r7, [r2]
	return __builtin_memcmp(__s1, __s2, __n);
 8001eda:	6966      	ldr	r6, [r4, #20]
      compare(const basic_string& __str) const
 8001edc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8001ee0:	42b7      	cmp	r7, r6
 8001ee2:	463d      	mov	r5, r7
 8001ee4:	bf28      	it	cs
 8001ee6:	4635      	movcs	r5, r6
 8001ee8:	4640      	mov	r0, r8
 8001eea:	462a      	mov	r2, r5
	if (__n == 0)
 8001eec:	b11d      	cbz	r5, 8001ef6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x32>
	return __builtin_memcmp(__s1, __s2, __n);
 8001eee:	4651      	mov	r1, sl
 8001ef0:	f005 fea2 	bl	8007c38 <memcmp>
	if (!__r)
 8001ef4:	b900      	cbnz	r0, 8001ef8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x34>
	const difference_type __d = difference_type(__n1 - __n2);
 8001ef6:	1bb8      	subs	r0, r7, r6
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8001ef8:	2800      	cmp	r0, #0
 8001efa:	db19      	blt.n	8001f30 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x6c>
      { return static_cast<_Link_type>(__x->_M_right); }
 8001efc:	68e2      	ldr	r2, [r4, #12]
      while (__x != 0)
 8001efe:	b10a      	cbz	r2, 8001f04 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x40>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001f00:	4614      	mov	r4, r2
 8001f02:	e7ea      	b.n	8001eda <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x16>
      while (__x != 0)
 8001f04:	46a3      	mov	fp, r4
	if (__n == 0)
 8001f06:	b18d      	cbz	r5, 8001f2c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x68>
	return __builtin_memcmp(__s1, __s2, __n);
 8001f08:	462a      	mov	r2, r5
 8001f0a:	4641      	mov	r1, r8
 8001f0c:	4650      	mov	r0, sl
 8001f0e:	f005 fe93 	bl	8007c38 <memcmp>
	if (!__r)
 8001f12:	b158      	cbz	r0, 8001f2c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x68>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8001f14:	2800      	cmp	r0, #0
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001f16:	f04f 0300 	mov.w	r3, #0
    }
 8001f1a:	4648      	mov	r0, r9
 8001f1c:	bfb4      	ite	lt
 8001f1e:	e9c9 3b00 	strdlt	r3, fp, [r9]
      : first(__a), second(__b) { }
 8001f22:	e9c9 4300 	strdge	r4, r3, [r9]
 8001f26:	b003      	add	sp, #12
 8001f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const difference_type __d = difference_type(__n1 - __n2);
 8001f2c:	1bf0      	subs	r0, r6, r7
 8001f2e:	e7f1      	b.n	8001f14 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x50>
      { return static_cast<_Link_type>(__x->_M_left); }
 8001f30:	68a2      	ldr	r2, [r4, #8]
      while (__x != 0)
 8001f32:	2a00      	cmp	r2, #0
 8001f34:	d1e4      	bne.n	8001f00 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x3c>
	  if (__j == begin())
 8001f36:	f8db 300c 	ldr.w	r3, [fp, #12]
 8001f3a:	429c      	cmp	r4, r3
 8001f3c:	d00e      	beq.n	8001f5c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x98>
	_M_node = _Rb_tree_decrement(_M_node);
 8001f3e:	4620      	mov	r0, r4
 8001f40:	f005 fd18 	bl	8007974 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8001f44:	9b01      	ldr	r3, [sp, #4]
 8001f46:	e9d0 a604 	ldrd	sl, r6, [r0, #16]
 8001f4a:	e9d3 8700 	ldrd	r8, r7, [r3]
 8001f4e:	42be      	cmp	r6, r7
	return *this;
 8001f50:	46a3      	mov	fp, r4
 8001f52:	4635      	mov	r5, r6
	_M_node = _Rb_tree_decrement(_M_node);
 8001f54:	4604      	mov	r4, r0
 8001f56:	bf28      	it	cs
 8001f58:	463d      	movcs	r5, r7
	return *this;
 8001f5a:	e7d4      	b.n	8001f06 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x42>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001f5c:	2300      	movs	r3, #0
    }
 8001f5e:	4648      	mov	r0, r9
 8001f60:	e9c9 3400 	strd	r3, r4, [r9]
 8001f64:	b003      	add	sp, #12
 8001f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  if (__j == begin())
 8001f6a:	f8db 300c 	ldr.w	r3, [fp, #12]
      { return &this->_M_impl._M_header; }
 8001f6e:	1d0c      	adds	r4, r1, #4
	  if (__j == begin())
 8001f70:	429c      	cmp	r4, r3
 8001f72:	d1e4      	bne.n	8001f3e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x7a>
 8001f74:	e7f2      	b.n	8001f5c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x98>
 8001f76:	bf00      	nop

08001f78 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f7c:	461f      	mov	r7, r3
 8001f7e:	b089      	sub	sp, #36	@ 0x24
 8001f80:	4606      	mov	r6, r0
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8001f82:	202c      	movs	r0, #44	@ 0x2c
 8001f84:	460d      	mov	r5, r1
 8001f86:	f005 fc8d 	bl	80078a4 <_Znwj>
      _Tuple_impl(_Tuple_impl&&) = default;
#else
      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
      noexcept(is_nothrow_move_constructible<_Head>::value)
      : _Base(static_cast<_Base&&>(__in))
 8001f8a:	683f      	ldr	r7, [r7, #0]
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 8001f8c:	f100 0918 	add.w	r9, r0, #24
      { return _M_dataplus._M_p; }
 8001f90:	46b8      	mov	r8, r7
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8001f92:	f100 0310 	add.w	r3, r0, #16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 8001f96:	f8c0 9010 	str.w	r9, [r0, #16]
 8001f9a:	9303      	str	r3, [sp, #12]
      { return _M_dataplus._M_p; }
 8001f9c:	f858 3b08 	ldr.w	r3, [r8], #8
	if (_M_data() == _M_local_data())
 8001fa0:	4543      	cmp	r3, r8
 8001fa2:	4604      	mov	r4, r0
 8001fa4:	f000 80c7 	beq.w	8002136 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x1be>
      { _M_dataplus._M_p = __p; }
 8001fa8:	6103      	str	r3, [r0, #16]
      { _M_allocated_capacity = __capacity; }
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	6183      	str	r3, [r0, #24]
      { _M_string_length = __length; }
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6163      	str	r3, [r4, #20]
      { return &this->_M_impl._M_header; }
 8001fb2:	f106 0b04 	add.w	fp, r6, #4
 8001fb6:	2300      	movs	r3, #0
      if (__pos._M_node == _M_end())
 8001fb8:	45ab      	cmp	fp, r5
      { _M_dataplus._M_p = __p; }
 8001fba:	f8c7 8000 	str.w	r8, [r7]
      { _M_string_length = __length; }
 8001fbe:	607b      	str	r3, [r7, #4]
	__c1 = __c2;
 8001fc0:	723b      	strb	r3, [r7, #8]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8001fc2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001fc4:	462f      	mov	r7, r5
 8001fc6:	d05f      	beq.n	8002088 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x110>
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8001fc8:	696b      	ldr	r3, [r5, #20]
 8001fca:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8001fce:	692a      	ldr	r2, [r5, #16]
 8001fd0:	9301      	str	r3, [sp, #4]
      compare(const basic_string& __str) const
 8001fd2:	4543      	cmp	r3, r8
 8001fd4:	bf28      	it	cs
 8001fd6:	4643      	movcs	r3, r8
 8001fd8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	9202      	str	r2, [sp, #8]
	if (__n == 0)
 8001fe0:	b32b      	cbz	r3, 800202e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0xb6>
	return __builtin_memcmp(__s1, __s2, __n);
 8001fe2:	9902      	ldr	r1, [sp, #8]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4650      	mov	r0, sl
 8001fe8:	f005 fe26 	bl	8007c38 <memcmp>
	if (!__r)
 8001fec:	2800      	cmp	r0, #0
 8001fee:	d103      	bne.n	8001ff8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x80>
	const difference_type __d = difference_type(__n1 - __n2);
 8001ff0:	9b01      	ldr	r3, [sp, #4]
 8001ff2:	eba8 0303 	sub.w	r3, r8, r3
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	db1e      	blt.n	8002038 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0xc0>
 8001ffa:	9a00      	ldr	r2, [sp, #0]
 8001ffc:	9802      	ldr	r0, [sp, #8]
 8001ffe:	4651      	mov	r1, sl
 8002000:	f005 fe1a 	bl	8007c38 <memcmp>
	if (!__r)
 8002004:	b910      	cbnz	r0, 800200c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x94>
	const difference_type __d = difference_type(__n1 - __n2);
 8002006:	9b01      	ldr	r3, [sp, #4]
 8002008:	eba3 0008 	sub.w	r0, r3, r8
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800200c:	2800      	cmp	r0, #0
 800200e:	db6b      	blt.n	80020e8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x170>
	if (_M_data() == _M_local_data())
 8002010:	45ca      	cmp	sl, r9
 8002012:	d004      	beq.n	800201e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0xa6>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 8002014:	69a1      	ldr	r1, [r4, #24]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8002016:	4650      	mov	r0, sl
 8002018:	3101      	adds	r1, #1
 800201a:	f005 fc41 	bl	80078a0 <_ZdlPvj>
 800201e:	4620      	mov	r0, r4
 8002020:	212c      	movs	r1, #44	@ 0x2c
 8002022:	f005 fc3d 	bl	80078a0 <_ZdlPvj>
      }
 8002026:	4638      	mov	r0, r7
 8002028:	b009      	add	sp, #36	@ 0x24
 800202a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const difference_type __d = difference_type(__n1 - __n2);
 800202e:	9b01      	ldr	r3, [sp, #4]
 8002030:	eba8 0303 	sub.w	r3, r8, r3
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8002034:	2b00      	cmp	r3, #0
 8002036:	dae6      	bge.n	8002006 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x8e>
	  if (__pos._M_node == _M_leftmost()) // begin()
 8002038:	68f3      	ldr	r3, [r6, #12]
 800203a:	42ab      	cmp	r3, r5
 800203c:	d016      	beq.n	800206c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0xf4>
	_M_node = _Rb_tree_decrement(_M_node);
 800203e:	4628      	mov	r0, r5
 8002040:	f005 fc98 	bl	8007974 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8002044:	4603      	mov	r3, r0
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8002046:	e9d0 0504 	ldrd	r0, r5, [r0, #16]
 800204a:	45a8      	cmp	r8, r5
 800204c:	4642      	mov	r2, r8
 800204e:	bf28      	it	cs
 8002050:	462a      	movcs	r2, r5
	if (__n == 0)
 8002052:	b12a      	cbz	r2, 8002060 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0xe8>
	return __builtin_memcmp(__s1, __s2, __n);
 8002054:	4651      	mov	r1, sl
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	f005 fdee 	bl	8007c38 <memcmp>
	if (!__r)
 800205c:	9b00      	ldr	r3, [sp, #0]
 800205e:	b908      	cbnz	r0, 8002064 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0xec>
	const difference_type __d = difference_type(__n1 - __n2);
 8002060:	eba5 0008 	sub.w	r0, r5, r8
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8002064:	2800      	cmp	r0, #0
 8002066:	da58      	bge.n	800211a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x1a2>
	      if (_S_right(__before._M_node) == 0)
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	b31a      	cbz	r2, 80020b4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x13c>
			    || _M_impl._M_key_compare(_S_key(__z),
 800206c:	2001      	movs	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800206e:	465b      	mov	r3, fp
 8002070:	463a      	mov	r2, r7
 8002072:	4621      	mov	r1, r4
 8002074:	f005 fc80 	bl	8007978 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8002078:	6973      	ldr	r3, [r6, #20]
 800207a:	4627      	mov	r7, r4
 800207c:	3301      	adds	r3, #1
      }
 800207e:	4638      	mov	r0, r7
      ++_M_impl._M_node_count;
 8002080:	6173      	str	r3, [r6, #20]
      }
 8002082:	b009      	add	sp, #36	@ 0x24
 8002084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8002088:	6973      	ldr	r3, [r6, #20]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d045      	beq.n	800211a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x1a2>
 800208e:	6933      	ldr	r3, [r6, #16]
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8002090:	6965      	ldr	r5, [r4, #20]
      compare(const basic_string& __str) const
 8002092:	6921      	ldr	r1, [r4, #16]
 8002094:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
 8002098:	42af      	cmp	r7, r5
 800209a:	463a      	mov	r2, r7
 800209c:	bf28      	it	cs
 800209e:	462a      	movcs	r2, r5
	if (__n == 0)
 80020a0:	2a00      	cmp	r2, #0
 80020a2:	d046      	beq.n	8002132 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x1ba>
	return __builtin_memcmp(__s1, __s2, __n);
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	f005 fdc7 	bl	8007c38 <memcmp>
	if (!__r)
 80020aa:	9b00      	ldr	r3, [sp, #0]
 80020ac:	2800      	cmp	r0, #0
 80020ae:	d040      	beq.n	8002132 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x1ba>
 80020b0:	2800      	cmp	r0, #0
 80020b2:	da32      	bge.n	800211a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x1a2>
      bool __insert_left = (__x != 0 || __p == _M_end()
 80020b4:	459b      	cmp	fp, r3
 80020b6:	d04f      	beq.n	8002158 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x1e0>
 80020b8:	e9d4 a804 	ldrd	sl, r8, [r4, #16]
 80020bc:	695a      	ldr	r2, [r3, #20]
 80020be:	6919      	ldr	r1, [r3, #16]
 80020c0:	9201      	str	r2, [sp, #4]
 80020c2:	4542      	cmp	r2, r8
 80020c4:	bf28      	it	cs
 80020c6:	4642      	movcs	r2, r8
 80020c8:	9102      	str	r1, [sp, #8]
 80020ca:	461f      	mov	r7, r3
 80020cc:	9200      	str	r2, [sp, #0]
	if (__n == 0)
 80020ce:	9b00      	ldr	r3, [sp, #0]
 80020d0:	b12b      	cbz	r3, 80020de <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x166>
	return __builtin_memcmp(__s1, __s2, __n);
 80020d2:	9902      	ldr	r1, [sp, #8]
 80020d4:	461a      	mov	r2, r3
 80020d6:	4650      	mov	r0, sl
 80020d8:	f005 fdae 	bl	8007c38 <memcmp>
 80020dc:	b910      	cbnz	r0, 80020e4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x16c>
	const difference_type __d = difference_type(__n1 - __n2);
 80020de:	9b01      	ldr	r3, [sp, #4]
 80020e0:	eba8 0003 	sub.w	r0, r8, r3
			    || _M_impl._M_key_compare(_S_key(__z),
 80020e4:	0fc0      	lsrs	r0, r0, #31
 80020e6:	e7c2      	b.n	800206e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0xf6>
	  if (__pos._M_node == _M_rightmost())
 80020e8:	6933      	ldr	r3, [r6, #16]
 80020ea:	42ab      	cmp	r3, r5
 80020ec:	d0e2      	beq.n	80020b4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x13c>
	_M_node = _Rb_tree_increment(_M_node);
 80020ee:	4628      	mov	r0, r5
 80020f0:	f005 fc3e 	bl	8007970 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 80020f4:	6942      	ldr	r2, [r0, #20]
 80020f6:	9204      	str	r2, [sp, #16]
 80020f8:	4542      	cmp	r2, r8
 80020fa:	bf28      	it	cs
 80020fc:	4642      	movcs	r2, r8
 80020fe:	6901      	ldr	r1, [r0, #16]
 8002100:	4603      	mov	r3, r0
	if (__n == 0)
 8002102:	b12a      	cbz	r2, 8002110 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x198>
	return __builtin_memcmp(__s1, __s2, __n);
 8002104:	9005      	str	r0, [sp, #20]
 8002106:	4650      	mov	r0, sl
 8002108:	f005 fd96 	bl	8007c38 <memcmp>
	if (!__r)
 800210c:	9b05      	ldr	r3, [sp, #20]
 800210e:	b910      	cbnz	r0, 8002116 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x19e>
	const difference_type __d = difference_type(__n1 - __n2);
 8002110:	9a04      	ldr	r2, [sp, #16]
 8002112:	eba8 0002 	sub.w	r0, r8, r2
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8002116:	2800      	cmp	r0, #0
 8002118:	db18      	blt.n	800214c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x1d4>
	    return _M_get_insert_unique_pos(__k);
 800211a:	9a03      	ldr	r2, [sp, #12]
 800211c:	4631      	mov	r1, r6
 800211e:	a806      	add	r0, sp, #24
 8002120:	f7ff fed0 	bl	8001ec4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_>
 8002124:	e9dd 3706 	ldrd	r3, r7, [sp, #24]
	if (__res.second)
 8002128:	b167      	cbz	r7, 8002144 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x1cc>
			    || _M_impl._M_key_compare(_S_key(__z),
 800212a:	2b00      	cmp	r3, #0
 800212c:	d19e      	bne.n	800206c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0xf4>
 800212e:	463b      	mov	r3, r7
 8002130:	e7c0      	b.n	80020b4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x13c>
 8002132:	1b78      	subs	r0, r7, r5
 8002134:	e7bc      	b.n	80020b0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x138>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 8002136:	687a      	ldr	r2, [r7, #4]
	  return __s1;
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 8002138:	4641      	mov	r1, r8
 800213a:	3201      	adds	r2, #1
 800213c:	4648      	mov	r0, r9
 800213e:	f005 fe13 	bl	8007d68 <memcpy>
 8002142:	e734      	b.n	8001fae <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x36>
 8002144:	f8d4 a010 	ldr.w	sl, [r4, #16]
	if (__res.second)
 8002148:	461f      	mov	r7, r3
 800214a:	e761      	b.n	8002010 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x98>
	      if (_S_right(__pos._M_node) == 0)
 800214c:	68ea      	ldr	r2, [r5, #12]
 800214e:	2a00      	cmp	r2, #0
 8002150:	d0bd      	beq.n	80020ce <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x156>
 8002152:	461f      	mov	r7, r3
			    || _M_impl._M_key_compare(_S_key(__z),
 8002154:	2001      	movs	r0, #1
 8002156:	e78a      	b.n	800206e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0xf6>
 8002158:	465f      	mov	r7, fp
 800215a:	e787      	b.n	800206c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0xf4>

0800215c <uart_register_handler>:
{
 800215c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002160:	b08b      	sub	sp, #44	@ 0x2c
	: allocator_type(__a), _M_p(__dat) { }
 8002162:	f10d 0a18 	add.w	sl, sp, #24
 8002166:	f8cd a010 	str.w	sl, [sp, #16]
	if (__s == 0)
 800216a:	2800      	cmp	r0, #0
 800216c:	d06e      	beq.n	800224c <uart_register_handler+0xf0>
 800216e:	4689      	mov	r9, r1
 8002170:	4605      	mov	r5, r0
	return __builtin_strlen(__s);
 8002172:	f7fe f851 	bl	8000218 <strlen>
	if (__dnew > size_type(_S_local_capacity))
 8002176:	280f      	cmp	r0, #15
 8002178:	4604      	mov	r4, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800217a:	9003      	str	r0, [sp, #12]
	if (__dnew > size_type(_S_local_capacity))
 800217c:	d857      	bhi.n	800222e <uart_register_handler+0xd2>
	if (__n == 1)
 800217e:	2801      	cmp	r0, #1
 8002180:	d122      	bne.n	80021c8 <uart_register_handler+0x6c>
	__c1 = __c2;
 8002182:	782b      	ldrb	r3, [r5, #0]
 8002184:	f88d 3018 	strb.w	r3, [sp, #24]
      { return _M_dataplus._M_p; }
 8002188:	4652      	mov	r2, sl
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800218a:	4f32      	ldr	r7, [pc, #200]	@ (8002254 <uart_register_handler+0xf8>)
      { _M_string_length = __length; }
 800218c:	9405      	str	r4, [sp, #20]
 800218e:	2300      	movs	r3, #0
 8002190:	5513      	strb	r3, [r2, r4]
 8002192:	68bc      	ldr	r4, [r7, #8]
      while (__x != 0)
 8002194:	2c00      	cmp	r4, #0
 8002196:	d03c      	beq.n	8002212 <uart_register_handler+0xb6>
 8002198:	e9dd 6b04 	ldrd	r6, fp, [sp, #16]
 800219c:	3704      	adds	r7, #4
 800219e:	46b8      	mov	r8, r7
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 80021a0:	6965      	ldr	r5, [r4, #20]
      compare(const basic_string& __str) const
 80021a2:	455d      	cmp	r5, fp
 80021a4:	462a      	mov	r2, r5
 80021a6:	bf28      	it	cs
 80021a8:	465a      	movcs	r2, fp
	if (__n == 0)
 80021aa:	b122      	cbz	r2, 80021b6 <uart_register_handler+0x5a>
	return __builtin_memcmp(__s1, __s2, __n);
 80021ac:	6920      	ldr	r0, [r4, #16]
 80021ae:	4631      	mov	r1, r6
 80021b0:	f005 fd42 	bl	8007c38 <memcmp>
	if (!__r)
 80021b4:	b908      	cbnz	r0, 80021ba <uart_register_handler+0x5e>
	const difference_type __d = difference_type(__n1 - __n2);
 80021b6:	eba5 000b 	sub.w	r0, r5, fp
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80021ba:	2800      	cmp	r0, #0
 80021bc:	db08      	blt.n	80021d0 <uart_register_handler+0x74>
      { return static_cast<_Link_type>(__x->_M_left); }
 80021be:	68a3      	ldr	r3, [r4, #8]
      while (__x != 0)
 80021c0:	b153      	cbz	r3, 80021d8 <uart_register_handler+0x7c>
 80021c2:	46a0      	mov	r8, r4
      { return _M_dataplus._M_p; }
 80021c4:	461c      	mov	r4, r3
 80021c6:	e7eb      	b.n	80021a0 <uart_register_handler+0x44>
	if (__n == 0)
 80021c8:	2800      	cmp	r0, #0
 80021ca:	d0dd      	beq.n	8002188 <uart_register_handler+0x2c>
 80021cc:	4650      	mov	r0, sl
 80021ce:	e036      	b.n	800223e <uart_register_handler+0xe2>
      { return static_cast<_Link_type>(__x->_M_right); }
 80021d0:	68e3      	ldr	r3, [r4, #12]
      while (__x != 0)
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f6      	bne.n	80021c4 <uart_register_handler+0x68>
 80021d6:	4644      	mov	r4, r8
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
 80021d8:	42bc      	cmp	r4, r7
 80021da:	d01b      	beq.n	8002214 <uart_register_handler+0xb8>
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 80021dc:	6965      	ldr	r5, [r4, #20]
      compare(const basic_string& __str) const
 80021de:	455d      	cmp	r5, fp
 80021e0:	462a      	mov	r2, r5
 80021e2:	bf28      	it	cs
 80021e4:	465a      	movcs	r2, fp
	if (__n == 0)
 80021e6:	b122      	cbz	r2, 80021f2 <uart_register_handler+0x96>
	return __builtin_memcmp(__s1, __s2, __n);
 80021e8:	6921      	ldr	r1, [r4, #16]
 80021ea:	4630      	mov	r0, r6
 80021ec:	f005 fd24 	bl	8007c38 <memcmp>
	if (!__r)
 80021f0:	b908      	cbnz	r0, 80021f6 <uart_register_handler+0x9a>
	const difference_type __d = difference_type(__n1 - __n2);
 80021f2:	ebab 0005 	sub.w	r0, fp, r5
 80021f6:	2800      	cmp	r0, #0
 80021f8:	db0c      	blt.n	8002214 <uart_register_handler+0xb8>
	if (_M_data() == _M_local_data())
 80021fa:	4556      	cmp	r6, sl
  handler_map[cmd] = cb;
 80021fc:	f8c4 9028 	str.w	r9, [r4, #40]	@ 0x28
 8002200:	d004      	beq.n	800220c <uart_register_handler+0xb0>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 8002202:	9906      	ldr	r1, [sp, #24]
 8002204:	4630      	mov	r0, r6
 8002206:	3101      	adds	r1, #1
 8002208:	f005 fb4a 	bl	80078a0 <_ZdlPvj>
}
 800220c:	b00b      	add	sp, #44	@ 0x2c
 800220e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002212:	1d3c      	adds	r4, r7, #4
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8002214:	ab02      	add	r3, sp, #8
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8002216:	aa04      	add	r2, sp, #16
 8002218:	4621      	mov	r1, r4
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	9203      	str	r2, [sp, #12]
 800221e:	480d      	ldr	r0, [pc, #52]	@ (8002254 <uart_register_handler+0xf8>)
 8002220:	4a0d      	ldr	r2, [pc, #52]	@ (8002258 <uart_register_handler+0xfc>)
 8002222:	ab03      	add	r3, sp, #12
 8002224:	f7ff fea8 	bl	8001f78 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_>
      { return _M_dataplus._M_p; }
 8002228:	9e04      	ldr	r6, [sp, #16]
 800222a:	4604      	mov	r4, r0
 800222c:	e7e5      	b.n	80021fa <uart_register_handler+0x9e>
	    _M_data(_M_create(__dnew, size_type(0)));
 800222e:	2200      	movs	r2, #0
 8002230:	a903      	add	r1, sp, #12
 8002232:	a804      	add	r0, sp, #16
 8002234:	f005 fc0e 	bl	8007a54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
 8002238:	9b03      	ldr	r3, [sp, #12]
      { _M_dataplus._M_p = __p; }
 800223a:	9004      	str	r0, [sp, #16]
      { _M_allocated_capacity = __capacity; }
 800223c:	9306      	str	r3, [sp, #24]
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 800223e:	4622      	mov	r2, r4
 8002240:	4629      	mov	r1, r5
 8002242:	f005 fd91 	bl	8007d68 <memcpy>
      { return _M_dataplus._M_p; }
 8002246:	e9dd 4203 	ldrd	r4, r2, [sp, #12]
 800224a:	e79e      	b.n	800218a <uart_register_handler+0x2e>
	  std::__throw_logic_error(__N("basic_string: "
 800224c:	4803      	ldr	r0, [pc, #12]	@ (800225c <uart_register_handler+0x100>)
 800224e:	f005 fbfa 	bl	8007a46 <_ZSt19__throw_logic_errorPKc>
 8002252:	bf00      	nop
 8002254:	20000cb8 	.word	0x20000cb8
 8002258:	08007e94 	.word	0x08007e94
 800225c:	08007e58 	.word	0x08007e58

08002260 <uart_init>:
{
 8002260:	b508      	push	{r3, lr}
  uart_register_handler("RDR", reg_read_handler);
 8002262:	490b      	ldr	r1, [pc, #44]	@ (8002290 <uart_init+0x30>)
 8002264:	480b      	ldr	r0, [pc, #44]	@ (8002294 <uart_init+0x34>)
 8002266:	f7ff ff79 	bl	800215c <uart_register_handler>
  uart_register_handler("WRR", reg_write_handler);
 800226a:	490b      	ldr	r1, [pc, #44]	@ (8002298 <uart_init+0x38>)
 800226c:	480b      	ldr	r0, [pc, #44]	@ (800229c <uart_init+0x3c>)
 800226e:	f7ff ff75 	bl	800215c <uart_register_handler>
  HAL_UARTEx_ReceiveToIdle_DMA(huart_reg, rx_buf, sizeof(rx_buf)/sizeof(*rx_buf));
 8002272:	4b0b      	ldr	r3, [pc, #44]	@ (80022a0 <uart_init+0x40>)
 8002274:	490b      	ldr	r1, [pc, #44]	@ (80022a4 <uart_init+0x44>)
 8002276:	6818      	ldr	r0, [r3, #0]
 8002278:	f44f 7202 	mov.w	r2, #520	@ 0x208
 800227c:	f005 faec 	bl	8007858 <HAL_UARTEx_ReceiveToIdle_DMA>
  hdma_rx->Instance->CCR &= ~DMA_CCR_HTIE;
 8002280:	4b09      	ldr	r3, [pc, #36]	@ (80022a8 <uart_init+0x48>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	6813      	ldr	r3, [r2, #0]
 8002288:	f023 0304 	bic.w	r3, r3, #4
 800228c:	6013      	str	r3, [r2, #0]
}
 800228e:	bd08      	pop	{r3, pc}
 8002290:	08001a35 	.word	0x08001a35
 8002294:	08007e8c 	.word	0x08007e8c
 8002298:	08001a15 	.word	0x08001a15
 800229c:	08007e90 	.word	0x08007e90
 80022a0:	20000010 	.word	0x20000010
 80022a4:	20000cd0 	.word	0x20000cd0
 80022a8:	2000000c 	.word	0x2000000c

080022ac <_GLOBAL__sub_I_huart_reg>:
      _M_header._M_color = _S_red;
 80022ac:	4b04      	ldr	r3, [pc, #16]	@ (80022c0 <_GLOBAL__sub_I_huart_reg+0x14>)
 80022ae:	2200      	movs	r2, #0
      _M_header._M_left = &_M_header;
 80022b0:	1d19      	adds	r1, r3, #4
 80022b2:	e9c3 2102 	strd	r2, r1, [r3, #8]
      _M_node_count = 0;
 80022b6:	e9c3 1204 	strd	r1, r2, [r3, #16]
      _M_header._M_color = _S_red;
 80022ba:	711a      	strb	r2, [r3, #4]
}
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	20000cb8 	.word	0x20000cb8

080022c4 <_GLOBAL__sub_D_huart_reg>:
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 80022c4:	4b01      	ldr	r3, [pc, #4]	@ (80022cc <_GLOBAL__sub_D_huart_reg+0x8>)
      { _M_erase(_M_begin()); }
 80022c6:	6898      	ldr	r0, [r3, #8]
 80022c8:	f7ff bbe2 	b.w	8001a90 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0>
 80022cc:	20000cb8 	.word	0x20000cb8

080022d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022d0:	480d      	ldr	r0, [pc, #52]	@ (8002308 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022d2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022d4:	f7ff fb94 	bl	8001a00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022d8:	480c      	ldr	r0, [pc, #48]	@ (800230c <LoopForever+0x6>)
  ldr r1, =_edata
 80022da:	490d      	ldr	r1, [pc, #52]	@ (8002310 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002314 <LoopForever+0xe>)
  movs r3, #0
 80022de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80022e0:	e002      	b.n	80022e8 <LoopCopyDataInit>

080022e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022e6:	3304      	adds	r3, #4

080022e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022ec:	d3f9      	bcc.n	80022e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002318 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022f0:	4c0a      	ldr	r4, [pc, #40]	@ (800231c <LoopForever+0x16>)
  movs r3, #0
 80022f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f4:	e001      	b.n	80022fa <LoopFillZerobss>

080022f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f8:	3204      	adds	r2, #4

080022fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022fc:	d3fb      	bcc.n	80022f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022fe:	f005 fd0d 	bl	8007d1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002302:	f7fe fd0f 	bl	8000d24 <main>

08002306 <LoopForever>:

LoopForever:
    b LoopForever
 8002306:	e7fe      	b.n	8002306 <LoopForever>
  ldr   r0, =_estack
 8002308:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800230c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002310:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002314:	08007ef0 	.word	0x08007ef0
  ldr r2, =_sbss
 8002318:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800231c:	20001028 	.word	0x20001028

08002320 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002320:	e7fe      	b.n	8002320 <ADC1_2_IRQHandler>
	...

08002324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002324:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8002326:	4b0f      	ldr	r3, [pc, #60]	@ (8002364 <HAL_InitTick+0x40>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	b90b      	cbnz	r3, 8002330 <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 800232c:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 800232e:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002330:	490d      	ldr	r1, [pc, #52]	@ (8002368 <HAL_InitTick+0x44>)
 8002332:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002336:	4605      	mov	r5, r0
 8002338:	fbb2 f3f3 	udiv	r3, r2, r3
 800233c:	6808      	ldr	r0, [r1, #0]
 800233e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002342:	f001 f911 	bl	8003568 <HAL_SYSTICK_Config>
 8002346:	4604      	mov	r4, r0
 8002348:	2800      	cmp	r0, #0
 800234a:	d1ef      	bne.n	800232c <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800234c:	2d0f      	cmp	r5, #15
 800234e:	d8ed      	bhi.n	800232c <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002350:	4602      	mov	r2, r0
 8002352:	4629      	mov	r1, r5
 8002354:	f04f 30ff 	mov.w	r0, #4294967295
 8002358:	f001 f8bc 	bl	80034d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800235c:	4b03      	ldr	r3, [pc, #12]	@ (800236c <HAL_InitTick+0x48>)
 800235e:	4620      	mov	r0, r4
 8002360:	601d      	str	r5, [r3, #0]
}
 8002362:	bd38      	pop	{r3, r4, r5, pc}
 8002364:	20000014 	.word	0x20000014
 8002368:	20000008 	.word	0x20000008
 800236c:	20000018 	.word	0x20000018

08002370 <HAL_Init>:
{
 8002370:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002372:	2003      	movs	r0, #3
 8002374:	f001 f89c 	bl	80034b0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002378:	200f      	movs	r0, #15
 800237a:	f7ff ffd3 	bl	8002324 <HAL_InitTick>
 800237e:	b110      	cbz	r0, 8002386 <HAL_Init+0x16>
    status = HAL_ERROR;
 8002380:	2401      	movs	r4, #1
}
 8002382:	4620      	mov	r0, r4
 8002384:	bd10      	pop	{r4, pc}
 8002386:	4604      	mov	r4, r0
    HAL_MspInit();
 8002388:	f7ff f896 	bl	80014b8 <HAL_MspInit>
}
 800238c:	4620      	mov	r0, r4
 800238e:	bd10      	pop	{r4, pc}

08002390 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002390:	4a03      	ldr	r2, [pc, #12]	@ (80023a0 <HAL_IncTick+0x10>)
 8002392:	4904      	ldr	r1, [pc, #16]	@ (80023a4 <HAL_IncTick+0x14>)
 8002394:	6813      	ldr	r3, [r2, #0]
 8002396:	6809      	ldr	r1, [r1, #0]
 8002398:	440b      	add	r3, r1
 800239a:	6013      	str	r3, [r2, #0]
}
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000ed8 	.word	0x20000ed8
 80023a4:	20000014 	.word	0x20000014

080023a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80023a8:	4b01      	ldr	r3, [pc, #4]	@ (80023b0 <HAL_GetTick+0x8>)
 80023aa:	6818      	ldr	r0, [r3, #0]
}
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	20000ed8 	.word	0x20000ed8

080023b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023b4:	b530      	push	{r4, r5, lr}
 80023b6:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80023bc:	2800      	cmp	r0, #0
 80023be:	d05c      	beq.n	800247a <HAL_ADC_Init+0xc6>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023c0:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 80023c2:	4604      	mov	r4, r0
 80023c4:	2d00      	cmp	r5, #0
 80023c6:	f000 80cc 	beq.w	8002562 <HAL_ADC_Init+0x1ae>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80023ca:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80023cc:	6893      	ldr	r3, [r2, #8]
 80023ce:	009d      	lsls	r5, r3, #2
 80023d0:	d505      	bpl.n	80023de <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80023d2:	6893      	ldr	r3, [r2, #8]
 80023d4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80023d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023dc:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023de:	6893      	ldr	r3, [r2, #8]
 80023e0:	00d8      	lsls	r0, r3, #3
 80023e2:	d419      	bmi.n	8002418 <HAL_ADC_Init+0x64>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023e4:	4b78      	ldr	r3, [pc, #480]	@ (80025c8 <HAL_ADC_Init+0x214>)
 80023e6:	4879      	ldr	r0, [pc, #484]	@ (80025cc <HAL_ADC_Init+0x218>)
 80023e8:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80023ea:	6891      	ldr	r1, [r2, #8]
 80023ec:	099b      	lsrs	r3, r3, #6
 80023ee:	fba0 0303 	umull	r0, r3, r0, r3
 80023f2:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 80023f6:	099b      	lsrs	r3, r3, #6
 80023f8:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80023fc:	3301      	adds	r3, #1
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8002404:	6091      	str	r1, [r2, #8]
 8002406:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002408:	9b01      	ldr	r3, [sp, #4]
 800240a:	b12b      	cbz	r3, 8002418 <HAL_ADC_Init+0x64>
    {
      wait_loop_index--;
 800240c:	9b01      	ldr	r3, [sp, #4]
 800240e:	3b01      	subs	r3, #1
 8002410:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002412:	9b01      	ldr	r3, [sp, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f9      	bne.n	800240c <HAL_ADC_Init+0x58>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002418:	6893      	ldr	r3, [r2, #8]
 800241a:	00d9      	lsls	r1, r3, #3
 800241c:	d430      	bmi.n	8002480 <HAL_ADC_Init+0xcc>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800241e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002420:	f043 0310 	orr.w	r3, r3, #16
 8002424:	65e3      	str	r3, [r4, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002426:	6e23      	ldr	r3, [r4, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002428:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800242a:	4303      	orrs	r3, r0
 800242c:	6623      	str	r3, [r4, #96]	@ 0x60
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800242e:	6893      	ldr	r3, [r2, #8]
 8002430:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002434:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002436:	d11c      	bne.n	8002472 <HAL_ADC_Init+0xbe>
 8002438:	06db      	lsls	r3, r3, #27
 800243a:	d41a      	bmi.n	8002472 <HAL_ADC_Init+0xbe>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800243c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800243e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002442:	f043 0302 	orr.w	r3, r3, #2
 8002446:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002448:	6893      	ldr	r3, [r2, #8]
 800244a:	07dd      	lsls	r5, r3, #31
 800244c:	d432      	bmi.n	80024b4 <HAL_ADC_Init+0x100>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800244e:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8002452:	d017      	beq.n	8002484 <HAL_ADC_Init+0xd0>
 8002454:	4b5e      	ldr	r3, [pc, #376]	@ (80025d0 <HAL_ADC_Init+0x21c>)
 8002456:	429a      	cmp	r2, r3
 8002458:	d014      	beq.n	8002484 <HAL_ADC_Init+0xd0>
 800245a:	495e      	ldr	r1, [pc, #376]	@ (80025d4 <HAL_ADC_Init+0x220>)
 800245c:	4b5e      	ldr	r3, [pc, #376]	@ (80025d8 <HAL_ADC_Init+0x224>)
 800245e:	6889      	ldr	r1, [r1, #8]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	430b      	orrs	r3, r1
 8002464:	495d      	ldr	r1, [pc, #372]	@ (80025dc <HAL_ADC_Init+0x228>)
 8002466:	6889      	ldr	r1, [r1, #8]
 8002468:	430b      	orrs	r3, r1
 800246a:	07d9      	lsls	r1, r3, #31
 800246c:	d422      	bmi.n	80024b4 <HAL_ADC_Init+0x100>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800246e:	495c      	ldr	r1, [pc, #368]	@ (80025e0 <HAL_ADC_Init+0x22c>)
 8002470:	e01a      	b.n	80024a8 <HAL_ADC_Init+0xf4>
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002472:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002474:	f043 0310 	orr.w	r3, r3, #16
 8002478:	65e3      	str	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 800247a:	2001      	movs	r0, #1
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 800247c:	b003      	add	sp, #12
 800247e:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002480:	2000      	movs	r0, #0
 8002482:	e7d4      	b.n	800242e <HAL_ADC_Init+0x7a>
 8002484:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 8002488:	4b51      	ldr	r3, [pc, #324]	@ (80025d0 <HAL_ADC_Init+0x21c>)
 800248a:	688d      	ldr	r5, [r1, #8]
 800248c:	6899      	ldr	r1, [r3, #8]
 800248e:	07c9      	lsls	r1, r1, #31
 8002490:	d410      	bmi.n	80024b4 <HAL_ADC_Init+0x100>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002492:	07ed      	lsls	r5, r5, #31
 8002494:	d40e      	bmi.n	80024b4 <HAL_ADC_Init+0x100>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002496:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 800249a:	f000 8092 	beq.w	80025c2 <HAL_ADC_Init+0x20e>
 800249e:	4950      	ldr	r1, [pc, #320]	@ (80025e0 <HAL_ADC_Init+0x22c>)
 80024a0:	4d50      	ldr	r5, [pc, #320]	@ (80025e4 <HAL_ADC_Init+0x230>)
 80024a2:	429a      	cmp	r2, r3
 80024a4:	bf08      	it	eq
 80024a6:	4629      	moveq	r1, r5
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024a8:	688b      	ldr	r3, [r1, #8]
 80024aa:	6865      	ldr	r5, [r4, #4]
 80024ac:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 80024b0:	432b      	orrs	r3, r5
 80024b2:	608b      	str	r3, [r1, #8]
                 hadc->Init.DataAlign                                                   |
 80024b4:	68e5      	ldr	r5, [r4, #12]
 80024b6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024b8:	f894 1024 	ldrb.w	r1, [r4, #36]	@ 0x24
                 hadc->Init.DataAlign                                                   |
 80024bc:	432b      	orrs	r3, r5
 80024be:	68a5      	ldr	r5, [r4, #8]
 80024c0:	432b      	orrs	r3, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024c2:	7f65      	ldrb	r5, [r4, #29]
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024c4:	2901      	cmp	r1, #1
                 hadc->Init.DataAlign                                                   |
 80024c6:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024ce:	d04e      	beq.n	800256e <HAL_ADC_Init+0x1ba>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024d0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80024d2:	b121      	cbz	r1, 80024de <HAL_ADC_Init+0x12a>
                   | hadc->Init.ExternalTrigConvEdge
 80024d4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024d6:	f401 7178 	and.w	r1, r1, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80024da:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024dc:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80024de:	68d5      	ldr	r5, [r2, #12]
 80024e0:	4941      	ldr	r1, [pc, #260]	@ (80025e8 <HAL_ADC_Init+0x234>)
 80024e2:	4029      	ands	r1, r5
 80024e4:	4319      	orrs	r1, r3
 80024e6:	60d1      	str	r1, [r2, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80024e8:	6913      	ldr	r3, [r2, #16]
 80024ea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80024ec:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80024f0:	430b      	orrs	r3, r1
 80024f2:	6113      	str	r3, [r2, #16]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024f4:	6893      	ldr	r3, [r2, #8]
 80024f6:	071b      	lsls	r3, r3, #28
 80024f8:	d424      	bmi.n	8002544 <HAL_ADC_Init+0x190>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80024fa:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024fc:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002500:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002502:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002506:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002508:	f021 0102 	bic.w	r1, r1, #2
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800250c:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002510:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 8002512:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002514:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002516:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8002518:	2900      	cmp	r1, #0
 800251a:	d035      	beq.n	8002588 <HAL_ADC_Init+0x1d4>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800251c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002520:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002522:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8002526:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800252a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800252e:	430b      	orrs	r3, r1
 8002530:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8002534:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8002538:	2b01      	cmp	r3, #1
 800253a:	d031      	beq.n	80025a0 <HAL_ADC_Init+0x1ec>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800253c:	6913      	ldr	r3, [r2, #16]
 800253e:	f023 0301 	bic.w	r3, r3, #1
 8002542:	6113      	str	r3, [r2, #16]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002544:	6963      	ldr	r3, [r4, #20]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d016      	beq.n	8002578 <HAL_ADC_Init+0x1c4>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800254a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800254c:	f023 030f 	bic.w	r3, r3, #15
 8002550:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002552:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002554:	f023 0303 	bic.w	r3, r3, #3
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
 800255e:	b003      	add	sp, #12
 8002560:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8002562:	f7fe ffc3 	bl	80014ec <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002566:	6625      	str	r5, [r4, #96]	@ 0x60
    hadc->Lock = HAL_UNLOCKED;
 8002568:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
 800256c:	e72d      	b.n	80023ca <HAL_ADC_Init+0x16>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800256e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002570:	3901      	subs	r1, #1
 8002572:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8002576:	e7ab      	b.n	80024d0 <HAL_ADC_Init+0x11c>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002578:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800257a:	6a23      	ldr	r3, [r4, #32]
 800257c:	f021 010f 	bic.w	r1, r1, #15
 8002580:	3b01      	subs	r3, #1
 8002582:	430b      	orrs	r3, r1
 8002584:	6313      	str	r3, [r2, #48]	@ 0x30
 8002586:	e7e4      	b.n	8002552 <HAL_ADC_Init+0x19e>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002588:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800258c:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800258e:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8002592:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002596:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800259a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800259e:	e7c9      	b.n	8002534 <HAL_ADC_Init+0x180>
        MODIFY_REG(hadc->Instance->CFGR2,
 80025a0:	6911      	ldr	r1, [r2, #16]
 80025a2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80025a4:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 80025a6:	f421 61ff 	bic.w	r1, r1, #2040	@ 0x7f8
 80025aa:	f021 0104 	bic.w	r1, r1, #4
 80025ae:	432b      	orrs	r3, r5
 80025b0:	430b      	orrs	r3, r1
 80025b2:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80025b4:	430b      	orrs	r3, r1
 80025b6:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80025b8:	430b      	orrs	r3, r1
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	6113      	str	r3, [r2, #16]
 80025c0:	e7c0      	b.n	8002544 <HAL_ADC_Init+0x190>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80025c2:	4908      	ldr	r1, [pc, #32]	@ (80025e4 <HAL_ADC_Init+0x230>)
 80025c4:	e770      	b.n	80024a8 <HAL_ADC_Init+0xf4>
 80025c6:	bf00      	nop
 80025c8:	20000008 	.word	0x20000008
 80025cc:	053e2d63 	.word	0x053e2d63
 80025d0:	50000100 	.word	0x50000100
 80025d4:	50000400 	.word	0x50000400
 80025d8:	50000500 	.word	0x50000500
 80025dc:	50000600 	.word	0x50000600
 80025e0:	50000700 	.word	0x50000700
 80025e4:	50000300 	.word	0x50000300
 80025e8:	fff04007 	.word	0xfff04007

080025ec <HAL_ADC_ConvHalfCpltCallback>:
/**
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop

080025f0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80025f0:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80025f2:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80025f4:	f7ff fffa 	bl	80025ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025f8:	bd08      	pop	{r3, pc}
 80025fa:	bf00      	nop

080025fc <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop

08002600 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002600:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002602:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002604:	f012 0f50 	tst.w	r2, #80	@ 0x50
{
 8002608:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800260a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800260c:	d11d      	bne.n	800264a <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800260e:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002610:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002614:	65da      	str	r2, [r3, #92]	@ 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002616:	680a      	ldr	r2, [r1, #0]
 8002618:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800261c:	68ca      	ldr	r2, [r1, #12]
 800261e:	d01b      	beq.n	8002658 <ADC_DMAConvCplt+0x58>
 8002620:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8002624:	d10d      	bne.n	8002642 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002626:	68ca      	ldr	r2, [r1, #12]
 8002628:	0494      	lsls	r4, r2, #18
 800262a:	d40a      	bmi.n	8002642 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800262c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800262e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002632:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002634:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002636:	04d1      	lsls	r1, r2, #19
 8002638:	d403      	bmi.n	8002642 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800263a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800263c:	f042 0201 	orr.w	r2, r2, #1
 8002640:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8002642:	4618      	mov	r0, r3
 8002644:	f7fe fb0a 	bl	8000c5c <HAL_ADC_ConvCpltCallback>
}
 8002648:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800264a:	06d2      	lsls	r2, r2, #27
 800264c:	d40a      	bmi.n	8002664 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800264e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002656:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002658:	0790      	lsls	r0, r2, #30
 800265a:	d5e7      	bpl.n	800262c <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 800265c:	4618      	mov	r0, r3
 800265e:	f7fe fafd 	bl	8000c5c <HAL_ADC_ConvCpltCallback>
 8002662:	e7f1      	b.n	8002648 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff ffc9 	bl	80025fc <HAL_ADC_ErrorCallback>
}
 800266a:	bd10      	pop	{r4, pc}

0800266c <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800266c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 800266e:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002670:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8002672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002676:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002678:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800267a:	f043 0304 	orr.w	r3, r3, #4
 800267e:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002680:	f7ff ffbc 	bl	80025fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002684:	bd08      	pop	{r3, pc}
 8002686:	bf00      	nop

08002688 <HAL_ADC_ConfigChannel>:
{
 8002688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 800268c:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
{
 8002690:	b082      	sub	sp, #8
 8002692:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8002694:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8002696:	f04f 0000 	mov.w	r0, #0
 800269a:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 800269c:	f000 811e 	beq.w	80028dc <HAL_ADC_ConfigChannel+0x254>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026a0:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 80026a2:	2001      	movs	r0, #1
 80026a4:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026a8:	6894      	ldr	r4, [r2, #8]
 80026aa:	0764      	lsls	r4, r4, #29
 80026ac:	d467      	bmi.n	800277e <HAL_ADC_ConfigChannel+0xf6>
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80026ae:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80026b0:	ea4f 1e90 	mov.w	lr, r0, lsr #6
  MODIFY_REG(*preg,
 80026b4:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80026b8:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 80026bc:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80026be:	f102 0430 	add.w	r4, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 80026c2:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80026c6:	f854 500e 	ldr.w	r5, [r4, lr]
 80026ca:	261f      	movs	r6, #31
 80026cc:	fa00 f00c 	lsl.w	r0, r0, ip
 80026d0:	fa06 fc0c 	lsl.w	ip, r6, ip
 80026d4:	ea25 0c0c 	bic.w	ip, r5, ip
 80026d8:	ea40 000c 	orr.w	r0, r0, ip
 80026dc:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026e0:	6890      	ldr	r0, [r2, #8]
 80026e2:	0747      	lsls	r7, r0, #29
 80026e4:	d555      	bpl.n	8002792 <HAL_ADC_ConfigChannel+0x10a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80026e6:	6890      	ldr	r0, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80026e8:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026ea:	6894      	ldr	r4, [r2, #8]
 80026ec:	07e5      	lsls	r5, r4, #31
 80026ee:	d412      	bmi.n	8002716 <HAL_ADC_ConfigChannel+0x8e>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80026f0:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80026f2:	4cba      	ldr	r4, [pc, #744]	@ (80029dc <HAL_ADC_ConfigChannel+0x354>)
 80026f4:	f8d2 50b0 	ldr.w	r5, [r2, #176]	@ 0xb0
 80026f8:	f006 0718 	and.w	r7, r6, #24
 80026fc:	40fc      	lsrs	r4, r7
 80026fe:	f3c0 0712 	ubfx	r7, r0, #0, #19
 8002702:	4004      	ands	r4, r0
 8002704:	ea25 0507 	bic.w	r5, r5, r7
 8002708:	432c      	orrs	r4, r5
 800270a:	f8c2 40b0 	str.w	r4, [r2, #176]	@ 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800270e:	4cb4      	ldr	r4, [pc, #720]	@ (80029e0 <HAL_ADC_ConfigChannel+0x358>)
 8002710:	42a6      	cmp	r6, r4
 8002712:	f000 8090 	beq.w	8002836 <HAL_ADC_ConfigChannel+0x1ae>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002716:	49b3      	ldr	r1, [pc, #716]	@ (80029e4 <HAL_ADC_ConfigChannel+0x35c>)
 8002718:	4208      	tst	r0, r1
 800271a:	d02e      	beq.n	800277a <HAL_ADC_ConfigChannel+0xf2>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800271c:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8002720:	f000 80da 	beq.w	80028d8 <HAL_ADC_ConfigChannel+0x250>
 8002724:	4db0      	ldr	r5, [pc, #704]	@ (80029e8 <HAL_ADC_ConfigChannel+0x360>)
 8002726:	49b1      	ldr	r1, [pc, #708]	@ (80029ec <HAL_ADC_ConfigChannel+0x364>)
 8002728:	4cb1      	ldr	r4, [pc, #708]	@ (80029f0 <HAL_ADC_ConfigChannel+0x368>)
 800272a:	42aa      	cmp	r2, r5
 800272c:	bf08      	it	eq
 800272e:	4621      	moveq	r1, r4
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002730:	4cb0      	ldr	r4, [pc, #704]	@ (80029f4 <HAL_ADC_ConfigChannel+0x36c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002732:	6889      	ldr	r1, [r1, #8]
 8002734:	42a0      	cmp	r0, r4
 8002736:	f001 75e0 	and.w	r5, r1, #29360128	@ 0x1c00000
 800273a:	f000 80d3 	beq.w	80028e4 <HAL_ADC_ConfigChannel+0x25c>
 800273e:	4cae      	ldr	r4, [pc, #696]	@ (80029f8 <HAL_ADC_ConfigChannel+0x370>)
 8002740:	42a0      	cmp	r0, r4
 8002742:	f000 80cf 	beq.w	80028e4 <HAL_ADC_ConfigChannel+0x25c>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002746:	4cad      	ldr	r4, [pc, #692]	@ (80029fc <HAL_ADC_ConfigChannel+0x374>)
 8002748:	42a0      	cmp	r0, r4
 800274a:	f000 80f4 	beq.w	8002936 <HAL_ADC_ConfigChannel+0x2ae>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800274e:	4cac      	ldr	r4, [pc, #688]	@ (8002a00 <HAL_ADC_ConfigChannel+0x378>)
 8002750:	42a0      	cmp	r0, r4
 8002752:	d112      	bne.n	800277a <HAL_ADC_ConfigChannel+0xf2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002754:	0249      	lsls	r1, r1, #9
 8002756:	d410      	bmi.n	800277a <HAL_ADC_ConfigChannel+0xf2>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002758:	49a3      	ldr	r1, [pc, #652]	@ (80029e8 <HAL_ADC_ConfigChannel+0x360>)
 800275a:	428a      	cmp	r2, r1
 800275c:	d00d      	beq.n	800277a <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800275e:	48a4      	ldr	r0, [pc, #656]	@ (80029f0 <HAL_ADC_ConfigChannel+0x368>)
 8002760:	f501 61c0 	add.w	r1, r1, #1536	@ 0x600
 8002764:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8002768:	bf08      	it	eq
 800276a:	4601      	moveq	r1, r0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800276c:	688a      	ldr	r2, [r1, #8]
 800276e:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8002772:	432a      	orrs	r2, r5
 8002774:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002778:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800277a:	2000      	movs	r0, #0
 800277c:	e003      	b.n	8002786 <HAL_ADC_ConfigChannel+0xfe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800277e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002780:	f042 0220 	orr.w	r2, r2, #32
 8002784:	65da      	str	r2, [r3, #92]	@ 0x5c
  __HAL_UNLOCK(hadc);
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 800278c:	b002      	add	sp, #8
 800278e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002792:	6894      	ldr	r4, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002794:	6808      	ldr	r0, [r1, #0]
 8002796:	0726      	lsls	r6, r4, #28
 8002798:	d4a7      	bmi.n	80026ea <HAL_ADC_ConfigChannel+0x62>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800279a:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(*preg,
 800279c:	f3c0 5604 	ubfx	r6, r0, #20, #5
 80027a0:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80027a2:	0dc0      	lsrs	r0, r0, #23
  MODIFY_REG(*preg,
 80027a4:	40b4      	lsls	r4, r6
 80027a6:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80027aa:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 80027ae:	ea6f 0404 	mvn.w	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80027b2:	f102 0714 	add.w	r7, r2, #20
 80027b6:	f000 812d 	beq.w	8002a14 <HAL_ADC_ConfigChannel+0x38c>
  MODIFY_REG(*preg,
 80027ba:	40b5      	lsls	r5, r6
 80027bc:	583e      	ldr	r6, [r7, r0]
 80027be:	4034      	ands	r4, r6
 80027c0:	432c      	orrs	r4, r5
 80027c2:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80027c4:	6950      	ldr	r0, [r2, #20]
 80027c6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80027ca:	6150      	str	r0, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80027cc:	e9d1 7504 	ldrd	r7, r5, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80027d0:	6808      	ldr	r0, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80027d2:	68d6      	ldr	r6, [r2, #12]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027d4:	2f04      	cmp	r7, #4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027d6:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80027da:	4684      	mov	ip, r0
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027dc:	f000 80d6 	beq.w	800298c <HAL_ADC_ConfigChannel+0x304>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80027e0:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 80027e4:	0076      	lsls	r6, r6, #1
  MODIFY_REG(*preg,
 80027e6:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 80027ea:	40b5      	lsls	r5, r6
 80027ec:	4e85      	ldr	r6, [pc, #532]	@ (8002a04 <HAL_ADC_ConfigChannel+0x37c>)
 80027ee:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 80027f2:	ea0c 0606 	and.w	r6, ip, r6
 80027f6:	4306      	orrs	r6, r0
 80027f8:	4335      	orrs	r5, r6
 80027fa:	f045 4500 	orr.w	r5, r5, #2147483648	@ 0x80000000
 80027fe:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002802:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 8002804:	698e      	ldr	r6, [r1, #24]
 8002806:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 800280a:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 800280e:	4330      	orrs	r0, r6
 8002810:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002814:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002816:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 8002818:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 800281c:	f1a5 0501 	sub.w	r5, r5, #1
 8002820:	fab5 f585 	clz	r5, r5
 8002824:	096d      	lsrs	r5, r5, #5
 8002826:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 800282a:	ea40 6045 	orr.w	r0, r0, r5, lsl #25
 800282e:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002832:	6808      	ldr	r0, [r1, #0]
}
 8002834:	e759      	b.n	80026ea <HAL_ADC_ConfigChannel+0x62>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002836:	2f00      	cmp	r7, #0
 8002838:	f000 8092 	beq.w	8002960 <HAL_ADC_ConfigChannel+0x2d8>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283c:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002840:	2c00      	cmp	r4, #0
 8002842:	f000 80ef 	beq.w	8002a24 <HAL_ADC_ConfigChannel+0x39c>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8002846:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800284a:	3401      	adds	r4, #1
 800284c:	f004 041f 	and.w	r4, r4, #31
 8002850:	2c09      	cmp	r4, #9
 8002852:	f240 80e7 	bls.w	8002a24 <HAL_ADC_ConfigChannel+0x39c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 800285a:	2c00      	cmp	r4, #0
 800285c:	f000 8186 	beq.w	8002b6c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002860:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002864:	3401      	adds	r4, #1
 8002866:	06a4      	lsls	r4, r4, #26
 8002868:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286c:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8002870:	2d00      	cmp	r5, #0
 8002872:	f000 8180 	beq.w	8002b76 <HAL_ADC_ConfigChannel+0x4ee>
  return __builtin_clz(value);
 8002876:	fab5 f585 	clz	r5, r5
 800287a:	3501      	adds	r5, #1
 800287c:	f005 051f 	and.w	r5, r5, #31
 8002880:	2601      	movs	r6, #1
 8002882:	fa06 f505 	lsl.w	r5, r6, r5
 8002886:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002888:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 800288c:	2800      	cmp	r0, #0
 800288e:	f000 8170 	beq.w	8002b72 <HAL_ADC_ConfigChannel+0x4ea>
  return __builtin_clz(value);
 8002892:	fab0 f080 	clz	r0, r0
 8002896:	1c45      	adds	r5, r0, #1
 8002898:	f005 051f 	and.w	r5, r5, #31
 800289c:	2003      	movs	r0, #3
 800289e:	f06f 061d 	mvn.w	r6, #29
 80028a2:	fb10 6005 	smlabb	r0, r0, r5, r6
 80028a6:	0500      	lsls	r0, r0, #20
 80028a8:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028ac:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80028ae:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 80028b0:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80028b2:	f005 0504 	and.w	r5, r5, #4
 80028b6:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 80028ba:	f3c0 5004 	ubfx	r0, r0, #20, #5
 80028be:	fa04 f700 	lsl.w	r7, r4, r0
 80028c2:	f04f 0c07 	mov.w	ip, #7
 80028c6:	5974      	ldr	r4, [r6, r5]
 80028c8:	fa0c f000 	lsl.w	r0, ip, r0
 80028cc:	ea24 0000 	bic.w	r0, r4, r0
 80028d0:	4338      	orrs	r0, r7
 80028d2:	5170      	str	r0, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80028d4:	6808      	ldr	r0, [r1, #0]
}
 80028d6:	e71e      	b.n	8002716 <HAL_ADC_ConfigChannel+0x8e>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028d8:	4945      	ldr	r1, [pc, #276]	@ (80029f0 <HAL_ADC_ConfigChannel+0x368>)
 80028da:	e729      	b.n	8002730 <HAL_ADC_ConfigChannel+0xa8>
  __HAL_LOCK(hadc);
 80028dc:	2002      	movs	r0, #2
}
 80028de:	b002      	add	sp, #8
 80028e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028e4:	020c      	lsls	r4, r1, #8
 80028e6:	f53f af48 	bmi.w	800277a <HAL_ADC_ConfigChannel+0xf2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028ea:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 80028ee:	d04b      	beq.n	8002988 <HAL_ADC_ConfigChannel+0x300>
 80028f0:	4945      	ldr	r1, [pc, #276]	@ (8002a08 <HAL_ADC_ConfigChannel+0x380>)
 80028f2:	428a      	cmp	r2, r1
 80028f4:	f47f af41 	bne.w	800277a <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028f8:	483c      	ldr	r0, [pc, #240]	@ (80029ec <HAL_ADC_ConfigChannel+0x364>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028fa:	4a44      	ldr	r2, [pc, #272]	@ (8002a0c <HAL_ADC_ConfigChannel+0x384>)
 80028fc:	4c44      	ldr	r4, [pc, #272]	@ (8002a10 <HAL_ADC_ConfigChannel+0x388>)
 80028fe:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002900:	6881      	ldr	r1, [r0, #8]
 8002902:	0992      	lsrs	r2, r2, #6
 8002904:	fba4 4202 	umull	r4, r2, r4, r2
 8002908:	0992      	lsrs	r2, r2, #6
 800290a:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 800290e:	3201      	adds	r2, #1
 8002910:	4329      	orrs	r1, r5
 8002912:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002916:	0092      	lsls	r2, r2, #2
 8002918:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800291c:	6081      	str	r1, [r0, #8]
 800291e:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002920:	9a01      	ldr	r2, [sp, #4]
 8002922:	2a00      	cmp	r2, #0
 8002924:	f43f af29 	beq.w	800277a <HAL_ADC_ConfigChannel+0xf2>
            wait_loop_index--;
 8002928:	9a01      	ldr	r2, [sp, #4]
 800292a:	3a01      	subs	r2, #1
 800292c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800292e:	9a01      	ldr	r2, [sp, #4]
 8002930:	2a00      	cmp	r2, #0
 8002932:	d1f9      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x2a0>
 8002934:	e721      	b.n	800277a <HAL_ADC_ConfigChannel+0xf2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002936:	01c8      	lsls	r0, r1, #7
 8002938:	f53f af1f 	bmi.w	800277a <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800293c:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8002940:	f000 810a 	beq.w	8002b58 <HAL_ADC_ConfigChannel+0x4d0>
 8002944:	4c28      	ldr	r4, [pc, #160]	@ (80029e8 <HAL_ADC_ConfigChannel+0x360>)
 8002946:	4929      	ldr	r1, [pc, #164]	@ (80029ec <HAL_ADC_ConfigChannel+0x364>)
 8002948:	4829      	ldr	r0, [pc, #164]	@ (80029f0 <HAL_ADC_ConfigChannel+0x368>)
 800294a:	42a2      	cmp	r2, r4
 800294c:	bf08      	it	eq
 800294e:	4601      	moveq	r1, r0
 8002950:	688a      	ldr	r2, [r1, #8]
 8002952:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8002956:	432a      	orrs	r2, r5
 8002958:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800295c:	608a      	str	r2, [r1, #8]
}
 800295e:	e70c      	b.n	800277a <HAL_ADC_ConfigChannel+0xf2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002960:	0e80      	lsrs	r0, r0, #26
 8002962:	3001      	adds	r0, #1
 8002964:	f000 051f 	and.w	r5, r0, #31
 8002968:	2401      	movs	r4, #1
 800296a:	0680      	lsls	r0, r0, #26
 800296c:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8002970:	40ac      	lsls	r4, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002972:	2d09      	cmp	r5, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002974:	ea44 0400 	orr.w	r4, r4, r0
 8002978:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800297c:	d977      	bls.n	8002a6e <HAL_ADC_ConfigChannel+0x3e6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800297e:	381e      	subs	r0, #30
 8002980:	0500      	lsls	r0, r0, #20
 8002982:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8002986:	e791      	b.n	80028ac <HAL_ADC_ConfigChannel+0x224>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002988:	4819      	ldr	r0, [pc, #100]	@ (80029f0 <HAL_ADC_ConfigChannel+0x368>)
 800298a:	e7b6      	b.n	80028fa <HAL_ADC_ConfigChannel+0x272>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800298c:	6e15      	ldr	r5, [r2, #96]	@ 0x60
 800298e:	6e15      	ldr	r5, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002990:	f3c0 0612 	ubfx	r6, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002994:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002998:	2e00      	cmp	r6, #0
 800299a:	d16a      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x3ea>
 800299c:	f3c0 6084 	ubfx	r0, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029a0:	4285      	cmp	r5, r0
 80029a2:	f000 8097 	beq.w	8002ad4 <HAL_ADC_ConfigChannel+0x44c>
 80029a6:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 80029a8:	6e55      	ldr	r5, [r2, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029aa:	f3c5 6584 	ubfx	r5, r5, #26, #5
 80029ae:	4285      	cmp	r5, r0
 80029b0:	f000 80a2 	beq.w	8002af8 <HAL_ADC_ConfigChannel+0x470>
 80029b4:	68a5      	ldr	r5, [r4, #8]
 80029b6:	68a5      	ldr	r5, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029b8:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029bc:	f3c5 6584 	ubfx	r5, r5, #26, #5
 80029c0:	4285      	cmp	r5, r0
 80029c2:	f000 80ae 	beq.w	8002b22 <HAL_ADC_ConfigChannel+0x49a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80029c6:	68e5      	ldr	r5, [r4, #12]
 80029c8:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029ca:	f104 060c 	add.w	r6, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029ce:	f3c5 6484 	ubfx	r4, r5, #26, #5
 80029d2:	42a0      	cmp	r0, r4
 80029d4:	f000 80ba 	beq.w	8002b4c <HAL_ADC_ConfigChannel+0x4c4>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80029d8:	4660      	mov	r0, ip
 80029da:	e686      	b.n	80026ea <HAL_ADC_ConfigChannel+0x62>
 80029dc:	0007ffff 	.word	0x0007ffff
 80029e0:	407f0000 	.word	0x407f0000
 80029e4:	80080000 	.word	0x80080000
 80029e8:	50000100 	.word	0x50000100
 80029ec:	50000700 	.word	0x50000700
 80029f0:	50000300 	.word	0x50000300
 80029f4:	c3210000 	.word	0xc3210000
 80029f8:	90c00010 	.word	0x90c00010
 80029fc:	c7520000 	.word	0xc7520000
 8002a00:	cb840000 	.word	0xcb840000
 8002a04:	03fff000 	.word	0x03fff000
 8002a08:	50000600 	.word	0x50000600
 8002a0c:	20000008 	.word	0x20000008
 8002a10:	053e2d63 	.word	0x053e2d63
  MODIFY_REG(*preg,
 8002a14:	583d      	ldr	r5, [r7, r0]
 8002a16:	402c      	ands	r4, r5
 8002a18:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002a1a:	6950      	ldr	r0, [r2, #20]
 8002a1c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8002a20:	6150      	str	r0, [r2, #20]
}
 8002a22:	e6d3      	b.n	80027cc <HAL_ADC_ConfigChannel+0x144>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a24:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8002a28:	2c00      	cmp	r4, #0
 8002a2a:	f000 8099 	beq.w	8002b60 <HAL_ADC_ConfigChannel+0x4d8>
  return __builtin_clz(value);
 8002a2e:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a32:	3401      	adds	r4, #1
 8002a34:	06a4      	lsls	r4, r4, #26
 8002a36:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8002a3e:	2d00      	cmp	r5, #0
 8002a40:	f000 808c 	beq.w	8002b5c <HAL_ADC_ConfigChannel+0x4d4>
  return __builtin_clz(value);
 8002a44:	fab5 f585 	clz	r5, r5
 8002a48:	3501      	adds	r5, #1
 8002a4a:	f005 051f 	and.w	r5, r5, #31
 8002a4e:	2601      	movs	r6, #1
 8002a50:	fa06 f505 	lsl.w	r5, r6, r5
 8002a54:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a56:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8002a5a:	2800      	cmp	r0, #0
 8002a5c:	f000 8083 	beq.w	8002b66 <HAL_ADC_ConfigChannel+0x4de>
  return __builtin_clz(value);
 8002a60:	fab0 f080 	clz	r0, r0
 8002a64:	3001      	adds	r0, #1
 8002a66:	f000 001f 	and.w	r0, r0, #31
 8002a6a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002a6e:	0500      	lsls	r0, r0, #20
 8002a70:	e71c      	b.n	80028ac <HAL_ADC_ConfigChannel+0x224>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a72:	fa90 f6a0 	rbit	r6, r0
  if (value == 0U)
 8002a76:	b11e      	cbz	r6, 8002a80 <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 8002a78:	fab6 f686 	clz	r6, r6
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a7c:	42b5      	cmp	r5, r6
 8002a7e:	d029      	beq.n	8002ad4 <HAL_ADC_ConfigChannel+0x44c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a80:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8002a82:	6e55      	ldr	r5, [r2, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a84:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a88:	fa9c f6ac 	rbit	r6, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a8c:	f104 0708 	add.w	r7, r4, #8
 8002a90:	46be      	mov	lr, r7
  if (value == 0U)
 8002a92:	b11e      	cbz	r6, 8002a9c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002a94:	fab6 f686 	clz	r6, r6
 8002a98:	42ae      	cmp	r6, r5
 8002a9a:	d02f      	beq.n	8002afc <HAL_ADC_ConfigChannel+0x474>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a9c:	68a5      	ldr	r5, [r4, #8]
 8002a9e:	68a5      	ldr	r5, [r4, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002aa0:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	fa9c feac 	rbit	lr, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aa8:	f104 060c 	add.w	r6, r4, #12
 8002aac:	46b0      	mov	r8, r6
  if (value == 0U)
 8002aae:	f1be 0f00 	cmp.w	lr, #0
 8002ab2:	d003      	beq.n	8002abc <HAL_ADC_ConfigChannel+0x434>
  return __builtin_clz(value);
 8002ab4:	fabe fe8e 	clz	lr, lr
 8002ab8:	45ae      	cmp	lr, r5
 8002aba:	d034      	beq.n	8002b26 <HAL_ADC_ConfigChannel+0x49e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002abc:	68e5      	ldr	r5, [r4, #12]
 8002abe:	68e4      	ldr	r4, [r4, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ac0:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac4:	fa9c f5ac 	rbit	r5, ip
  if (value == 0U)
 8002ac8:	2d00      	cmp	r5, #0
 8002aca:	f43f ae0e 	beq.w	80026ea <HAL_ADC_ConfigChannel+0x62>
  return __builtin_clz(value);
 8002ace:	fab5 f085 	clz	r0, r5
 8002ad2:	e77e      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x34a>
  MODIFY_REG(*preg,
 8002ad4:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 8002ad6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002ada:	6610      	str	r0, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002adc:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ae0:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8002ae2:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8002ae4:	f3cc 0612 	ubfx	r6, ip, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ae8:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002aec:	4660      	mov	r0, ip
 8002aee:	2e00      	cmp	r6, #0
 8002af0:	d1ca      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x400>
 8002af2:	f3cc 6084 	ubfx	r0, ip, #26, #5
 8002af6:	e75a      	b.n	80029ae <HAL_ADC_ConfigChannel+0x326>
 8002af8:	f104 0e08 	add.w	lr, r4, #8
  MODIFY_REG(*preg,
 8002afc:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8002afe:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002b02:	6650      	str	r0, [r2, #100]	@ 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b04:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b08:	68a0      	ldr	r0, [r4, #8]
 8002b0a:	68a5      	ldr	r5, [r4, #8]
 8002b0c:	f3cc 0612 	ubfx	r6, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b10:	4677      	mov	r7, lr
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b12:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b16:	4660      	mov	r0, ip
 8002b18:	2e00      	cmp	r6, #0
 8002b1a:	d1c3      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x41c>
 8002b1c:	f3cc 6084 	ubfx	r0, ip, #26, #5
 8002b20:	e74e      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x338>
 8002b22:	f104 080c 	add.w	r8, r4, #12
  MODIFY_REG(*preg,
 8002b26:	6838      	ldr	r0, [r7, #0]
 8002b28:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002b2c:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b2e:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b32:	68e0      	ldr	r0, [r4, #12]
 8002b34:	68e4      	ldr	r4, [r4, #12]
 8002b36:	f3cc 0512 	ubfx	r5, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b3a:	4646      	mov	r6, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b3c:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b40:	4660      	mov	r0, ip
 8002b42:	2d00      	cmp	r5, #0
 8002b44:	d1be      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x43c>
 8002b46:	f3cc 6084 	ubfx	r0, ip, #26, #5
 8002b4a:	e742      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x34a>
  MODIFY_REG(*preg,
 8002b4c:	6830      	ldr	r0, [r6, #0]
 8002b4e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002b52:	6030      	str	r0, [r6, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002b54:	6808      	ldr	r0, [r1, #0]
}
 8002b56:	e5c8      	b.n	80026ea <HAL_ADC_ConfigChannel+0x62>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b58:	4908      	ldr	r1, [pc, #32]	@ (8002b7c <HAL_ADC_ConfigChannel+0x4f4>)
 8002b5a:	e6f9      	b.n	8002950 <HAL_ADC_ConfigChannel+0x2c8>
 8002b5c:	2502      	movs	r5, #2
 8002b5e:	e779      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x3cc>
 8002b60:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8002b64:	e769      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x3b2>
 8002b66:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 8002b6a:	e69f      	b.n	80028ac <HAL_ADC_ConfigChannel+0x224>
 8002b6c:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8002b70:	e67c      	b.n	800286c <HAL_ADC_ConfigChannel+0x1e4>
 8002b72:	4803      	ldr	r0, [pc, #12]	@ (8002b80 <HAL_ADC_ConfigChannel+0x4f8>)
 8002b74:	e69a      	b.n	80028ac <HAL_ADC_ConfigChannel+0x224>
 8002b76:	2502      	movs	r5, #2
 8002b78:	e685      	b.n	8002886 <HAL_ADC_ConfigChannel+0x1fe>
 8002b7a:	bf00      	nop
 8002b7c:	50000300 	.word	0x50000300
 8002b80:	fe500000 	.word	0xfe500000

08002b84 <ADC_ConversionStop>:
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b84:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	f012 0f04 	tst.w	r2, #4
{
 8002b8c:	b570      	push	{r4, r5, r6, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b92:	d101      	bne.n	8002b98 <ADC_ConversionStop+0x14>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b94:	0716      	lsls	r6, r2, #28
 8002b96:	d53c      	bpl.n	8002c12 <ADC_ConversionStop+0x8e>
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	0195      	lsls	r5, r2, #6
 8002b9c:	d504      	bpl.n	8002ba8 <ADC_ConversionStop+0x24>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002b9e:	8ba0      	ldrh	r0, [r4, #28]
 8002ba0:	f240 1201 	movw	r2, #257	@ 0x101
 8002ba4:	4290      	cmp	r0, r2
 8002ba6:	d045      	beq.n	8002c34 <ADC_ConversionStop+0xb0>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002ba8:	2902      	cmp	r1, #2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	d033      	beq.n	8002c16 <ADC_ConversionStop+0x92>
 8002bae:	0750      	lsls	r0, r2, #29
 8002bb0:	d502      	bpl.n	8002bb8 <ADC_ConversionStop+0x34>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	0792      	lsls	r2, r2, #30
 8002bb6:	d559      	bpl.n	8002c6c <ADC_ConversionStop+0xe8>
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002bb8:	2901      	cmp	r1, #1
 8002bba:	d055      	beq.n	8002c68 <ADC_ConversionStop+0xe4>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	0710      	lsls	r0, r2, #28
 8002bc0:	d50a      	bpl.n	8002bd8 <ADC_ConversionStop+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	0792      	lsls	r2, r2, #30
 8002bc6:	d407      	bmi.n	8002bd8 <ADC_ConversionStop+0x54>
  MODIFY_REG(ADCx->CR,
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002bce:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002bd2:	f042 0220 	orr.w	r2, r2, #32
 8002bd6:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 8002bd8:	2903      	cmp	r1, #3
 8002bda:	d145      	bne.n	8002c68 <ADC_ConversionStop+0xe4>
 8002bdc:	250c      	movs	r5, #12
    tickstart = HAL_GetTick();
 8002bde:	f7ff fbe3 	bl	80023a8 <HAL_GetTick>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002be2:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002be4:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	421d      	tst	r5, r3
 8002bea:	d012      	beq.n	8002c12 <ADC_ConversionStop+0x8e>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002bec:	f7ff fbdc 	bl	80023a8 <HAL_GetTick>
 8002bf0:	1b80      	subs	r0, r0, r6
 8002bf2:	2805      	cmp	r0, #5
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002bf4:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002bf6:	d9f6      	bls.n	8002be6 <ADC_ConversionStop+0x62>
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	422a      	tst	r2, r5
 8002bfc:	d0f3      	beq.n	8002be6 <ADC_ConversionStop+0x62>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bfe:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002c00:	f043 0310 	orr.w	r3, r3, #16
 8002c04:	65e3      	str	r3, [r4, #92]	@ 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c06:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002c08:	f043 0301 	orr.w	r3, r3, #1
 8002c0c:	6623      	str	r3, [r4, #96]	@ 0x60
          return HAL_ERROR;
 8002c0e:	2001      	movs	r0, #1
}
 8002c10:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002c12:	2000      	movs	r0, #0
}
 8002c14:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c16:	0716      	lsls	r6, r2, #28
 8002c18:	d50a      	bpl.n	8002c30 <ADC_ConversionStop+0xac>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	0795      	lsls	r5, r2, #30
 8002c1e:	d407      	bmi.n	8002c30 <ADC_ConversionStop+0xac>
  MODIFY_REG(ADCx->CR,
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002c26:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002c2a:	f042 0220 	orr.w	r2, r2, #32
 8002c2e:	609a      	str	r2, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002c30:	2508      	movs	r5, #8
 8002c32:	e7d4      	b.n	8002bde <ADC_ConversionStop+0x5a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	0650      	lsls	r0, r2, #25
 8002c38:	d406      	bmi.n	8002c48 <ADC_ConversionStop+0xc4>
 8002c3a:	4a11      	ldr	r2, [pc, #68]	@ (8002c80 <ADC_ConversionStop+0xfc>)
 8002c3c:	e001      	b.n	8002c42 <ADC_ConversionStop+0xbe>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002c3e:	3a01      	subs	r2, #1
 8002c40:	d0dd      	beq.n	8002bfe <ADC_ConversionStop+0x7a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002c42:	6819      	ldr	r1, [r3, #0]
 8002c44:	0649      	lsls	r1, r1, #25
 8002c46:	d5fa      	bpl.n	8002c3e <ADC_ConversionStop+0xba>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002c48:	2240      	movs	r2, #64	@ 0x40
 8002c4a:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	0756      	lsls	r6, r2, #29
 8002c50:	d50a      	bpl.n	8002c68 <ADC_ConversionStop+0xe4>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	0795      	lsls	r5, r2, #30
 8002c56:	d407      	bmi.n	8002c68 <ADC_ConversionStop+0xe4>
  MODIFY_REG(ADCx->CR,
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002c5e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002c62:	f042 0210 	orr.w	r2, r2, #16
 8002c66:	609a      	str	r2, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002c68:	2504      	movs	r5, #4
 8002c6a:	e7b8      	b.n	8002bde <ADC_ConversionStop+0x5a>
 8002c6c:	689a      	ldr	r2, [r3, #8]
 8002c6e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002c72:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002c76:	f042 0210 	orr.w	r2, r2, #16
 8002c7a:	609a      	str	r2, [r3, #8]
}
 8002c7c:	e79c      	b.n	8002bb8 <ADC_ConversionStop+0x34>
 8002c7e:	bf00      	nop
 8002c80:	a3400000 	.word	0xa3400000

08002c84 <ADC_Enable>:
{
 8002c84:	b570      	push	{r4, r5, r6, lr}
 8002c86:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8002c88:	2200      	movs	r2, #0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c8a:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 8002c8c:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	07d2      	lsls	r2, r2, #31
 8002c92:	d434      	bmi.n	8002cfe <ADC_Enable+0x7a>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c94:	6899      	ldr	r1, [r3, #8]
 8002c96:	4a2d      	ldr	r2, [pc, #180]	@ (8002d4c <ADC_Enable+0xc8>)
 8002c98:	4211      	tst	r1, r2
 8002c9a:	4604      	mov	r4, r0
 8002c9c:	d132      	bne.n	8002d04 <ADC_Enable+0x80>
  MODIFY_REG(ADCx->CR,
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002ca4:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002ca8:	f042 0201 	orr.w	r2, r2, #1
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002cac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cb0:	609a      	str	r2, [r3, #8]
 8002cb2:	d048      	beq.n	8002d46 <ADC_Enable+0xc2>
 8002cb4:	4826      	ldr	r0, [pc, #152]	@ (8002d50 <ADC_Enable+0xcc>)
 8002cb6:	4a27      	ldr	r2, [pc, #156]	@ (8002d54 <ADC_Enable+0xd0>)
 8002cb8:	4927      	ldr	r1, [pc, #156]	@ (8002d58 <ADC_Enable+0xd4>)
 8002cba:	4283      	cmp	r3, r0
 8002cbc:	bf08      	it	eq
 8002cbe:	460a      	moveq	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002cc0:	6893      	ldr	r3, [r2, #8]
 8002cc2:	021b      	lsls	r3, r3, #8
 8002cc4:	d429      	bmi.n	8002d1a <ADC_Enable+0x96>
    tickstart = HAL_GetTick();
 8002cc6:	f7ff fb6f 	bl	80023a8 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cca:	6823      	ldr	r3, [r4, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	07d6      	lsls	r6, r2, #31
    tickstart = HAL_GetTick();
 8002cd0:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cd2:	d414      	bmi.n	8002cfe <ADC_Enable+0x7a>
  MODIFY_REG(ADCx->CR,
 8002cd4:	4e21      	ldr	r6, [pc, #132]	@ (8002d5c <ADC_Enable+0xd8>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	07d0      	lsls	r0, r2, #31
 8002cda:	d404      	bmi.n	8002ce6 <ADC_Enable+0x62>
  MODIFY_REG(ADCx->CR,
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	4032      	ands	r2, r6
 8002ce0:	f042 0201 	orr.w	r2, r2, #1
 8002ce4:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ce6:	f7ff fb5f 	bl	80023a8 <HAL_GetTick>
 8002cea:	1b43      	subs	r3, r0, r5
 8002cec:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cee:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cf0:	d902      	bls.n	8002cf8 <ADC_Enable+0x74>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	07d1      	lsls	r1, r2, #31
 8002cf6:	d505      	bpl.n	8002d04 <ADC_Enable+0x80>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	07d2      	lsls	r2, r2, #31
 8002cfc:	d5eb      	bpl.n	8002cd6 <ADC_Enable+0x52>
  return HAL_OK;
 8002cfe:	2000      	movs	r0, #0
}
 8002d00:	b002      	add	sp, #8
 8002d02:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d04:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002d06:	f043 0310 	orr.w	r3, r3, #16
 8002d0a:	65e3      	str	r3, [r4, #92]	@ 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d0c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
      return HAL_ERROR;
 8002d0e:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	6623      	str	r3, [r4, #96]	@ 0x60
}
 8002d16:	b002      	add	sp, #8
 8002d18:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d1a:	4b11      	ldr	r3, [pc, #68]	@ (8002d60 <ADC_Enable+0xdc>)
 8002d1c:	4a11      	ldr	r2, [pc, #68]	@ (8002d64 <ADC_Enable+0xe0>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	099b      	lsrs	r3, r3, #6
 8002d22:	fba2 2303 	umull	r2, r3, r2, r3
 8002d26:	099b      	lsrs	r3, r3, #6
 8002d28:	3301      	adds	r3, #1
 8002d2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8002d32:	9b01      	ldr	r3, [sp, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0c6      	beq.n	8002cc6 <ADC_Enable+0x42>
        wait_loop_index--;
 8002d38:	9b01      	ldr	r3, [sp, #4]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8002d3e:	9b01      	ldr	r3, [sp, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1f9      	bne.n	8002d38 <ADC_Enable+0xb4>
 8002d44:	e7bf      	b.n	8002cc6 <ADC_Enable+0x42>
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002d46:	4a04      	ldr	r2, [pc, #16]	@ (8002d58 <ADC_Enable+0xd4>)
 8002d48:	e7ba      	b.n	8002cc0 <ADC_Enable+0x3c>
 8002d4a:	bf00      	nop
 8002d4c:	8000003f 	.word	0x8000003f
 8002d50:	50000100 	.word	0x50000100
 8002d54:	50000700 	.word	0x50000700
 8002d58:	50000300 	.word	0x50000300
 8002d5c:	7fffffc0 	.word	0x7fffffc0
 8002d60:	20000008 	.word	0x20000008
 8002d64:	053e2d63 	.word	0x053e2d63

08002d68 <HAL_ADC_Start_DMA>:
{
 8002d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d6c:	6805      	ldr	r5, [r0, #0]
 8002d6e:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
{
 8002d72:	4604      	mov	r4, r0
 8002d74:	460e      	mov	r6, r1
 8002d76:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d78:	d022      	beq.n	8002dc0 <HAL_ADC_Start_DMA+0x58>
 8002d7a:	4a39      	ldr	r2, [pc, #228]	@ (8002e60 <HAL_ADC_Start_DMA+0xf8>)
 8002d7c:	4839      	ldr	r0, [pc, #228]	@ (8002e64 <HAL_ADC_Start_DMA+0xfc>)
 8002d7e:	4b3a      	ldr	r3, [pc, #232]	@ (8002e68 <HAL_ADC_Start_DMA+0x100>)
 8002d80:	4295      	cmp	r5, r2
 8002d82:	bf08      	it	eq
 8002d84:	4618      	moveq	r0, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d86:	6882      	ldr	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d88:	68ab      	ldr	r3, [r5, #8]
 8002d8a:	075b      	lsls	r3, r3, #29
 8002d8c:	d415      	bmi.n	8002dba <HAL_ADC_Start_DMA+0x52>
    __HAL_LOCK(hadc);
 8002d8e:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d011      	beq.n	8002dba <HAL_ADC_Start_DMA+0x52>
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002d96:	4b35      	ldr	r3, [pc, #212]	@ (8002e6c <HAL_ADC_Start_DMA+0x104>)
    __HAL_LOCK(hadc);
 8002d98:	2001      	movs	r0, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002d9a:	429d      	cmp	r5, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d9c:	f002 081f 	and.w	r8, r2, #31
    __HAL_LOCK(hadc);
 8002da0:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002da4:	d00e      	beq.n	8002dc4 <HAL_ADC_Start_DMA+0x5c>
 8002da6:	f240 2321 	movw	r3, #545	@ 0x221
 8002daa:	fa23 f308 	lsr.w	r3, r3, r8
 8002dae:	4003      	ands	r3, r0
 8002db0:	d108      	bne.n	8002dc4 <HAL_ADC_Start_DMA+0x5c>
      __HAL_UNLOCK(hadc);
 8002db2:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
}
 8002db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hadc);
 8002dba:	2002      	movs	r0, #2
}
 8002dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dc0:	4829      	ldr	r0, [pc, #164]	@ (8002e68 <HAL_ADC_Start_DMA+0x100>)
 8002dc2:	e7e0      	b.n	8002d86 <HAL_ADC_Start_DMA+0x1e>
      tmp_hal_status = ADC_Enable(hadc);
 8002dc4:	4620      	mov	r0, r4
 8002dc6:	f7ff ff5d 	bl	8002c84 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8002dca:	2800      	cmp	r0, #0
 8002dcc:	d13f      	bne.n	8002e4e <HAL_ADC_Start_DMA+0xe6>
        ADC_STATE_CLR_SET(hadc->State,
 8002dce:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002dd0:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8002dd2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002dd6:	f023 0301 	bic.w	r3, r3, #1
 8002dda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dde:	65e3      	str	r3, [r4, #92]	@ 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002de0:	4b1f      	ldr	r3, [pc, #124]	@ (8002e60 <HAL_ADC_Start_DMA+0xf8>)
 8002de2:	4299      	cmp	r1, r3
 8002de4:	d038      	beq.n	8002e58 <HAL_ADC_Start_DMA+0xf0>
 8002de6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002dea:	4299      	cmp	r1, r3
 8002dec:	d034      	beq.n	8002e58 <HAL_ADC_Start_DMA+0xf0>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002dee:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002df0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002df4:	65e3      	str	r3, [r4, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002df6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002df8:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8002dfa:	4d1d      	ldr	r5, [pc, #116]	@ (8002e70 <HAL_ADC_Start_DMA+0x108>)
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002dfc:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e00:	bf1c      	itt	ne
 8002e02:	6e23      	ldrne	r3, [r4, #96]	@ 0x60
 8002e04:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8002e08:	6623      	str	r3, [r4, #96]	@ 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e0a:	62c5      	str	r5, [r0, #44]	@ 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e0c:	4d19      	ldr	r5, [pc, #100]	@ (8002e74 <HAL_ADC_Start_DMA+0x10c>)
 8002e0e:	6305      	str	r5, [r0, #48]	@ 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e10:	4d19      	ldr	r5, [pc, #100]	@ (8002e78 <HAL_ADC_Start_DMA+0x110>)
 8002e12:	6345      	str	r5, [r0, #52]	@ 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e14:	251c      	movs	r5, #28
 8002e16:	600d      	str	r5, [r1, #0]
        __HAL_UNLOCK(hadc);
 8002e18:	2500      	movs	r5, #0
 8002e1a:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e1e:	684d      	ldr	r5, [r1, #4]
 8002e20:	f045 0510 	orr.w	r5, r5, #16
 8002e24:	604d      	str	r5, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002e26:	68cd      	ldr	r5, [r1, #12]
 8002e28:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e2c:	463b      	mov	r3, r7
 8002e2e:	4632      	mov	r2, r6
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002e30:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e32:	3140      	adds	r1, #64	@ 0x40
 8002e34:	f000 fea8 	bl	8003b88 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002e38:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002e3a:	6893      	ldr	r3, [r2, #8]
 8002e3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e44:	f043 0304 	orr.w	r3, r3, #4
 8002e48:	6093      	str	r3, [r2, #8]
}
 8002e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
}
 8002e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e58:	f1b8 0f00 	cmp.w	r8, #0
 8002e5c:	d1cb      	bne.n	8002df6 <HAL_ADC_Start_DMA+0x8e>
 8002e5e:	e7c6      	b.n	8002dee <HAL_ADC_Start_DMA+0x86>
 8002e60:	50000100 	.word	0x50000100
 8002e64:	50000700 	.word	0x50000700
 8002e68:	50000300 	.word	0x50000300
 8002e6c:	50000600 	.word	0x50000600
 8002e70:	08002601 	.word	0x08002601
 8002e74:	080025f1 	.word	0x080025f1
 8002e78:	0800266d 	.word	0x0800266d

08002e7c <ADC_Disable>:
{
 8002e7c:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002e7e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	0795      	lsls	r5, r2, #30
 8002e84:	d502      	bpl.n	8002e8c <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e86:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8002e88:	2000      	movs	r0, #0
}
 8002e8a:	bd38      	pop	{r3, r4, r5, pc}
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	07d4      	lsls	r4, r2, #31
 8002e90:	d5fa      	bpl.n	8002e88 <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	f002 020d 	and.w	r2, r2, #13
 8002e98:	2a01      	cmp	r2, #1
 8002e9a:	4604      	mov	r4, r0
 8002e9c:	d009      	beq.n	8002eb2 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e9e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002ea0:	f043 0310 	orr.w	r3, r3, #16
 8002ea4:	65e3      	str	r3, [r4, #92]	@ 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ea6:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	6623      	str	r3, [r4, #96]	@ 0x60
      return HAL_ERROR;
 8002eae:	2001      	movs	r0, #1
}
 8002eb0:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002eb8:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002ebc:	2103      	movs	r1, #3
 8002ebe:	f042 0202 	orr.w	r2, r2, #2
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8002ec6:	f7ff fa6f 	bl	80023a8 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002eca:	6823      	ldr	r3, [r4, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 8002ed0:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ed2:	d403      	bmi.n	8002edc <ADC_Disable+0x60>
 8002ed4:	e7d8      	b.n	8002e88 <ADC_Disable+0xc>
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	07db      	lsls	r3, r3, #31
 8002eda:	d5d5      	bpl.n	8002e88 <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002edc:	f7ff fa64 	bl	80023a8 <HAL_GetTick>
 8002ee0:	1b40      	subs	r0, r0, r5
 8002ee2:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ee4:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ee6:	d9f6      	bls.n	8002ed6 <ADC_Disable+0x5a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	07d2      	lsls	r2, r2, #31
 8002eec:	d5f3      	bpl.n	8002ed6 <ADC_Disable+0x5a>
 8002eee:	e7d6      	b.n	8002e9e <ADC_Disable+0x22>

08002ef0 <HAL_ADC_Stop_DMA>:
{
 8002ef0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 8002ef2:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d028      	beq.n	8002f4c <HAL_ADC_Stop_DMA+0x5c>
 8002efa:	2301      	movs	r3, #1
 8002efc:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002f00:	2103      	movs	r1, #3
 8002f02:	4604      	mov	r4, r0
 8002f04:	f7ff fe3e 	bl	8002b84 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8002f08:	4605      	mov	r5, r0
 8002f0a:	b9d0      	cbnz	r0, 8002f42 <HAL_ADC_Stop_DMA+0x52>
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002f0c:	6823      	ldr	r3, [r4, #0]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002f0e:	6d60      	ldr	r0, [r4, #84]	@ 0x54
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	f022 0201 	bic.w	r2, r2, #1
 8002f16:	60da      	str	r2, [r3, #12]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002f18:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8002f1c:	2a02      	cmp	r2, #2
 8002f1e:	d018      	beq.n	8002f52 <HAL_ADC_Stop_DMA+0x62>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	f022 0210 	bic.w	r2, r2, #16
 8002f26:	605a      	str	r2, [r3, #4]
      tmp_hal_status = ADC_Disable(hadc);
 8002f28:	4620      	mov	r0, r4
 8002f2a:	f7ff ffa7 	bl	8002e7c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8002f2e:	4605      	mov	r5, r0
 8002f30:	b938      	cbnz	r0, 8002f42 <HAL_ADC_Stop_DMA+0x52>
      ADC_STATE_CLR_SET(hadc->State,
 8002f32:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002f34:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f38:	f023 0301 	bic.w	r3, r3, #1
 8002f3c:	f043 0301 	orr.w	r3, r3, #1
 8002f40:	65e3      	str	r3, [r4, #92]	@ 0x5c
  __HAL_UNLOCK(hadc);
 8002f42:	2300      	movs	r3, #0
 8002f44:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
}
 8002f48:	4628      	mov	r0, r5
 8002f4a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hadc);
 8002f4c:	2502      	movs	r5, #2
}
 8002f4e:	4628      	mov	r0, r5
 8002f50:	bd38      	pop	{r3, r4, r5, pc}
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002f52:	f000 fe71 	bl	8003c38 <HAL_DMA_Abort>
      if (tmp_hal_status != HAL_OK)
 8002f56:	4605      	mov	r5, r0
 8002f58:	b160      	cbz	r0, 8002f74 <HAL_ADC_Stop_DMA+0x84>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f5a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002f5c:	6822      	ldr	r2, [r4, #0]
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f62:	65e3      	str	r3, [r4, #92]	@ 0x5c
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002f64:	6853      	ldr	r3, [r2, #4]
 8002f66:	f023 0310 	bic.w	r3, r3, #16
      (void)ADC_Disable(hadc);
 8002f6a:	4620      	mov	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002f6c:	6053      	str	r3, [r2, #4]
      (void)ADC_Disable(hadc);
 8002f6e:	f7ff ff85 	bl	8002e7c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8002f72:	e7e6      	b.n	8002f42 <HAL_ADC_Stop_DMA+0x52>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002f74:	6822      	ldr	r2, [r4, #0]
 8002f76:	6853      	ldr	r3, [r2, #4]
 8002f78:	f023 0310 	bic.w	r3, r3, #16
 8002f7c:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 8002f7e:	e7d3      	b.n	8002f28 <HAL_ADC_Stop_DMA+0x38>

08002f80 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002f80:	b470      	push	{r4, r5, r6}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f82:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
  if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f86:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8002f88:	2a01      	cmp	r2, #1
{
 8002f8a:	b09d      	sub	sp, #116	@ 0x74
  __HAL_LOCK(hadc);
 8002f8c:	d057      	beq.n	800303e <HAL_ADCEx_MultiModeConfigChannel+0xbe>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002f8e:	6802      	ldr	r2, [r0, #0]
 8002f90:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002f92:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 8002f94:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002f96:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002f9a:	9418      	str	r4, [sp, #96]	@ 0x60
  __HAL_LOCK(hadc);
 8002f9c:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002fa0:	9419      	str	r4, [sp, #100]	@ 0x64
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002fa2:	d00b      	beq.n	8002fbc <HAL_ADCEx_MultiModeConfigChannel+0x3c>
 8002fa4:	4d4a      	ldr	r5, [pc, #296]	@ (80030d0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002fa6:	42aa      	cmp	r2, r5
 8002fa8:	d047      	beq.n	800303a <HAL_ADCEx_MultiModeConfigChannel+0xba>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002faa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fac:	f883 4058 	strb.w	r4, [r3, #88]	@ 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fb0:	f042 0220 	orr.w	r2, r2, #32
 8002fb4:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8002fb6:	b01d      	add	sp, #116	@ 0x74
 8002fb8:	bc70      	pop	{r4, r5, r6}
 8002fba:	4770      	bx	lr
 8002fbc:	4845      	ldr	r0, [pc, #276]	@ (80030d4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fbe:	6880      	ldr	r0, [r0, #8]
 8002fc0:	0740      	lsls	r0, r0, #29
 8002fc2:	d50b      	bpl.n	8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8002fc4:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fc6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002fc8:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8002fcc:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fce:	65da      	str	r2, [r3, #92]	@ 0x5c
  __HAL_UNLOCK(hadc);
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 8002fd6:	b01d      	add	sp, #116	@ 0x74
 8002fd8:	bc70      	pop	{r4, r5, r6}
 8002fda:	4770      	bx	lr
 8002fdc:	6890      	ldr	r0, [r2, #8]
 8002fde:	0740      	lsls	r0, r0, #29
 8002fe0:	d4f1      	bmi.n	8002fc6 <HAL_ADCEx_MultiModeConfigChannel+0x46>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002fe2:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8002fe6:	d02e      	beq.n	8003046 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
 8002fe8:	483a      	ldr	r0, [pc, #232]	@ (80030d4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002fea:	4282      	cmp	r2, r0
 8002fec:	d02b      	beq.n	8003046 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fee:	2e00      	cmp	r6, #0
 8002ff0:	d05a      	beq.n	80030a8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002ff2:	4839      	ldr	r0, [pc, #228]	@ (80030d8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002ff4:	684c      	ldr	r4, [r1, #4]
 8002ff6:	6882      	ldr	r2, [r0, #8]
 8002ff8:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002ffc:	4322      	orrs	r2, r4
 8002ffe:	f893 4038 	ldrb.w	r4, [r3, #56]	@ 0x38
 8003002:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8003006:	6082      	str	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003008:	4a31      	ldr	r2, [pc, #196]	@ (80030d0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800300a:	4c34      	ldr	r4, [pc, #208]	@ (80030dc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800300c:	6895      	ldr	r5, [r2, #8]
 800300e:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8003012:	6892      	ldr	r2, [r2, #8]
 8003014:	68a4      	ldr	r4, [r4, #8]
 8003016:	07e4      	lsls	r4, r4, #31
 8003018:	d40d      	bmi.n	8003036 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800301a:	432a      	orrs	r2, r5
 800301c:	43d2      	mvns	r2, r2
 800301e:	f002 0201 	and.w	r2, r2, #1
 8003022:	b142      	cbz	r2, 8003036 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
        MODIFY_REG(tmpADC_Common->CCR,
 8003024:	6884      	ldr	r4, [r0, #8]
 8003026:	688a      	ldr	r2, [r1, #8]
 8003028:	f424 6171 	bic.w	r1, r4, #3856	@ 0xf10
 800302c:	4332      	orrs	r2, r6
 800302e:	f021 010f 	bic.w	r1, r1, #15
 8003032:	430a      	orrs	r2, r1
 8003034:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003036:	2000      	movs	r0, #0
 8003038:	e7ca      	b.n	8002fd0 <HAL_ADCEx_MultiModeConfigChannel+0x50>
 800303a:	4829      	ldr	r0, [pc, #164]	@ (80030e0 <HAL_ADCEx_MultiModeConfigChannel+0x160>)
 800303c:	e7bf      	b.n	8002fbe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 800303e:	2002      	movs	r0, #2
}
 8003040:	b01d      	add	sp, #116	@ 0x74
 8003042:	bc70      	pop	{r4, r5, r6}
 8003044:	4770      	bx	lr
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003046:	b1b6      	cbz	r6, 8003076 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003048:	4826      	ldr	r0, [pc, #152]	@ (80030e4 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 800304a:	684c      	ldr	r4, [r1, #4]
 800304c:	6882      	ldr	r2, [r0, #8]
 800304e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003052:	4322      	orrs	r2, r4
 8003054:	f893 4038 	ldrb.w	r4, [r3, #56]	@ 0x38
 8003058:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 800305c:	6082      	str	r2, [r0, #8]
 800305e:	481d      	ldr	r0, [pc, #116]	@ (80030d4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003060:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8003064:	6892      	ldr	r2, [r2, #8]
 8003066:	6880      	ldr	r0, [r0, #8]
 8003068:	07c0      	lsls	r0, r0, #31
 800306a:	d4e4      	bmi.n	8003036 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800306c:	43d2      	mvns	r2, r2
 800306e:	481d      	ldr	r0, [pc, #116]	@ (80030e4 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 8003070:	f002 0201 	and.w	r2, r2, #1
 8003074:	e7d5      	b.n	8003022 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003076:	491b      	ldr	r1, [pc, #108]	@ (80030e4 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 8003078:	688a      	ldr	r2, [r1, #8]
 800307a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800307e:	608a      	str	r2, [r1, #8]
 8003080:	4914      	ldr	r1, [pc, #80]	@ (80030d4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003082:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8003086:	6892      	ldr	r2, [r2, #8]
 8003088:	6889      	ldr	r1, [r1, #8]
 800308a:	07cd      	lsls	r5, r1, #31
 800308c:	d4d3      	bmi.n	8003036 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800308e:	43d2      	mvns	r2, r2
 8003090:	4914      	ldr	r1, [pc, #80]	@ (80030e4 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 8003092:	f002 0201 	and.w	r2, r2, #1
 8003096:	2a00      	cmp	r2, #0
 8003098:	d0cd      	beq.n	8003036 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800309a:	688a      	ldr	r2, [r1, #8]
 800309c:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 80030a0:	f022 020f 	bic.w	r2, r2, #15
 80030a4:	608a      	str	r2, [r1, #8]
 80030a6:	e7c6      	b.n	8003036 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80030a8:	490b      	ldr	r1, [pc, #44]	@ (80030d8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80030aa:	4c09      	ldr	r4, [pc, #36]	@ (80030d0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80030ac:	688a      	ldr	r2, [r1, #8]
 80030ae:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80030b2:	608a      	str	r2, [r1, #8]
 80030b4:	68a4      	ldr	r4, [r4, #8]
 80030b6:	f8d0 2408 	ldr.w	r2, [r0, #1032]	@ 0x408
 80030ba:	f500 60a0 	add.w	r0, r0, #1280	@ 0x500
 80030be:	6880      	ldr	r0, [r0, #8]
 80030c0:	07c5      	lsls	r5, r0, #31
 80030c2:	d4b8      	bmi.n	8003036 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030c4:	4322      	orrs	r2, r4
 80030c6:	43d2      	mvns	r2, r2
 80030c8:	f002 0201 	and.w	r2, r2, #1
 80030cc:	e7e3      	b.n	8003096 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80030ce:	bf00      	nop
 80030d0:	50000400 	.word	0x50000400
 80030d4:	50000100 	.word	0x50000100
 80030d8:	50000700 	.word	0x50000700
 80030dc:	50000600 	.word	0x50000600
 80030e0:	50000500 	.word	0x50000500
 80030e4:	50000300 	.word	0x50000300

080030e8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80030e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ea:	b083      	sub	sp, #12
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80030ec:	2300      	movs	r3, #0
 80030ee:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80030f0:	2800      	cmp	r0, #0
 80030f2:	d047      	beq.n	8003184 <HAL_COMP_Init+0x9c>
  {
    status = HAL_ERROR;
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80030f4:	6802      	ldr	r2, [r0, #0]
 80030f6:	6813      	ldr	r3, [r2, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	4604      	mov	r4, r0
 80030fc:	db42      	blt.n	8003184 <HAL_COMP_Init+0x9c>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 80030fe:	7f43      	ldrb	r3, [r0, #29]
 8003100:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8003104:	2b00      	cmp	r3, #0
 8003106:	d078      	beq.n	80031fa <HAL_COMP_Init+0x112>
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
               | hcomp->Init.InputPlus
 8003108:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
               | hcomp->Init.BlankingSrce
 800310c:	6961      	ldr	r1, [r4, #20]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800310e:	6815      	ldr	r5, [r2, #0]
               | hcomp->Init.InputPlus
 8003110:	4303      	orrs	r3, r0
               | hcomp->Init.BlankingSrce
 8003112:	430b      	orrs	r3, r1
               | hcomp->Init.Hysteresis
 8003114:	68e1      	ldr	r1, [r4, #12]
               | hcomp->Init.OutputPol
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8003116:	6810      	ldr	r0, [r2, #0]
               | hcomp->Init.Hysteresis
 8003118:	430b      	orrs	r3, r1
    tmp_csr = (hcomp->Init.InputMinus
 800311a:	6921      	ldr	r1, [r4, #16]
 800311c:	430b      	orrs	r3, r1
    MODIFY_REG(hcomp->Instance->CSR,
 800311e:	4991      	ldr	r1, [pc, #580]	@ (8003364 <HAL_COMP_Init+0x27c>)
 8003120:	4001      	ands	r1, r0
 8003122:	430b      	orrs	r3, r1
 8003124:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8003126:	6813      	ldr	r3, [r2, #0]
 8003128:	021b      	lsls	r3, r3, #8
 800312a:	d501      	bpl.n	8003130 <HAL_COMP_Init+0x48>
 800312c:	022f      	lsls	r7, r5, #8
 800312e:	d52c      	bpl.n	800318a <HAL_COMP_Init+0xa2>
        wait_loop_index--;
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003130:	498d      	ldr	r1, [pc, #564]	@ (8003368 <HAL_COMP_Init+0x280>)

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003132:	69a3      	ldr	r3, [r4, #24]
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003134:	428a      	cmp	r2, r1
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003136:	f003 0003 	and.w	r0, r3, #3
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800313a:	d064      	beq.n	8003206 <HAL_COMP_Init+0x11e>
 800313c:	498b      	ldr	r1, [pc, #556]	@ (800336c <HAL_COMP_Init+0x284>)
 800313e:	428a      	cmp	r2, r1
 8003140:	d074      	beq.n	800322c <HAL_COMP_Init+0x144>
 8003142:	3104      	adds	r1, #4
 8003144:	428a      	cmp	r2, r1
 8003146:	d036      	beq.n	80031b6 <HAL_COMP_Init+0xce>
 8003148:	3104      	adds	r1, #4
 800314a:	428a      	cmp	r2, r1
 800314c:	f000 80dc 	beq.w	8003308 <HAL_COMP_Init+0x220>
 8003150:	4987      	ldr	r1, [pc, #540]	@ (8003370 <HAL_COMP_Init+0x288>)
 8003152:	428a      	cmp	r2, r1
 8003154:	f000 80fb 	beq.w	800334e <HAL_COMP_Init+0x266>
 8003158:	3104      	adds	r1, #4
 800315a:	428a      	cmp	r2, r1
 800315c:	f000 8093 	beq.w	8003286 <HAL_COMP_Init+0x19e>
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003160:	2800      	cmp	r0, #0
 8003162:	f040 810f 	bne.w	8003384 <HAL_COMP_Init+0x29c>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003166:	4b83      	ldr	r3, [pc, #524]	@ (8003374 <HAL_COMP_Init+0x28c>)
 8003168:	429a      	cmp	r2, r3
 800316a:	f040 816d 	bne.w	8003448 <HAL_COMP_Init+0x360>
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800316e:	4a82      	ldr	r2, [pc, #520]	@ (8003378 <HAL_COMP_Init+0x290>)
 8003170:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8003172:	f06f 0102 	mvn.w	r1, #2
 8003176:	400b      	ands	r3, r1
 8003178:	6253      	str	r3, [r2, #36]	@ 0x24
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800317a:	4a7f      	ldr	r2, [pc, #508]	@ (8003378 <HAL_COMP_Init+0x290>)
 800317c:	6a13      	ldr	r3, [r2, #32]
 800317e:	400b      	ands	r3, r1
 8003180:	6213      	str	r3, [r2, #32]
}
 8003182:	e065      	b.n	8003250 <HAL_COMP_Init+0x168>
    status = HAL_ERROR;
 8003184:	2001      	movs	r0, #1
      hcomp->State = HAL_COMP_STATE_READY;
    }
  }

  return status;
}
 8003186:	b003      	add	sp, #12
 8003188:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800318a:	4b7c      	ldr	r3, [pc, #496]	@ (800337c <HAL_COMP_Init+0x294>)
 800318c:	497c      	ldr	r1, [pc, #496]	@ (8003380 <HAL_COMP_Init+0x298>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	099b      	lsrs	r3, r3, #6
 8003192:	fba1 1303 	umull	r1, r3, r1, r3
 8003196:	099b      	lsrs	r3, r3, #6
 8003198:	3301      	adds	r3, #1
 800319a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80031a2:	9b01      	ldr	r3, [sp, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0c3      	beq.n	8003130 <HAL_COMP_Init+0x48>
        wait_loop_index--;
 80031a8:	9b01      	ldr	r3, [sp, #4]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80031ae:	9b01      	ldr	r3, [sp, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1f9      	bne.n	80031a8 <HAL_COMP_Init+0xc0>
 80031b4:	e7bc      	b.n	8003130 <HAL_COMP_Init+0x48>
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80031b6:	2800      	cmp	r0, #0
 80031b8:	d060      	beq.n	800327c <HAL_COMP_Init+0x194>
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80031ba:	06de      	lsls	r6, r3, #27
 80031bc:	f06f 5000 	mvn.w	r0, #536870912	@ 0x20000000
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80031c0:	f04f 5100 	mov.w	r1, #536870912	@ 0x20000000
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80031c4:	d426      	bmi.n	8003214 <HAL_COMP_Init+0x12c>
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80031c6:	f003 0720 	and.w	r7, r3, #32
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80031ca:	4d6b      	ldr	r5, [pc, #428]	@ (8003378 <HAL_COMP_Init+0x290>)
 80031cc:	68ae      	ldr	r6, [r5, #8]
 80031ce:	4006      	ands	r6, r0
 80031d0:	60ae      	str	r6, [r5, #8]
 80031d2:	2f00      	cmp	r7, #0
 80031d4:	d055      	beq.n	8003282 <HAL_COMP_Init+0x19a>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80031d6:	68ee      	ldr	r6, [r5, #12]
 80031d8:	430e      	orrs	r6, r1
 80031da:	60ee      	str	r6, [r5, #12]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 80031dc:	4d66      	ldr	r5, [pc, #408]	@ (8003378 <HAL_COMP_Init+0x290>)
 80031de:	6169      	str	r1, [r5, #20]
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80031e0:	079d      	lsls	r5, r3, #30
 80031e2:	d53c      	bpl.n	800325e <HAL_COMP_Init+0x176>
  SET_BIT(EXTI->EMR1, ExtiLine);
 80031e4:	4d64      	ldr	r5, [pc, #400]	@ (8003378 <HAL_COMP_Init+0x290>)
 80031e6:	686a      	ldr	r2, [r5, #4]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	606a      	str	r2, [r5, #4]
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80031ec:	07da      	lsls	r2, r3, #31
 80031ee:	d43d      	bmi.n	800326c <HAL_COMP_Init+0x184>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80031f0:	4a61      	ldr	r2, [pc, #388]	@ (8003378 <HAL_COMP_Init+0x290>)
 80031f2:	6813      	ldr	r3, [r2, #0]
 80031f4:	4003      	ands	r3, r0
 80031f6:	6013      	str	r3, [r2, #0]
}
 80031f8:	e02a      	b.n	8003250 <HAL_COMP_Init+0x168>
      hcomp->Lock = HAL_UNLOCKED;
 80031fa:	7701      	strb	r1, [r0, #28]
      COMP_CLEAR_ERRORCODE(hcomp);
 80031fc:	6201      	str	r1, [r0, #32]
      HAL_COMP_MspInit(hcomp);
 80031fe:	f7fe f9d7 	bl	80015b0 <HAL_COMP_MspInit>
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8003202:	6822      	ldr	r2, [r4, #0]
 8003204:	e780      	b.n	8003108 <HAL_COMP_Init+0x20>
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003206:	b1c8      	cbz	r0, 800323c <HAL_COMP_Init+0x154>
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003208:	06de      	lsls	r6, r3, #27
 800320a:	f46f 1000 	mvn.w	r0, #2097152	@ 0x200000
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800320e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003212:	d5d8      	bpl.n	80031c6 <HAL_COMP_Init+0xde>
 8003214:	f003 0720 	and.w	r7, r3, #32
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003218:	4d57      	ldr	r5, [pc, #348]	@ (8003378 <HAL_COMP_Init+0x290>)
 800321a:	68ae      	ldr	r6, [r5, #8]
 800321c:	430e      	orrs	r6, r1
 800321e:	60ae      	str	r6, [r5, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003220:	68ee      	ldr	r6, [r5, #12]
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003222:	2f00      	cmp	r7, #0
 8003224:	d1d8      	bne.n	80031d8 <HAL_COMP_Init+0xf0>
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003226:	4006      	ands	r6, r0
 8003228:	60ee      	str	r6, [r5, #12]
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800322a:	e7d7      	b.n	80031dc <HAL_COMP_Init+0xf4>
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800322c:	b318      	cbz	r0, 8003276 <HAL_COMP_Init+0x18e>
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800322e:	06dd      	lsls	r5, r3, #27
 8003230:	f46f 0080 	mvn.w	r0, #4194304	@ 0x400000
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003234:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003238:	d4ec      	bmi.n	8003214 <HAL_COMP_Init+0x12c>
 800323a:	e7c4      	b.n	80031c6 <HAL_COMP_Init+0xde>
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800323c:	f46f 1300 	mvn.w	r3, #2097152	@ 0x200000
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003240:	494d      	ldr	r1, [pc, #308]	@ (8003378 <HAL_COMP_Init+0x290>)
 8003242:	684a      	ldr	r2, [r1, #4]
 8003244:	401a      	ands	r2, r3
 8003246:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003248:	4a4b      	ldr	r2, [pc, #300]	@ (8003378 <HAL_COMP_Init+0x290>)
 800324a:	6811      	ldr	r1, [r2, #0]
 800324c:	400b      	ands	r3, r1
 800324e:	6013      	str	r3, [r2, #0]
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003250:	7f63      	ldrb	r3, [r4, #29]
 8003252:	b90b      	cbnz	r3, 8003258 <HAL_COMP_Init+0x170>
      hcomp->State = HAL_COMP_STATE_READY;
 8003254:	2301      	movs	r3, #1
 8003256:	7763      	strb	r3, [r4, #29]
  HAL_StatusTypeDef status = HAL_OK;
 8003258:	2000      	movs	r0, #0
}
 800325a:	b003      	add	sp, #12
 800325c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800325e:	4e46      	ldr	r6, [pc, #280]	@ (8003378 <HAL_COMP_Init+0x290>)
 8003260:	6875      	ldr	r5, [r6, #4]
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003262:	07df      	lsls	r7, r3, #31
 8003264:	ea05 0500 	and.w	r5, r5, r0
 8003268:	6075      	str	r5, [r6, #4]
 800326a:	d548      	bpl.n	80032fe <HAL_COMP_Init+0x216>
  SET_BIT(EXTI->IMR1, ExtiLine);
 800326c:	4a42      	ldr	r2, [pc, #264]	@ (8003378 <HAL_COMP_Init+0x290>)
 800326e:	6813      	ldr	r3, [r2, #0]
 8003270:	430b      	orrs	r3, r1
 8003272:	6013      	str	r3, [r2, #0]
}
 8003274:	e7ec      	b.n	8003250 <HAL_COMP_Init+0x168>
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003276:	f46f 0380 	mvn.w	r3, #4194304	@ 0x400000
 800327a:	e7e1      	b.n	8003240 <HAL_COMP_Init+0x158>
 800327c:	f06f 5300 	mvn.w	r3, #536870912	@ 0x20000000
 8003280:	e7de      	b.n	8003240 <HAL_COMP_Init+0x158>
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003282:	68ee      	ldr	r6, [r5, #12]
 8003284:	e7cf      	b.n	8003226 <HAL_COMP_Init+0x13e>
 8003286:	b1f8      	cbz	r0, 80032c8 <HAL_COMP_Init+0x1e0>
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003288:	06dd      	lsls	r5, r3, #27
 800328a:	d453      	bmi.n	8003334 <HAL_COMP_Init+0x24c>
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800328c:	493a      	ldr	r1, [pc, #232]	@ (8003378 <HAL_COMP_Init+0x290>)
 800328e:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8003290:	f022 0201 	bic.w	r2, r2, #1
 8003294:	628a      	str	r2, [r1, #40]	@ 0x28
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003296:	069a      	lsls	r2, r3, #26
 8003298:	d553      	bpl.n	8003342 <HAL_COMP_Init+0x25a>
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800329a:	4937      	ldr	r1, [pc, #220]	@ (8003378 <HAL_COMP_Init+0x290>)
 800329c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800329e:	f042 0201 	orr.w	r2, r2, #1
 80032a2:	62ca      	str	r2, [r1, #44]	@ 0x2c
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR2, ExtiLine);
 80032a4:	4a34      	ldr	r2, [pc, #208]	@ (8003378 <HAL_COMP_Init+0x290>)
 80032a6:	2101      	movs	r1, #1
 80032a8:	6351      	str	r1, [r2, #52]	@ 0x34
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80032aa:	079f      	lsls	r7, r3, #30
  SET_BIT(EXTI->EMR2, ExtiLine);
 80032ac:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 80032ae:	d436      	bmi.n	800331e <HAL_COMP_Init+0x236>
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80032b0:	f021 0101 	bic.w	r1, r1, #1
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80032b4:	07de      	lsls	r6, r3, #31
 80032b6:	6251      	str	r1, [r2, #36]	@ 0x24
 80032b8:	d436      	bmi.n	8003328 <HAL_COMP_Init+0x240>
 80032ba:	f06f 0001 	mvn.w	r0, #1
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80032be:	4a2e      	ldr	r2, [pc, #184]	@ (8003378 <HAL_COMP_Init+0x290>)
 80032c0:	6a13      	ldr	r3, [r2, #32]
 80032c2:	4003      	ands	r3, r0
 80032c4:	6213      	str	r3, [r2, #32]
}
 80032c6:	e7c3      	b.n	8003250 <HAL_COMP_Init+0x168>
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80032c8:	4a2b      	ldr	r2, [pc, #172]	@ (8003378 <HAL_COMP_Init+0x290>)
 80032ca:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80032cc:	f06f 0101 	mvn.w	r1, #1
 80032d0:	400b      	ands	r3, r1
 80032d2:	6253      	str	r3, [r2, #36]	@ 0x24
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80032d4:	e751      	b.n	800317a <HAL_COMP_Init+0x92>
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80032d6:	4928      	ldr	r1, [pc, #160]	@ (8003378 <HAL_COMP_Init+0x290>)
 80032d8:	6ac8      	ldr	r0, [r1, #44]	@ 0x2c
 80032da:	f020 0002 	bic.w	r0, r0, #2
 80032de:	62c8      	str	r0, [r1, #44]	@ 0x2c
  WRITE_REG(EXTI->PR2, ExtiLine);
 80032e0:	2002      	movs	r0, #2
 80032e2:	6348      	str	r0, [r1, #52]	@ 0x34
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80032e4:	0799      	lsls	r1, r3, #30
 80032e6:	f100 808b 	bmi.w	8003400 <HAL_COMP_Init+0x318>
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80032ea:	4823      	ldr	r0, [pc, #140]	@ (8003378 <HAL_COMP_Init+0x290>)
 80032ec:	6a41      	ldr	r1, [r0, #36]	@ 0x24
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80032ee:	07db      	lsls	r3, r3, #31
 80032f0:	f021 0102 	bic.w	r1, r1, #2
 80032f4:	6241      	str	r1, [r0, #36]	@ 0x24
 80032f6:	f100 808d 	bmi.w	8003414 <HAL_COMP_Init+0x32c>
 80032fa:	f06f 0002 	mvn.w	r0, #2
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80032fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003374 <HAL_COMP_Init+0x28c>)
 8003300:	429a      	cmp	r2, r3
 8003302:	f47f af75 	bne.w	80031f0 <HAL_COMP_Init+0x108>
 8003306:	e7da      	b.n	80032be <HAL_COMP_Init+0x1d6>
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003308:	2800      	cmp	r0, #0
 800330a:	f000 8088 	beq.w	800341e <HAL_COMP_Init+0x336>
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800330e:	06dd      	lsls	r5, r3, #27
 8003310:	f06f 4080 	mvn.w	r0, #1073741824	@ 0x40000000
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003314:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003318:	f53f af7c 	bmi.w	8003214 <HAL_COMP_Init+0x12c>
 800331c:	e753      	b.n	80031c6 <HAL_COMP_Init+0xde>
  SET_BIT(EXTI->EMR2, ExtiLine);
 800331e:	f041 0101 	orr.w	r1, r1, #1
 8003322:	6251      	str	r1, [r2, #36]	@ 0x24
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003324:	07d9      	lsls	r1, r3, #31
 8003326:	d5c8      	bpl.n	80032ba <HAL_COMP_Init+0x1d2>
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003328:	2101      	movs	r1, #1
  SET_BIT(EXTI->IMR2, ExtiLine);
 800332a:	4a13      	ldr	r2, [pc, #76]	@ (8003378 <HAL_COMP_Init+0x290>)
 800332c:	6a13      	ldr	r3, [r2, #32]
 800332e:	430b      	orrs	r3, r1
 8003330:	6213      	str	r3, [r2, #32]
}
 8003332:	e78d      	b.n	8003250 <HAL_COMP_Init+0x168>
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8003334:	4910      	ldr	r1, [pc, #64]	@ (8003378 <HAL_COMP_Init+0x290>)
 8003336:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8003338:	f042 0201 	orr.w	r2, r2, #1
 800333c:	628a      	str	r2, [r1, #40]	@ 0x28
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800333e:	069a      	lsls	r2, r3, #26
 8003340:	d4ab      	bmi.n	800329a <HAL_COMP_Init+0x1b2>
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8003342:	490d      	ldr	r1, [pc, #52]	@ (8003378 <HAL_COMP_Init+0x290>)
 8003344:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8003346:	f022 0201 	bic.w	r2, r2, #1
 800334a:	62ca      	str	r2, [r1, #44]	@ 0x2c
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800334c:	e7aa      	b.n	80032a4 <HAL_COMP_Init+0x1bc>
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800334e:	2800      	cmp	r0, #0
 8003350:	d068      	beq.n	8003424 <HAL_COMP_Init+0x33c>
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003352:	06df      	lsls	r7, r3, #27
 8003354:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003358:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800335c:	f53f af5a 	bmi.w	8003214 <HAL_COMP_Init+0x12c>
 8003360:	e731      	b.n	80031c6 <HAL_COMP_Init+0xde>
 8003362:	bf00      	nop
 8003364:	ff007e0f 	.word	0xff007e0f
 8003368:	40010200 	.word	0x40010200
 800336c:	40010204 	.word	0x40010204
 8003370:	40010210 	.word	0x40010210
 8003374:	40010218 	.word	0x40010218
 8003378:	40010400 	.word	0x40010400
 800337c:	20000008 	.word	0x20000008
 8003380:	053e2d63 	.word	0x053e2d63
 8003384:	06de      	lsls	r6, r3, #27
 8003386:	d51d      	bpl.n	80033c4 <HAL_COMP_Init+0x2dc>
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003388:	4931      	ldr	r1, [pc, #196]	@ (8003450 <HAL_COMP_Init+0x368>)
 800338a:	428a      	cmp	r2, r1
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800338c:	f003 0720 	and.w	r7, r3, #32
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003390:	d152      	bne.n	8003438 <HAL_COMP_Init+0x350>
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8003392:	4830      	ldr	r0, [pc, #192]	@ (8003454 <HAL_COMP_Init+0x36c>)
 8003394:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8003396:	f041 0102 	orr.w	r1, r1, #2
 800339a:	6281      	str	r1, [r0, #40]	@ 0x28
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800339c:	2f00      	cmp	r7, #0
 800339e:	d09a      	beq.n	80032d6 <HAL_COMP_Init+0x1ee>
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80033a0:	4a2c      	ldr	r2, [pc, #176]	@ (8003454 <HAL_COMP_Init+0x36c>)
 80033a2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
  WRITE_REG(EXTI->PR2, ExtiLine);
 80033a4:	2502      	movs	r5, #2
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80033a6:	f003 0001 	and.w	r0, r3, #1
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80033aa:	4329      	orrs	r1, r5
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80033ac:	079b      	lsls	r3, r3, #30
 80033ae:	62d1      	str	r1, [r2, #44]	@ 0x2c
  WRITE_REG(EXTI->PR2, ExtiLine);
 80033b0:	6355      	str	r5, [r2, #52]	@ 0x34
 80033b2:	d53a      	bpl.n	800342a <HAL_COMP_Init+0x342>
  SET_BIT(EXTI->EMR2, ExtiLine);
 80033b4:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80033b6:	f043 0302 	orr.w	r3, r3, #2
 80033ba:	6253      	str	r3, [r2, #36]	@ 0x24
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80033bc:	b9f0      	cbnz	r0, 80033fc <HAL_COMP_Init+0x314>
 80033be:	f06f 0002 	mvn.w	r0, #2
 80033c2:	e77c      	b.n	80032be <HAL_COMP_Init+0x1d6>
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80033c4:	4922      	ldr	r1, [pc, #136]	@ (8003450 <HAL_COMP_Init+0x368>)
 80033c6:	428a      	cmp	r2, r1
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80033c8:	f003 0720 	and.w	r7, r3, #32
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80033cc:	d138      	bne.n	8003440 <HAL_COMP_Init+0x358>
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80033ce:	4821      	ldr	r0, [pc, #132]	@ (8003454 <HAL_COMP_Init+0x36c>)
 80033d0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80033d2:	f021 0102 	bic.w	r1, r1, #2
 80033d6:	6281      	str	r1, [r0, #40]	@ 0x28
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80033d8:	2f00      	cmp	r7, #0
 80033da:	f43f af7c 	beq.w	80032d6 <HAL_COMP_Init+0x1ee>
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80033de:	4601      	mov	r1, r0
 80033e0:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 80033e2:	f040 0002 	orr.w	r0, r0, #2
 80033e6:	62c8      	str	r0, [r1, #44]	@ 0x2c
  WRITE_REG(EXTI->PR2, ExtiLine);
 80033e8:	2002      	movs	r0, #2
 80033ea:	6348      	str	r0, [r1, #52]	@ 0x34
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80033ec:	0798      	lsls	r0, r3, #30
 80033ee:	d407      	bmi.n	8003400 <HAL_COMP_Init+0x318>
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80033f0:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80033f2:	07d8      	lsls	r0, r3, #31
 80033f4:	f022 0202 	bic.w	r2, r2, #2
 80033f8:	624a      	str	r2, [r1, #36]	@ 0x24
 80033fa:	d5e0      	bpl.n	80033be <HAL_COMP_Init+0x2d6>
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80033fc:	2102      	movs	r1, #2
 80033fe:	e794      	b.n	800332a <HAL_COMP_Init+0x242>
  SET_BIT(EXTI->EMR2, ExtiLine);
 8003400:	4814      	ldr	r0, [pc, #80]	@ (8003454 <HAL_COMP_Init+0x36c>)
 8003402:	6a41      	ldr	r1, [r0, #36]	@ 0x24
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	f041 0102 	orr.w	r1, r1, #2
 800340c:	6241      	str	r1, [r0, #36]	@ 0x24
 800340e:	2b00      	cmp	r3, #0
 8003410:	f43f af73 	beq.w	80032fa <HAL_COMP_Init+0x212>
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003414:	4b0e      	ldr	r3, [pc, #56]	@ (8003450 <HAL_COMP_Init+0x368>)
 8003416:	429a      	cmp	r2, r3
 8003418:	d0f0      	beq.n	80033fc <HAL_COMP_Init+0x314>
 800341a:	2102      	movs	r1, #2
 800341c:	e726      	b.n	800326c <HAL_COMP_Init+0x184>
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800341e:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 8003422:	e70d      	b.n	8003240 <HAL_COMP_Init+0x158>
 8003424:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8003428:	e70a      	b.n	8003240 <HAL_COMP_Init+0x158>
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800342a:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800342c:	f023 0302 	bic.w	r3, r3, #2
 8003430:	6253      	str	r3, [r2, #36]	@ 0x24
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003432:	2800      	cmp	r0, #0
 8003434:	d1e2      	bne.n	80033fc <HAL_COMP_Init+0x314>
 8003436:	e7c2      	b.n	80033be <HAL_COMP_Init+0x2d6>
 8003438:	f06f 0002 	mvn.w	r0, #2
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800343c:	2102      	movs	r1, #2
 800343e:	e6eb      	b.n	8003218 <HAL_COMP_Init+0x130>
 8003440:	f06f 0002 	mvn.w	r0, #2
 8003444:	2102      	movs	r1, #2
 8003446:	e6c0      	b.n	80031ca <HAL_COMP_Init+0xe2>
 8003448:	f06f 0302 	mvn.w	r3, #2
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800344c:	e6f8      	b.n	8003240 <HAL_COMP_Init+0x158>
 800344e:	bf00      	nop
 8003450:	40010218 	.word	0x40010218
 8003454:	40010400 	.word	0x40010400

08003458 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8003458:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 800345a:	2300      	movs	r3, #0
 800345c:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 800345e:	b130      	cbz	r0, 800346e <HAL_COMP_Start+0x16>
  {
    status = HAL_ERROR;
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8003460:	6803      	ldr	r3, [r0, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	2a00      	cmp	r2, #0
 8003466:	db02      	blt.n	800346e <HAL_COMP_Start+0x16>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 8003468:	7f42      	ldrb	r2, [r0, #29]
 800346a:	2a01      	cmp	r2, #1
 800346c:	d002      	beq.n	8003474 <HAL_COMP_Start+0x1c>
    status = HAL_ERROR;
 800346e:	2001      	movs	r0, #1
      status = HAL_ERROR;
    }
  }

  return status;
}
 8003470:	b002      	add	sp, #8
 8003472:	4770      	bx	lr
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8003474:	681a      	ldr	r2, [r3, #0]
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 8003476:	490c      	ldr	r1, [pc, #48]	@ (80034a8 <HAL_COMP_Start+0x50>)
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8003478:	f042 0201 	orr.w	r2, r2, #1
 800347c:	601a      	str	r2, [r3, #0]
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 800347e:	680b      	ldr	r3, [r1, #0]
 8003480:	4a0a      	ldr	r2, [pc, #40]	@ (80034ac <HAL_COMP_Start+0x54>)
 8003482:	fba2 2303 	umull	r2, r3, r2, r3
 8003486:	0cdb      	lsrs	r3, r3, #19
 8003488:	eb03 0383 	add.w	r3, r3, r3, lsl #2
      hcomp->State = HAL_COMP_STATE_BUSY;
 800348c:	2102      	movs	r1, #2
 800348e:	7741      	strb	r1, [r0, #29]
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 8003490:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003492:	9b01      	ldr	r3, [sp, #4]
 8003494:	b12b      	cbz	r3, 80034a2 <HAL_COMP_Start+0x4a>
        wait_loop_index--;
 8003496:	9b01      	ldr	r3, [sp, #4]
 8003498:	3b01      	subs	r3, #1
 800349a:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800349c:	9b01      	ldr	r3, [sp, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f9      	bne.n	8003496 <HAL_COMP_Start+0x3e>
  HAL_StatusTypeDef status = HAL_OK;
 80034a2:	2000      	movs	r0, #0
}
 80034a4:	b002      	add	sp, #8
 80034a6:	4770      	bx	lr
 80034a8:	20000008 	.word	0x20000008
 80034ac:	431bde83 	.word	0x431bde83

080034b0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034b0:	4907      	ldr	r1, [pc, #28]	@ (80034d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80034b2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034b4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034b6:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034ba:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034be:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034c0:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034c2:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80034ca:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	e000ed00 	.word	0xe000ed00

080034d4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003544 <HAL_NVIC_SetPriority+0x70>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034dc:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034de:	f1c3 0e07 	rsb	lr, r3, #7
 80034e2:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034e6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034ea:	bf28      	it	cs
 80034ec:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034f0:	f1bc 0f06 	cmp.w	ip, #6
 80034f4:	d91c      	bls.n	8003530 <HAL_NVIC_SetPriority+0x5c>
 80034f6:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034fa:	f04f 33ff 	mov.w	r3, #4294967295
 80034fe:	fa03 f30c 	lsl.w	r3, r3, ip
 8003502:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003506:	f04f 33ff 	mov.w	r3, #4294967295
 800350a:	fa03 f30e 	lsl.w	r3, r3, lr
 800350e:	ea21 0303 	bic.w	r3, r1, r3
 8003512:	fa03 f30c 	lsl.w	r3, r3, ip
 8003516:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003518:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 800351a:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800351c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800351e:	db0a      	blt.n	8003536 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003520:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8003524:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8003528:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800352c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003530:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003532:	4694      	mov	ip, r2
 8003534:	e7e7      	b.n	8003506 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003536:	4a04      	ldr	r2, [pc, #16]	@ (8003548 <HAL_NVIC_SetPriority+0x74>)
 8003538:	f000 000f 	and.w	r0, r0, #15
 800353c:	4402      	add	r2, r0
 800353e:	7613      	strb	r3, [r2, #24]
 8003540:	f85d fb04 	ldr.w	pc, [sp], #4
 8003544:	e000ed00 	.word	0xe000ed00
 8003548:	e000ecfc 	.word	0xe000ecfc

0800354c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800354c:	2800      	cmp	r0, #0
 800354e:	db07      	blt.n	8003560 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003550:	4a04      	ldr	r2, [pc, #16]	@ (8003564 <HAL_NVIC_EnableIRQ+0x18>)
 8003552:	0941      	lsrs	r1, r0, #5
 8003554:	2301      	movs	r3, #1
 8003556:	f000 001f 	and.w	r0, r0, #31
 800355a:	4083      	lsls	r3, r0
 800355c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	e000e100 	.word	0xe000e100

08003568 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003568:	3801      	subs	r0, #1
 800356a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800356e:	d301      	bcc.n	8003574 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003570:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003572:	4770      	bx	lr
{
 8003574:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003576:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800357a:	4c07      	ldr	r4, [pc, #28]	@ (8003598 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800357c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800357e:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8003582:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003586:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003588:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800358a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800358c:	619a      	str	r2, [r3, #24]
}
 800358e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003592:	6119      	str	r1, [r3, #16]
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	e000ed00 	.word	0xe000ed00

0800359c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800359c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80035a0:	0897      	lsrs	r7, r2, #2
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
  {
    if ((BufferLength % 4U) == 1U)
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80035a2:	6805      	ldr	r5, [r0, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80035a4:	d015      	beq.n	80035d2 <CRC_Handle_8+0x36>
 80035a6:	468c      	mov	ip, r1
 80035a8:	eb01 0687 	add.w	r6, r1, r7, lsl #2
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80035ac:	f89c 3001 	ldrb.w	r3, [ip, #1]
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80035b0:	f89c 8000 	ldrb.w	r8, [ip]
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80035b4:	f89c 4003 	ldrb.w	r4, [ip, #3]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80035b8:	f89c e002 	ldrb.w	lr, [ip, #2]
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80035bc:	041b      	lsls	r3, r3, #16
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80035be:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 80035c2:	4323      	orrs	r3, r4
  for (i = 0U; i < (BufferLength / 4U); i++)
 80035c4:	f10c 0c04 	add.w	ip, ip, #4
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80035c8:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
  for (i = 0U; i < (BufferLength / 4U); i++)
 80035cc:	45b4      	cmp	ip, r6
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80035ce:	602b      	str	r3, [r5, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80035d0:	d1ec      	bne.n	80035ac <CRC_Handle_8+0x10>
  if ((BufferLength % 4U) != 0U)
 80035d2:	f012 0203 	ands.w	r2, r2, #3
 80035d6:	d00c      	beq.n	80035f2 <CRC_Handle_8+0x56>
    if ((BufferLength % 4U) == 1U)
 80035d8:	2a01      	cmp	r2, #1
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80035da:	f811 4027 	ldrb.w	r4, [r1, r7, lsl #2]
 80035de:	ea4f 0787 	mov.w	r7, r7, lsl #2
    if ((BufferLength % 4U) == 1U)
 80035e2:	d009      	beq.n	80035f8 <CRC_Handle_8+0x5c>
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
      *pReg = data;
    }
    if ((BufferLength % 4U) == 3U)
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80035e4:	4439      	add	r1, r7
    if ((BufferLength % 4U) == 2U)
 80035e6:	2a02      	cmp	r2, #2
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80035e8:	784b      	ldrb	r3, [r1, #1]
 80035ea:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
      *pReg = data;
 80035ee:	802b      	strh	r3, [r5, #0]
    if ((BufferLength % 4U) == 2U)
 80035f0:	d107      	bne.n	8003602 <CRC_Handle_8+0x66>
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80035f2:	6828      	ldr	r0, [r5, #0]
}
 80035f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80035f8:	702c      	strb	r4, [r5, #0]
  return hcrc->Instance->DR;
 80035fa:	6805      	ldr	r5, [r0, #0]
 80035fc:	6828      	ldr	r0, [r5, #0]
}
 80035fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8003602:	788b      	ldrb	r3, [r1, #2]
 8003604:	702b      	strb	r3, [r5, #0]
  return hcrc->Instance->DR;
 8003606:	6805      	ldr	r5, [r0, #0]
 8003608:	6828      	ldr	r0, [r5, #0]
}
 800360a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800360e:	bf00      	nop

08003610 <HAL_CRC_Init>:
  if (hcrc == NULL)
 8003610:	2800      	cmp	r0, #0
 8003612:	d036      	beq.n	8003682 <HAL_CRC_Init+0x72>
{
 8003614:	b510      	push	{r4, lr}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003616:	7f43      	ldrb	r3, [r0, #29]
 8003618:	4604      	mov	r4, r0
 800361a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800361e:	b363      	cbz	r3, 800367a <HAL_CRC_Init+0x6a>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003620:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003622:	2202      	movs	r2, #2
 8003624:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003626:	b9f3      	cbnz	r3, 8003666 <HAL_CRC_Init+0x56>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003628:	6823      	ldr	r3, [r4, #0]
 800362a:	4a17      	ldr	r2, [pc, #92]	@ (8003688 <HAL_CRC_Init+0x78>)
 800362c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	f022 0218 	bic.w	r2, r2, #24
 8003634:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003636:	7962      	ldrb	r2, [r4, #5]
 8003638:	b18a      	cbz	r2, 800365e <HAL_CRC_Init+0x4e>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800363a:	6922      	ldr	r2, [r4, #16]
 800363c:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	6961      	ldr	r1, [r4, #20]
 8003642:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003646:	430a      	orrs	r2, r1
 8003648:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	69a1      	ldr	r1, [r4, #24]
 800364e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003652:	430a      	orrs	r2, r1
  hcrc->State = HAL_CRC_STATE_READY;
 8003654:	2101      	movs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003656:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8003658:	7761      	strb	r1, [r4, #29]
  return HAL_OK;
 800365a:	2000      	movs	r0, #0
}
 800365c:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800365e:	f04f 32ff 	mov.w	r2, #4294967295
 8003662:	611a      	str	r2, [r3, #16]
 8003664:	e7eb      	b.n	800363e <HAL_CRC_Init+0x2e>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003666:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800366a:	4620      	mov	r0, r4
 800366c:	f000 f84c 	bl	8003708 <HAL_CRCEx_Polynomial_Set>
 8003670:	b908      	cbnz	r0, 8003676 <HAL_CRC_Init+0x66>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003672:	6823      	ldr	r3, [r4, #0]
 8003674:	e7df      	b.n	8003636 <HAL_CRC_Init+0x26>
    return HAL_ERROR;
 8003676:	2001      	movs	r0, #1
}
 8003678:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800367a:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800367c:	f7fd ffd6 	bl	800162c <HAL_CRC_MspInit>
 8003680:	e7ce      	b.n	8003620 <HAL_CRC_Init+0x10>
    return HAL_ERROR;
 8003682:	2001      	movs	r0, #1
}
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	04c11db7 	.word	0x04c11db7

0800368c <HAL_CRC_Calculate>:
{
 800368c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_CRC_DR_RESET(hcrc);
 800368e:	6805      	ldr	r5, [r0, #0]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003690:	2302      	movs	r3, #2
 8003692:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8003694:	68ab      	ldr	r3, [r5, #8]
 8003696:	f043 0301 	orr.w	r3, r3, #1
 800369a:	60ab      	str	r3, [r5, #8]
  switch (hcrc->InputDataFormat)
 800369c:	6a03      	ldr	r3, [r0, #32]
 800369e:	2b02      	cmp	r3, #2
{
 80036a0:	4606      	mov	r6, r0
 80036a2:	468c      	mov	ip, r1
 80036a4:	4617      	mov	r7, r2
  switch (hcrc->InputDataFormat)
 80036a6:	d007      	beq.n	80036b8 <HAL_CRC_Calculate+0x2c>
 80036a8:	2b03      	cmp	r3, #3
 80036aa:	d022      	beq.n	80036f2 <HAL_CRC_Calculate+0x66>
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d01b      	beq.n	80036e8 <HAL_CRC_Calculate+0x5c>
  hcrc->State = HAL_CRC_STATE_READY;
 80036b0:	2301      	movs	r3, #1
 80036b2:	7773      	strb	r3, [r6, #29]
  switch (hcrc->InputDataFormat)
 80036b4:	2000      	movs	r0, #0
}
 80036b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80036b8:	0851      	lsrs	r1, r2, #1
 80036ba:	d00c      	beq.n	80036d6 <HAL_CRC_Calculate+0x4a>
 80036bc:	2300      	movs	r3, #0
 80036be:	f10c 0002 	add.w	r0, ip, #2
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80036c2:	f83c 2023 	ldrh.w	r2, [ip, r3, lsl #2]
 80036c6:	f830 4023 	ldrh.w	r4, [r0, r3, lsl #2]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80036ca:	3301      	adds	r3, #1
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80036cc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
  for (i = 0U; i < (BufferLength / 2U); i++)
 80036d0:	428b      	cmp	r3, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80036d2:	602c      	str	r4, [r5, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80036d4:	d1f5      	bne.n	80036c2 <HAL_CRC_Calculate+0x36>
  }
  if ((BufferLength % 2U) != 0U)
 80036d6:	07fb      	lsls	r3, r7, #31
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
    *pReg = pBuffer[2U * i];
 80036d8:	bf44      	itt	mi
 80036da:	f83c 3021 	ldrhmi.w	r3, [ip, r1, lsl #2]
 80036de:	802b      	strhmi	r3, [r5, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 80036e0:	2301      	movs	r3, #1
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80036e2:	6828      	ldr	r0, [r5, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 80036e4:	7773      	strb	r3, [r6, #29]
}
 80036e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80036e8:	f7ff ff58 	bl	800359c <CRC_Handle_8>
  hcrc->State = HAL_CRC_STATE_READY;
 80036ec:	2301      	movs	r3, #1
 80036ee:	7773      	strb	r3, [r6, #29]
}
 80036f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (index = 0U; index < BufferLength; index++)
 80036f2:	2a00      	cmp	r2, #0
 80036f4:	d0f4      	beq.n	80036e0 <HAL_CRC_Calculate+0x54>
 80036f6:	3904      	subs	r1, #4
 80036f8:	eb01 0782 	add.w	r7, r1, r2, lsl #2
        hcrc->Instance->DR = pBuffer[index];
 80036fc:	f851 3f04 	ldr.w	r3, [r1, #4]!
 8003700:	602b      	str	r3, [r5, #0]
      for (index = 0U; index < BufferLength; index++)
 8003702:	42b9      	cmp	r1, r7
 8003704:	d1fa      	bne.n	80036fc <HAL_CRC_Calculate+0x70>
 8003706:	e7eb      	b.n	80036e0 <HAL_CRC_Calculate+0x54>

08003708 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003708:	07cb      	lsls	r3, r1, #31
 800370a:	d51a      	bpl.n	8003742 <HAL_CRCEx_Polynomial_Set+0x3a>
{
 800370c:	b410      	push	{r4}
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800370e:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003710:	3b01      	subs	r3, #1
 8003712:	1c5c      	adds	r4, r3, #1
 8003714:	fa21 fc03 	lsr.w	ip, r1, r3
 8003718:	d015      	beq.n	8003746 <HAL_CRCEx_Polynomial_Set+0x3e>
 800371a:	f01c 0f01 	tst.w	ip, #1
 800371e:	d0f7      	beq.n	8003710 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 8003720:	2a18      	cmp	r2, #24
 8003722:	d811      	bhi.n	8003748 <HAL_CRCEx_Polynomial_Set+0x40>
 8003724:	e8df f002 	tbb	[pc, r2]
 8003728:	10101016 	.word	0x10101016
 800372c:	10101010 	.word	0x10101010
 8003730:	10101024 	.word	0x10101024
 8003734:	10101010 	.word	0x10101010
 8003738:	10101021 	.word	0x10101021
 800373c:	10101010 	.word	0x10101010
 8003740:	14          	.byte	0x14
 8003741:	00          	.byte	0x00
 8003742:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 8003744:	4770      	bx	lr
    switch (PolyLength)
 8003746:	b12a      	cbz	r2, 8003754 <HAL_CRCEx_Polynomial_Set+0x4c>
 8003748:	2001      	movs	r0, #1
}
 800374a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800374e:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_7B)
 8003750:	2b06      	cmp	r3, #6
 8003752:	d8f9      	bhi.n	8003748 <HAL_CRCEx_Polynomial_Set+0x40>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003754:	6804      	ldr	r4, [r0, #0]
 8003756:	6161      	str	r1, [r4, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003758:	68a3      	ldr	r3, [r4, #8]
 800375a:	f023 0318 	bic.w	r3, r3, #24
 800375e:	4313      	orrs	r3, r2
 8003760:	2000      	movs	r0, #0
 8003762:	60a3      	str	r3, [r4, #8]
}
 8003764:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003768:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_8B)
 800376a:	2b07      	cmp	r3, #7
 800376c:	d9f2      	bls.n	8003754 <HAL_CRCEx_Polynomial_Set+0x4c>
 800376e:	e7eb      	b.n	8003748 <HAL_CRCEx_Polynomial_Set+0x40>
        if (msb >= HAL_CRC_LENGTH_16B)
 8003770:	2b0f      	cmp	r3, #15
 8003772:	d9ef      	bls.n	8003754 <HAL_CRCEx_Polynomial_Set+0x4c>
 8003774:	e7e8      	b.n	8003748 <HAL_CRCEx_Polynomial_Set+0x40>
 8003776:	bf00      	nop

08003778 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003778:	b188      	cbz	r0, 800379e <HAL_DAC_Init+0x26>
{
 800377a:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800377c:	7903      	ldrb	r3, [r0, #4]
 800377e:	4604      	mov	r4, r0
 8003780:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003784:	b13b      	cbz	r3, 8003796 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003786:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8003788:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800378a:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 800378c:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800378e:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8003790:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8003792:	4618      	mov	r0, r3
}
 8003794:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8003796:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8003798:	f7fd ff5e 	bl	8001658 <HAL_DAC_MspInit>
 800379c:	e7f3      	b.n	8003786 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 800379e:	2001      	movs	r0, #1
}
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop

080037a4 <HAL_DAC_Start>:
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80037a4:	2800      	cmp	r0, #0
 80037a6:	d03f      	beq.n	8003828 <HAL_DAC_Start+0x84>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80037a8:	7943      	ldrb	r3, [r0, #5]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	4602      	mov	r2, r0
 80037ae:	d03d      	beq.n	800382c <HAL_DAC_Start+0x88>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80037b0:	2302      	movs	r3, #2
{
 80037b2:	b430      	push	{r4, r5}
  hdac->State = HAL_DAC_STATE_BUSY;
 80037b4:	7103      	strb	r3, [r0, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003830 <HAL_DAC_Start+0x8c>)
  __HAL_DAC_ENABLE(hdac, Channel);
 80037b8:	6804      	ldr	r4, [r0, #0]
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	481d      	ldr	r0, [pc, #116]	@ (8003834 <HAL_DAC_Start+0x90>)
  __HAL_DAC_ENABLE(hdac, Channel);
 80037be:	6825      	ldr	r5, [r4, #0]
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037c0:	099b      	lsrs	r3, r3, #6
 80037c2:	fba0 0303 	umull	r0, r3, r0, r3
  __HAL_DAC_ENABLE(hdac, Channel);
 80037c6:	f001 0c10 	and.w	ip, r1, #16
 80037ca:	2001      	movs	r0, #1
{
 80037cc:	b082      	sub	sp, #8
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037ce:	099b      	lsrs	r3, r3, #6
  __HAL_DAC_ENABLE(hdac, Channel);
 80037d0:	fa00 f00c 	lsl.w	r0, r0, ip
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037d4:	3301      	adds	r3, #1
  __HAL_DAC_ENABLE(hdac, Channel);
 80037d6:	4328      	orrs	r0, r5
 80037d8:	6020      	str	r0, [r4, #0]
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037da:	9301      	str	r3, [sp, #4]
  while (wait_loop_index != 0UL)
 80037dc:	9b01      	ldr	r3, [sp, #4]
 80037de:	b12b      	cbz	r3, 80037ec <HAL_DAC_Start+0x48>
  {
    wait_loop_index--;
 80037e0:	9b01      	ldr	r3, [sp, #4]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	9301      	str	r3, [sp, #4]
  while (wait_loop_index != 0UL)
 80037e6:	9b01      	ldr	r3, [sp, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1f9      	bne.n	80037e0 <HAL_DAC_Start+0x3c>
  }

  if (Channel == DAC_CHANNEL_1)
 80037ec:	b979      	cbnz	r1, 800380e <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80037ee:	6823      	ldr	r3, [r4, #0]
 80037f0:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d103      	bne.n	8003800 <HAL_DAC_Start+0x5c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80037f8:	6863      	ldr	r3, [r4, #4]
 80037fa:	f043 0301 	orr.w	r3, r3, #1
 80037fe:	6063      	str	r3, [r4, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003800:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 8003802:	2301      	movs	r3, #1
 8003804:	7113      	strb	r3, [r2, #4]
  __HAL_UNLOCK(hdac);
 8003806:	7150      	strb	r0, [r2, #5]

  /* Return function status */
  return HAL_OK;
}
 8003808:	b002      	add	sp, #8
 800380a:	bc30      	pop	{r4, r5}
 800380c:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800380e:	6821      	ldr	r1, [r4, #0]
 8003810:	2302      	movs	r3, #2
 8003812:	f401 1178 	and.w	r1, r1, #4063232	@ 0x3e0000
 8003816:	fa03 f30c 	lsl.w	r3, r3, ip
 800381a:	4299      	cmp	r1, r3
 800381c:	d1f0      	bne.n	8003800 <HAL_DAC_Start+0x5c>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800381e:	6863      	ldr	r3, [r4, #4]
 8003820:	f043 0302 	orr.w	r3, r3, #2
 8003824:	6063      	str	r3, [r4, #4]
 8003826:	e7eb      	b.n	8003800 <HAL_DAC_Start+0x5c>
    return HAL_ERROR;
 8003828:	2001      	movs	r0, #1
 800382a:	4770      	bx	lr
  __HAL_LOCK(hdac);
 800382c:	2002      	movs	r0, #2
}
 800382e:	4770      	bx	lr
 8003830:	20000008 	.word	0x20000008
 8003834:	053e2d63 	.word	0x053e2d63

08003838 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003838:	b410      	push	{r4}
 800383a:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 800383c:	2400      	movs	r4, #0
 800383e:	9401      	str	r4, [sp, #4]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003840:	b198      	cbz	r0, 800386a <HAL_DAC_SetValue+0x32>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8003842:	6800      	ldr	r0, [r0, #0]
 8003844:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8003846:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8003848:	b151      	cbz	r1, 8003860 <HAL_DAC_SetValue+0x28>
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800384a:	9901      	ldr	r1, [sp, #4]
 800384c:	3114      	adds	r1, #20
 800384e:	440a      	add	r2, r1
 8003850:	9201      	str	r2, [sp, #4]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003852:	9a01      	ldr	r2, [sp, #4]

  /* Return function status */
  return HAL_OK;
 8003854:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8003856:	6013      	str	r3, [r2, #0]
}
 8003858:	b003      	add	sp, #12
 800385a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800385e:	4770      	bx	lr
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003860:	9901      	ldr	r1, [sp, #4]
 8003862:	3108      	adds	r1, #8
 8003864:	440a      	add	r2, r1
 8003866:	9201      	str	r2, [sp, #4]
 8003868:	e7f3      	b.n	8003852 <HAL_DAC_SetValue+0x1a>
    return HAL_ERROR;
 800386a:	2001      	movs	r0, #1
}
 800386c:	b003      	add	sp, #12
 800386e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_DAC_ConfigChannel>:
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003874:	2800      	cmp	r0, #0
 8003876:	f000 80ce 	beq.w	8003a16 <HAL_DAC_ConfigChannel+0x1a2>
{
 800387a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800387e:	460f      	mov	r7, r1
  if ((hdac == NULL) || (sConfig == NULL))
 8003880:	2900      	cmp	r1, #0
 8003882:	f000 80ca 	beq.w	8003a1a <HAL_DAC_ConfigChannel+0x1a6>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003886:	7943      	ldrb	r3, [r0, #5]
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8003888:	6889      	ldr	r1, [r1, #8]
  __HAL_LOCK(hdac);
 800388a:	2b01      	cmp	r3, #1
 800388c:	4606      	mov	r6, r0
 800388e:	f000 80d3 	beq.w	8003a38 <HAL_DAC_ConfigChannel+0x1c4>
 8003892:	2301      	movs	r3, #1
 8003894:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003896:	2904      	cmp	r1, #4
  hdac->State = HAL_DAC_STATE_BUSY;
 8003898:	f04f 0302 	mov.w	r3, #2
 800389c:	4614      	mov	r4, r2
 800389e:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80038a0:	d07b      	beq.n	800399a <HAL_DAC_ConfigChannel+0x126>

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80038a2:	6803      	ldr	r3, [r0, #0]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80038a4:	f002 0410 	and.w	r4, r2, #16
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80038a8:	69fa      	ldr	r2, [r7, #28]
 80038aa:	2a01      	cmp	r2, #1
 80038ac:	d108      	bne.n	80038c0 <HAL_DAC_ConfigChannel+0x4c>
    tmpreg1 = hdac->Instance->CCR;
 80038ae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80038b0:	6a3a      	ldr	r2, [r7, #32]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80038b2:	251f      	movs	r5, #31
 80038b4:	40a5      	lsls	r5, r4
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80038b6:	40a2      	lsls	r2, r4
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80038b8:	ea20 0005 	bic.w	r0, r0, r5
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80038bc:	4302      	orrs	r2, r0
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80038be:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80038c0:	69bd      	ldr	r5, [r7, #24]
  tmpreg1 = hdac->Instance->MCR;
 80038c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80038c4:	f8d7 8014 	ldr.w	r8, [r7, #20]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80038c8:	2007      	movs	r0, #7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80038ca:	2d01      	cmp	r5, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80038cc:	fa00 f004 	lsl.w	r0, r0, r4
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80038d0:	f000 809e 	beq.w	8003a10 <HAL_DAC_ConfigChannel+0x19c>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80038d4:	2d02      	cmp	r5, #2
 80038d6:	f000 80a3 	beq.w	8003a20 <HAL_DAC_ConfigChannel+0x1ac>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80038da:	fab8 fc88 	clz	ip, r8
 80038de:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80038e2:	793d      	ldrb	r5, [r7, #4]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80038e4:	f897 e005 	ldrb.w	lr, [r7, #5]
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80038e8:	f1a5 0501 	sub.w	r5, r5, #1
 80038ec:	fab5 f585 	clz	r5, r5
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80038f0:	f1ae 0e01 	sub.w	lr, lr, #1
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80038f4:	096d      	lsrs	r5, r5, #5
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80038f6:	fabe fe8e 	clz	lr, lr
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80038fa:	022d      	lsls	r5, r5, #8
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80038fc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8003900:	ea45 254e 	orr.w	r5, r5, lr, lsl #9
 8003904:	ea45 0508 	orr.w	r5, r5, r8
 8003908:	430d      	orrs	r5, r1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800390a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800390e:	40a1      	lsls	r1, r4
 8003910:	4301      	orrs	r1, r0
 8003912:	ea22 0801 	bic.w	r8, r2, r1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003916:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800391a:	40a2      	lsls	r2, r4
 800391c:	ea28 0802 	bic.w	r8, r8, r2
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	2a02      	cmp	r2, #2
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003924:	ea45 050c 	orr.w	r5, r5, ip
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003928:	f428 4840 	bic.w	r8, r8, #49152	@ 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800392c:	d07b      	beq.n	8003a26 <HAL_DAC_ConfigChannel+0x1b2>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800392e:	ea48 0802 	orr.w	r8, r8, r2
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003932:	40a5      	lsls	r5, r4
 8003934:	ea45 0508 	orr.w	r5, r5, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003938:	63dd      	str	r5, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003940:	40a1      	lsls	r1, r4
 8003942:	ea22 0201 	bic.w	r2, r2, r1
 8003946:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003948:	e9d7 1203 	ldrd	r1, r2, [r7, #12]
  tmpreg1 = hdac->Instance->CR;
 800394c:	681d      	ldr	r5, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800394e:	f640 70fe 	movw	r0, #4094	@ 0xffe
 8003952:	40a0      	lsls	r0, r4
 8003954:	ea25 0500 	bic.w	r5, r5, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003958:	fa01 f004 	lsl.w	r0, r1, r4
 800395c:	4328      	orrs	r0, r5
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800395e:	0192      	lsls	r2, r2, #6
  hdac->Instance->CR = tmpreg1;
 8003960:	6018      	str	r0, [r3, #0]
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003962:	f3c1 0183 	ubfx	r1, r1, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003966:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800396a:	430a      	orrs	r2, r1
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 800396c:	f640 700f 	movw	r0, #3855	@ 0xf0f
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003970:	6819      	ldr	r1, [r3, #0]
 8003972:	25c0      	movs	r5, #192	@ 0xc0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8003974:	40a0      	lsls	r0, r4
 8003976:	40a2      	lsls	r2, r4
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003978:	fa05 f404 	lsl.w	r4, r5, r4
 800397c:	ea21 0104 	bic.w	r1, r1, r4
 8003980:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8003982:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 8003984:	ea21 0100 	bic.w	r1, r1, r0
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003988:	2400      	movs	r4, #0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 800398a:	430a      	orrs	r2, r1
  hdac->State = HAL_DAC_STATE_READY;
 800398c:	2101      	movs	r1, #1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 800398e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Return function status */
  return status;
 8003990:	4620      	mov	r0, r4
  hdac->State = HAL_DAC_STATE_READY;
 8003992:	7131      	strb	r1, [r6, #4]
  __HAL_UNLOCK(hdac);
 8003994:	7174      	strb	r4, [r6, #5]
}
 8003996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 800399a:	f7fe fd05 	bl	80023a8 <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800399e:	6833      	ldr	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80039a0:	4605      	mov	r5, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80039a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    if (Channel == DAC_CHANNEL_1)
 80039a4:	b154      	cbz	r4, 80039bc <HAL_DAC_ConfigChannel+0x148>
 80039a6:	e018      	b.n	80039da <HAL_DAC_ConfigChannel+0x166>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80039a8:	f7fe fcfe 	bl	80023a8 <HAL_GetTick>
 80039ac:	1b40      	subs	r0, r0, r5
 80039ae:	2801      	cmp	r0, #1
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80039b0:	6833      	ldr	r3, [r6, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80039b2:	d902      	bls.n	80039ba <HAL_DAC_ConfigChannel+0x146>
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80039b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039b6:	0411      	lsls	r1, r2, #16
 80039b8:	d448      	bmi.n	8003a4c <HAL_DAC_ConfigChannel+0x1d8>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80039ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039bc:	0412      	lsls	r2, r2, #16
 80039be:	d4f3      	bmi.n	80039a8 <HAL_DAC_ConfigChannel+0x134>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80039c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80039c4:	e00d      	b.n	80039e2 <HAL_DAC_ConfigChannel+0x16e>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80039c6:	f7fe fcef 	bl	80023a8 <HAL_GetTick>
 80039ca:	1b40      	subs	r0, r0, r5
 80039cc:	2801      	cmp	r0, #1
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80039ce:	6833      	ldr	r3, [r6, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80039d0:	d902      	bls.n	80039d8 <HAL_DAC_ConfigChannel+0x164>
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80039d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039d4:	2a00      	cmp	r2, #0
 80039d6:	db39      	blt.n	8003a4c <HAL_DAC_ConfigChannel+0x1d8>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80039d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039da:	2a00      	cmp	r2, #0
 80039dc:	dbf3      	blt.n	80039c6 <HAL_DAC_ConfigChannel+0x152>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80039de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039e0:	645a      	str	r2, [r3, #68]	@ 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80039e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80039e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039e6:	f004 0410 	and.w	r4, r4, #16
 80039ea:	f240 30ff 	movw	r0, #1023	@ 0x3ff
 80039ee:	40a0      	lsls	r0, r4
 80039f0:	40a1      	lsls	r1, r4
 80039f2:	ea22 0200 	bic.w	r2, r2, r0
 80039f6:	430a      	orrs	r2, r1
 80039f8:	649a      	str	r2, [r3, #72]	@ 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80039fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80039fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039fe:	20ff      	movs	r0, #255	@ 0xff
 8003a00:	40a0      	lsls	r0, r4
 8003a02:	40a1      	lsls	r1, r4
 8003a04:	ea22 0200 	bic.w	r2, r2, r0
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	e74b      	b.n	80038a8 <HAL_DAC_ConfigChannel+0x34>
    connectOnChip = 0x00000000UL;
 8003a10:	f04f 0c00 	mov.w	ip, #0
 8003a14:	e765      	b.n	80038e2 <HAL_DAC_ConfigChannel+0x6e>
    return HAL_ERROR;
 8003a16:	2001      	movs	r0, #1
}
 8003a18:	4770      	bx	lr
    return HAL_ERROR;
 8003a1a:	2001      	movs	r0, #1
}
 8003a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = DAC_MCR_MODE1_0;
 8003a20:	f04f 0c01 	mov.w	ip, #1
 8003a24:	e75d      	b.n	80038e2 <HAL_DAC_ConfigChannel+0x6e>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003a26:	f001 fccd 	bl	80053c4 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8003a5c <HAL_DAC_ConfigChannel+0x1e8>)
 8003a2c:	4298      	cmp	r0, r3
 8003a2e:	d905      	bls.n	8003a3c <HAL_DAC_ConfigChannel+0x1c8>
  hdac->Instance->MCR = tmpreg1;
 8003a30:	6833      	ldr	r3, [r6, #0]
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003a32:	f448 4800 	orr.w	r8, r8, #32768	@ 0x8000
 8003a36:	e77c      	b.n	8003932 <HAL_DAC_ConfigChannel+0xbe>
  __HAL_LOCK(hdac);
 8003a38:	2002      	movs	r0, #2
 8003a3a:	e7ac      	b.n	8003996 <HAL_DAC_ConfigChannel+0x122>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003a3c:	4a08      	ldr	r2, [pc, #32]	@ (8003a60 <HAL_DAC_ConfigChannel+0x1ec>)
  hdac->Instance->MCR = tmpreg1;
 8003a3e:	6833      	ldr	r3, [r6, #0]
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003a40:	4290      	cmp	r0, r2
 8003a42:	f67f af76 	bls.w	8003932 <HAL_DAC_ConfigChannel+0xbe>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003a46:	f448 4880 	orr.w	r8, r8, #16384	@ 0x4000
 8003a4a:	e772      	b.n	8003932 <HAL_DAC_ConfigChannel+0xbe>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003a4c:	6933      	ldr	r3, [r6, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003a4e:	2203      	movs	r2, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003a50:	f043 0308 	orr.w	r3, r3, #8
 8003a54:	6133      	str	r3, [r6, #16]
            return HAL_TIMEOUT;
 8003a56:	2003      	movs	r0, #3
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003a58:	7132      	strb	r2, [r6, #4]
            return HAL_TIMEOUT;
 8003a5a:	e79c      	b.n	8003996 <HAL_DAC_ConfigChannel+0x122>
 8003a5c:	09896800 	.word	0x09896800
 8003a60:	04c4b400 	.word	0x04c4b400

08003a64 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003a64:	2800      	cmp	r0, #0
 8003a66:	d076      	beq.n	8003b56 <HAL_DMA_Init+0xf2>
{
 8003a68:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a6a:	4a3c      	ldr	r2, [pc, #240]	@ (8003b5c <HAL_DMA_Init+0xf8>)
 8003a6c:	6804      	ldr	r4, [r0, #0]
 8003a6e:	4294      	cmp	r4, r2
 8003a70:	4603      	mov	r3, r0
 8003a72:	d95c      	bls.n	8003b2e <HAL_DMA_Init+0xca>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003a74:	493a      	ldr	r1, [pc, #232]	@ (8003b60 <HAL_DMA_Init+0xfc>)
 8003a76:	4a3b      	ldr	r2, [pc, #236]	@ (8003b64 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA2;
 8003a78:	483b      	ldr	r0, [pc, #236]	@ (8003b68 <HAL_DMA_Init+0x104>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003a7a:	4421      	add	r1, r4
 8003a7c:	fba2 2101 	umull	r2, r1, r2, r1
 8003a80:	0909      	lsrs	r1, r1, #4
 8003a82:	0089      	lsls	r1, r1, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a84:	2202      	movs	r2, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a86:	689d      	ldr	r5, [r3, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp |=  hdma->Init.Direction        |
 8003a8c:	68da      	ldr	r2, [r3, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003a8e:	4e35      	ldr	r6, [pc, #212]	@ (8003b64 <HAL_DMA_Init+0x100>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003a90:	4f36      	ldr	r7, [pc, #216]	@ (8003b6c <HAL_DMA_Init+0x108>)
 8003a92:	e9c3 0110 	strd	r0, r1, [r3, #64]	@ 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a96:	6918      	ldr	r0, [r3, #16]
  tmp |=  hdma->Init.Direction        |
 8003a98:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a9a:	4302      	orrs	r2, r0
 8003a9c:	6958      	ldr	r0, [r3, #20]
 8003a9e:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aa0:	6998      	ldr	r0, [r3, #24]
 8003aa2:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CCR;
 8003aa4:	6820      	ldr	r0, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003aa6:	f420 4cff 	bic.w	ip, r0, #32640	@ 0x7f80
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aaa:	69d8      	ldr	r0, [r3, #28]
 8003aac:	4302      	orrs	r2, r0
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003aae:	b2e0      	uxtb	r0, r4
 8003ab0:	3808      	subs	r0, #8
 8003ab2:	fba6 6000 	umull	r6, r0, r6, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ab6:	6a1e      	ldr	r6, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003ab8:	f02c 0c70 	bic.w	ip, ip, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8003abc:	4332      	orrs	r2, r6
  tmp |=  hdma->Init.Direction        |
 8003abe:	ea42 020c 	orr.w	r2, r2, ip
  hdma->Instance->CCR = tmp;
 8003ac2:	6022      	str	r2, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003ac4:	4e25      	ldr	r6, [pc, #148]	@ (8003b5c <HAL_DMA_Init+0xf8>)
 8003ac6:	4a2a      	ldr	r2, [pc, #168]	@ (8003b70 <HAL_DMA_Init+0x10c>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003ac8:	f3c0 1004 	ubfx	r0, r0, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003acc:	42b4      	cmp	r4, r6
 8003ace:	bf98      	it	ls
 8003ad0:	463a      	movls	r2, r7
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ad2:	f206 4679 	addw	r6, r6, #1145	@ 0x479
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003ad6:	2401      	movs	r4, #1
 8003ad8:	fa04 f000 	lsl.w	r0, r4, r0
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003adc:	64de      	str	r6, [r3, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ade:	f5b5 4f80 	cmp.w	r5, #16384	@ 0x4000
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003ae2:	eb01 0602 	add.w	r6, r1, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003ae6:	6518      	str	r0, [r3, #80]	@ 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003ae8:	649e      	str	r6, [r3, #72]	@ 0x48
 8003aea:	ea4f 0191 	mov.w	r1, r1, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003aee:	d027      	beq.n	8003b40 <HAL_DMA_Init+0xdc>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003af0:	685e      	ldr	r6, [r3, #4]
 8003af2:	b2f5      	uxtb	r5, r6
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003af4:	3e01      	subs	r6, #1
 8003af6:	2e03      	cmp	r6, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003af8:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003afc:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003b00:	d824      	bhi.n	8003b4c <HAL_DMA_Init+0xe8>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b02:	4a1c      	ldr	r2, [pc, #112]	@ (8003b74 <HAL_DMA_Init+0x110>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b04:	481c      	ldr	r0, [pc, #112]	@ (8003b78 <HAL_DMA_Init+0x114>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b06:	442a      	add	r2, r5
 8003b08:	0092      	lsls	r2, r2, #2

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003b0a:	3d01      	subs	r5, #1
 8003b0c:	40ac      	lsls	r4, r5
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b0e:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b10:	e9c3 2015 	strd	r2, r0, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003b14:	65dc      	str	r4, [r3, #92]	@ 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b16:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b18:	4a18      	ldr	r2, [pc, #96]	@ (8003b7c <HAL_DMA_Init+0x118>)
 8003b1a:	6454      	str	r4, [r2, #68]	@ 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b1c:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8003b1e:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b20:	63d8      	str	r0, [r3, #60]	@ 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8003b22:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8003b26:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 8003b2a:	bcf0      	pop	{r4, r5, r6, r7}
 8003b2c:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003b2e:	4914      	ldr	r1, [pc, #80]	@ (8003b80 <HAL_DMA_Init+0x11c>)
 8003b30:	4a0c      	ldr	r2, [pc, #48]	@ (8003b64 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA1;
 8003b32:	4814      	ldr	r0, [pc, #80]	@ (8003b84 <HAL_DMA_Init+0x120>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003b34:	4421      	add	r1, r4
 8003b36:	fba2 2101 	umull	r2, r1, r2, r1
 8003b3a:	0909      	lsrs	r1, r1, #4
 8003b3c:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 8003b3e:	e7a1      	b.n	8003a84 <HAL_DMA_Init+0x20>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003b40:	2400      	movs	r4, #0
 8003b42:	605c      	str	r4, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b44:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b48:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    hdma->DMAmuxRequestGen = 0U;
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	e9c3 2215 	strd	r2, r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b52:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b54:	e7e2      	b.n	8003b1c <HAL_DMA_Init+0xb8>
    return HAL_ERROR;
 8003b56:	2001      	movs	r0, #1
}
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40020407 	.word	0x40020407
 8003b60:	bffdfbf8 	.word	0xbffdfbf8
 8003b64:	cccccccd 	.word	0xcccccccd
 8003b68:	40020400 	.word	0x40020400
 8003b6c:	40020800 	.word	0x40020800
 8003b70:	40020820 	.word	0x40020820
 8003b74:	1000823f 	.word	0x1000823f
 8003b78:	40020940 	.word	0x40020940
 8003b7c:	40020900 	.word	0x40020900
 8003b80:	bffdfff8 	.word	0xbffdfff8
 8003b84:	40020000 	.word	0x40020000

08003b88 <HAL_DMA_Start_IT>:
{
 8003b88:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 8003b8a:	f890 4024 	ldrb.w	r4, [r0, #36]	@ 0x24
 8003b8e:	2c01      	cmp	r4, #1
 8003b90:	d009      	beq.n	8003ba6 <HAL_DMA_Start_IT+0x1e>
 8003b92:	2401      	movs	r4, #1
 8003b94:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8003b98:	f890 4025 	ldrb.w	r4, [r0, #37]	@ 0x25
 8003b9c:	2c01      	cmp	r4, #1
 8003b9e:	d005      	beq.n	8003bac <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  __HAL_LOCK(hdma);
 8003ba6:	2002      	movs	r0, #2
}
 8003ba8:	bcf0      	pop	{r4, r5, r6, r7}
 8003baa:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bac:	2402      	movs	r4, #2
 8003bae:	f880 4025 	strb.w	r4, [r0, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bb2:	2400      	movs	r4, #0
 8003bb4:	63c4      	str	r4, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003bb6:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bb8:	6cc6      	ldr	r6, [r0, #76]	@ 0x4c
    __HAL_DMA_DISABLE(hdma);
 8003bba:	6825      	ldr	r5, [r4, #0]
 8003bbc:	f025 0501 	bic.w	r5, r5, #1
 8003bc0:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bc2:	e9d0 7514 	ldrd	r7, r5, [r0, #80]	@ 0x50
 8003bc6:	6077      	str	r7, [r6, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 8003bc8:	b115      	cbz	r5, 8003bd0 <HAL_DMA_Start_IT+0x48>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bca:	e9d0 6716 	ldrd	r6, r7, [r0, #88]	@ 0x58
 8003bce:	6077      	str	r7, [r6, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003bd0:	6c46      	ldr	r6, [r0, #68]	@ 0x44
 8003bd2:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 8003bd4:	f006 0c1f 	and.w	ip, r6, #31
 8003bd8:	2601      	movs	r6, #1
 8003bda:	fa06 f60c 	lsl.w	r6, r6, ip
 8003bde:	607e      	str	r6, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8003be0:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003be2:	6883      	ldr	r3, [r0, #8]
 8003be4:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 8003be6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->Instance->CPAR = DstAddress;
 8003be8:	bf0b      	itete	eq
 8003bea:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8003bec:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003bee:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8003bf0:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8003bf2:	b1bb      	cbz	r3, 8003c24 <HAL_DMA_Start_IT+0x9c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bf4:	6823      	ldr	r3, [r4, #0]
 8003bf6:	f043 030e 	orr.w	r3, r3, #14
 8003bfa:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003bfc:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	03d2      	lsls	r2, r2, #15
 8003c02:	d503      	bpl.n	8003c0c <HAL_DMA_Start_IT+0x84>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c0a:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8003c0c:	b11d      	cbz	r5, 8003c16 <HAL_DMA_Start_IT+0x8e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003c0e:	682b      	ldr	r3, [r5, #0]
 8003c10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c14:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8003c16:	6823      	ldr	r3, [r4, #0]
 8003c18:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8003c1c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003c1e:	6023      	str	r3, [r4, #0]
}
 8003c20:	bcf0      	pop	{r4, r5, r6, r7}
 8003c22:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c24:	6823      	ldr	r3, [r4, #0]
 8003c26:	f023 0304 	bic.w	r3, r3, #4
 8003c2a:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c2c:	6823      	ldr	r3, [r4, #0]
 8003c2e:	f043 030a 	orr.w	r3, r3, #10
 8003c32:	6023      	str	r3, [r4, #0]
 8003c34:	e7e2      	b.n	8003bfc <HAL_DMA_Start_IT+0x74>
 8003c36:	bf00      	nop

08003c38 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c38:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8003c3c:	2a02      	cmp	r2, #2
{
 8003c3e:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c40:	d009      	beq.n	8003c56 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c42:	2204      	movs	r2, #4
 8003c44:	63c2      	str	r2, [r0, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8003c46:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 8003c48:	2200      	movs	r2, #0
    status = HAL_ERROR;
 8003c4a:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 8003c4c:	f883 1025 	strb.w	r1, [r3, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 8003c50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8003c54:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c56:	6802      	ldr	r2, [r0, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c58:	6c59      	ldr	r1, [r3, #68]	@ 0x44
{
 8003c5a:	b430      	push	{r4, r5}
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c5c:	6c84      	ldr	r4, [r0, #72]	@ 0x48
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c5e:	6810      	ldr	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c60:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c62:	f020 000e 	bic.w	r0, r0, #14
 8003c66:	6010      	str	r0, [r2, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c68:	6820      	ldr	r0, [r4, #0]
 8003c6a:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 8003c6e:	6020      	str	r0, [r4, #0]
     __HAL_DMA_DISABLE(hdma);
 8003c70:	6810      	ldr	r0, [r2, #0]
 8003c72:	f020 0001 	bic.w	r0, r0, #1
 8003c76:	6010      	str	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c78:	f001 011f 	and.w	r1, r1, #31
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	408a      	lsls	r2, r1
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c80:	e9d3 4114 	ldrd	r4, r1, [r3, #80]	@ 0x50
 8003c84:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c86:	606a      	str	r2, [r5, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c88:	6044      	str	r4, [r0, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 8003c8a:	b131      	cbz	r1, 8003c9a <HAL_DMA_Abort+0x62>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c8c:	680a      	ldr	r2, [r1, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c8e:	e9d3 0416 	ldrd	r0, r4, [r3, #88]	@ 0x58
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c92:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c96:	600a      	str	r2, [r1, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c98:	6044      	str	r4, [r0, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8003c9a:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 8003c9c:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 8003c9e:	f883 1025 	strb.w	r1, [r3, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 8003ca2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  HAL_StatusTypeDef status = HAL_OK;
 8003ca6:	2000      	movs	r0, #0
}
 8003ca8:	bc30      	pop	{r4, r5}
 8003caa:	4770      	bx	lr

08003cac <HAL_DMA_Abort_IT>:
{
 8003cac:	b538      	push	{r3, r4, r5, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003cae:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d009      	beq.n	8003cca <HAL_DMA_Abort_IT+0x1e>
    hdma->State = HAL_DMA_STATE_READY;
 8003cb6:	2301      	movs	r3, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cb8:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8003cba:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cbc:	63c1      	str	r1, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8003cbe:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8003cc2:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    status = HAL_ERROR;
 8003cc6:	4618      	mov	r0, r3
}
 8003cc8:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cca:	6803      	ldr	r3, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ccc:	6c84      	ldr	r4, [r0, #72]	@ 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cce:	6819      	ldr	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003cd0:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8003cd2:	6c05      	ldr	r5, [r0, #64]	@ 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cd4:	f021 010e 	bic.w	r1, r1, #14
 8003cd8:	6019      	str	r1, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003cda:	6819      	ldr	r1, [r3, #0]
 8003cdc:	f021 0101 	bic.w	r1, r1, #1
 8003ce0:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ce2:	6823      	ldr	r3, [r4, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ce4:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ce6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cea:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003cec:	f002 021f 	and.w	r2, r2, #31
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	4093      	lsls	r3, r2
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cf4:	e9d0 4214 	ldrd	r4, r2, [r0, #80]	@ 0x50
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003cf8:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cfa:	604c      	str	r4, [r1, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8003cfc:	b132      	cbz	r2, 8003d0c <HAL_DMA_Abort_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003cfe:	6813      	ldr	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d00:	e9d0 1416 	ldrd	r1, r4, [r0, #88]	@ 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d08:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d0a:	604c      	str	r4, [r1, #4]
    if (hdma->XferAbortCallback != NULL)
 8003d0c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8003d0e:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8003d10:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_READY;
 8003d12:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8003d16:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    if (hdma->XferAbortCallback != NULL)
 8003d1a:	b103      	cbz	r3, 8003d1e <HAL_DMA_Abort_IT+0x72>
      hdma->XferAbortCallback(hdma);
 8003d1c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003d1e:	2000      	movs	r0, #0
}
 8003d20:	bd38      	pop	{r3, r4, r5, pc}
 8003d22:	bf00      	nop

08003d24 <HAL_DMA_IRQHandler>:
{
 8003d24:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003d26:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d28:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8003d2a:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d2c:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003d2e:	682c      	ldr	r4, [r5, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003d30:	f003 031f 	and.w	r3, r3, #31
 8003d34:	2204      	movs	r2, #4
 8003d36:	409a      	lsls	r2, r3
 8003d38:	420a      	tst	r2, r1
 8003d3a:	d00e      	beq.n	8003d5a <HAL_DMA_IRQHandler+0x36>
 8003d3c:	f014 0f04 	tst.w	r4, #4
 8003d40:	d00b      	beq.n	8003d5a <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d42:	682b      	ldr	r3, [r5, #0]
 8003d44:	069b      	lsls	r3, r3, #26
 8003d46:	d403      	bmi.n	8003d50 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d48:	682b      	ldr	r3, [r5, #0]
 8003d4a:	f023 0304 	bic.w	r3, r3, #4
 8003d4e:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8003d50:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d52:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8003d54:	b1cb      	cbz	r3, 8003d8a <HAL_DMA_IRQHandler+0x66>
}
 8003d56:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8003d58:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	409a      	lsls	r2, r3
 8003d5e:	420a      	tst	r2, r1
 8003d60:	d015      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x6a>
           && (0U != (source_it & DMA_IT_TC)))
 8003d62:	f014 0f02 	tst.w	r4, #2
 8003d66:	d012      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d68:	682b      	ldr	r3, [r5, #0]
 8003d6a:	0699      	lsls	r1, r3, #26
 8003d6c:	d406      	bmi.n	8003d7c <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d6e:	682b      	ldr	r3, [r5, #0]
 8003d70:	f023 030a 	bic.w	r3, r3, #10
 8003d74:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    if (hdma->XferCpltCallback != NULL)
 8003d7c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d7e:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8003d80:	2100      	movs	r1, #0
 8003d82:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    if (hdma->XferCpltCallback != NULL)
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1e5      	bne.n	8003d56 <HAL_DMA_IRQHandler+0x32>
}
 8003d8a:	bc70      	pop	{r4, r5, r6}
 8003d8c:	4770      	bx	lr
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003d8e:	2208      	movs	r2, #8
 8003d90:	409a      	lsls	r2, r3
 8003d92:	420a      	tst	r2, r1
 8003d94:	d0f9      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x66>
           && (0U != (source_it & DMA_IT_TE)))
 8003d96:	0722      	lsls	r2, r4, #28
 8003d98:	d5f7      	bpl.n	8003d8a <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d9a:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8003d9c:	6b41      	ldr	r1, [r0, #52]	@ 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d9e:	f022 020e 	bic.w	r2, r2, #14
 8003da2:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003da4:	2201      	movs	r2, #1
 8003da6:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 8003daa:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003dac:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003dae:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8003db0:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8003db4:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    if (hdma->XferErrorCallback != NULL)
 8003db8:	2900      	cmp	r1, #0
 8003dba:	d0e6      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x66>
}
 8003dbc:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8003dbe:	4708      	bx	r1

08003dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003dc4:	680c      	ldr	r4, [r1, #0]
{
 8003dc6:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003dc8:	2c00      	cmp	r4, #0
 8003dca:	f000 8089 	beq.w	8003ee0 <HAL_GPIO_Init+0x120>
  uint32_t position = 0x00U;
 8003dce:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003dd0:	f04f 0b01 	mov.w	fp, #1
 8003dd4:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 8003dd8:	ea1e 0a04 	ands.w	sl, lr, r4
 8003ddc:	d07b      	beq.n	8003ed6 <HAL_GPIO_Init+0x116>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003dde:	684d      	ldr	r5, [r1, #4]
 8003de0:	f005 0203 	and.w	r2, r5, #3
 8003de4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003de8:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003dea:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003dee:	fa06 f70c 	lsl.w	r7, r6, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003df2:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003df6:	ea6f 0707 	mvn.w	r7, r7
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003dfa:	d974      	bls.n	8003ee6 <HAL_GPIO_Init+0x126>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dfc:	2a03      	cmp	r2, #3
 8003dfe:	f040 80b0 	bne.w	8003f62 <HAL_GPIO_Init+0x1a2>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e02:	fa02 f20c 	lsl.w	r2, r2, ip
      temp = GPIOx->MODER;
 8003e06:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e0a:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e0e:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e10:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8003e14:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e16:	d05e      	beq.n	8003ed6 <HAL_GPIO_Init+0x116>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e18:	4f66      	ldr	r7, [pc, #408]	@ (8003fb4 <HAL_GPIO_Init+0x1f4>)
 8003e1a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003e1c:	f042 0201 	orr.w	r2, r2, #1
 8003e20:	663a      	str	r2, [r7, #96]	@ 0x60
 8003e22:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003e24:	f002 0201 	and.w	r2, r2, #1
 8003e28:	9203      	str	r2, [sp, #12]
 8003e2a:	9a03      	ldr	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e2c:	f023 0203 	bic.w	r2, r3, #3
 8003e30:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8003e34:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e38:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8003e3c:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e3e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003e42:	260f      	movs	r6, #15
 8003e44:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e48:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e4c:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e50:	d01d      	beq.n	8003e8e <HAL_GPIO_Init+0xce>
 8003e52:	4e59      	ldr	r6, [pc, #356]	@ (8003fb8 <HAL_GPIO_Init+0x1f8>)
 8003e54:	42b0      	cmp	r0, r6
 8003e56:	f000 8097 	beq.w	8003f88 <HAL_GPIO_Init+0x1c8>
 8003e5a:	4e58      	ldr	r6, [pc, #352]	@ (8003fbc <HAL_GPIO_Init+0x1fc>)
 8003e5c:	42b0      	cmp	r0, r6
 8003e5e:	f000 809a 	beq.w	8003f96 <HAL_GPIO_Init+0x1d6>
 8003e62:	f8df e160 	ldr.w	lr, [pc, #352]	@ 8003fc4 <HAL_GPIO_Init+0x204>
 8003e66:	4570      	cmp	r0, lr
 8003e68:	f000 8087 	beq.w	8003f7a <HAL_GPIO_Init+0x1ba>
 8003e6c:	f8df e158 	ldr.w	lr, [pc, #344]	@ 8003fc8 <HAL_GPIO_Init+0x208>
 8003e70:	4570      	cmp	r0, lr
 8003e72:	f000 8097 	beq.w	8003fa4 <HAL_GPIO_Init+0x1e4>
 8003e76:	f8df e154 	ldr.w	lr, [pc, #340]	@ 8003fcc <HAL_GPIO_Init+0x20c>
 8003e7a:	4570      	cmp	r0, lr
 8003e7c:	bf0c      	ite	eq
 8003e7e:	f04f 0e05 	moveq.w	lr, #5
 8003e82:	f04f 0e06 	movne.w	lr, #6
 8003e86:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003e8a:	ea47 070c 	orr.w	r7, r7, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e8e:	6097      	str	r7, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e90:	4a4b      	ldr	r2, [pc, #300]	@ (8003fc0 <HAL_GPIO_Init+0x200>)
 8003e92:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e94:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 8003e96:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8003e9a:	4e49      	ldr	r6, [pc, #292]	@ (8003fc0 <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8003e9c:	bf54      	ite	pl
 8003e9e:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8003ea0:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 8003ea4:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8003ea6:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ea8:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8003eaa:	4e45      	ldr	r6, [pc, #276]	@ (8003fc0 <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8003eac:	bf54      	ite	pl
 8003eae:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8003eb0:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 8003eb4:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR1;
 8003eb6:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003eb8:	03ae      	lsls	r6, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8003eba:	4e41      	ldr	r6, [pc, #260]	@ (8003fc0 <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8003ebc:	bf54      	ite	pl
 8003ebe:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8003ec0:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR1 = temp;
 8003ec4:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003ec6:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ec8:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8003eca:	4d3d      	ldr	r5, [pc, #244]	@ (8003fc0 <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8003ecc:	bf54      	ite	pl
 8003ece:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8003ed0:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 8003ed4:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 8003ed6:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003ed8:	fa34 f203 	lsrs.w	r2, r4, r3
 8003edc:	f47f af7a 	bne.w	8003dd4 <HAL_GPIO_Init+0x14>
  }
}
 8003ee0:	b005      	add	sp, #20
 8003ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8003ee6:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003eea:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003eec:	ea09 0907 	and.w	r9, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ef0:	fa06 f80c 	lsl.w	r8, r6, ip
 8003ef4:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8003ef8:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8003efc:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f00:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f02:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f06:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 8003f0a:	fa0e fe03 	lsl.w	lr, lr, r3
 8003f0e:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 8003f12:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 8003f16:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f1a:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f1e:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f22:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f26:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8003f28:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f2c:	f47f af69 	bne.w	8003e02 <HAL_GPIO_Init+0x42>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f30:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8003f32:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f36:	f003 0e07 	and.w	lr, r3, #7
 8003f3a:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8003f3e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f42:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3U];
 8003f46:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f4a:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f4c:	260f      	movs	r6, #15
 8003f4e:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f52:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f54:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f58:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 8003f5c:	f8c8 e020 	str.w	lr, [r8, #32]
 8003f60:	e74f      	b.n	8003e02 <HAL_GPIO_Init+0x42>
        temp = GPIOx->PUPDR;
 8003f62:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f66:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f68:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f6c:	fa06 fe0c 	lsl.w	lr, r6, ip
 8003f70:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->PUPDR = temp;
 8003f74:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f78:	e743      	b.n	8003e02 <HAL_GPIO_Init+0x42>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f7a:	f04f 0e03 	mov.w	lr, #3
 8003f7e:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003f82:	ea47 070c 	orr.w	r7, r7, ip
 8003f86:	e782      	b.n	8003e8e <HAL_GPIO_Init+0xce>
 8003f88:	f04f 0e01 	mov.w	lr, #1
 8003f8c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003f90:	ea47 070c 	orr.w	r7, r7, ip
 8003f94:	e77b      	b.n	8003e8e <HAL_GPIO_Init+0xce>
 8003f96:	f04f 0e02 	mov.w	lr, #2
 8003f9a:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003f9e:	ea47 070c 	orr.w	r7, r7, ip
 8003fa2:	e774      	b.n	8003e8e <HAL_GPIO_Init+0xce>
 8003fa4:	f04f 0e04 	mov.w	lr, #4
 8003fa8:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003fac:	ea47 070c 	orr.w	r7, r7, ip
 8003fb0:	e76d      	b.n	8003e8e <HAL_GPIO_Init+0xce>
 8003fb2:	bf00      	nop
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	48000400 	.word	0x48000400
 8003fbc:	48000800 	.word	0x48000800
 8003fc0:	40010400 	.word	0x40010400
 8003fc4:	48000c00 	.word	0x48000c00
 8003fc8:	48001000 	.word	0x48001000
 8003fcc:	48001400 	.word	0x48001400

08003fd0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003fd0:	6903      	ldr	r3, [r0, #16]
 8003fd2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003fd4:	bf14      	ite	ne
 8003fd6:	2001      	movne	r0, #1
 8003fd8:	2000      	moveq	r0, #0
 8003fda:	4770      	bx	lr

08003fdc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fdc:	b10a      	cbz	r2, 8003fe2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fde:	6181      	str	r1, [r0, #24]
 8003fe0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fe2:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop

08003fe8 <I2C_WaitOnFlagUntilTimeout.constprop.0>:
  * @param  Status The actual Flag status (SET or RESET).
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 8003fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
                                                    uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fec:	6803      	ldr	r3, [r0, #0]
 8003fee:	699a      	ldr	r2, [r3, #24]
 8003ff0:	0414      	lsls	r4, r2, #16
 8003ff2:	f140 808a 	bpl.w	800410a <I2C_WaitOnFlagUntilTimeout.constprop.0+0x122>
 8003ff6:	4604      	mov	r4, r0
 8003ff8:	4688      	mov	r8, r1
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ffa:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ffe:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004000:	f016 0610 	ands.w	r6, r6, #16
 8004004:	f000 8084 	beq.w	8004110 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x128>
  uint32_t error_code = 0;
 8004008:	2600      	movs	r6, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800400a:	f8c3 901c 	str.w	r9, [r3, #28]
  uint32_t tickstart = Tickstart;
 800400e:	4645      	mov	r5, r8
  HAL_StatusTypeDef status = HAL_OK;
 8004010:	4637      	mov	r7, r6

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004012:	699a      	ldr	r2, [r3, #24]
 8004014:	0692      	lsls	r2, r2, #26
 8004016:	d429      	bmi.n	800406c <I2C_WaitOnFlagUntilTimeout.constprop.0+0x84>
 8004018:	bb5f      	cbnz	r7, 8004072 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x8a>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800401a:	f7fe f9c5 	bl	80023a8 <HAL_GetTick>
 800401e:	1b40      	subs	r0, r0, r5
 8004020:	2819      	cmp	r0, #25
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004022:	6823      	ldr	r3, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004024:	d9f5      	bls.n	8004012 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004026:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8004028:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800402c:	6999      	ldr	r1, [r3, #24]
 800402e:	0409      	lsls	r1, r1, #16
          tmp2 = hi2c->Mode;
 8004030:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004032:	d50b      	bpl.n	800404c <I2C_WaitOnFlagUntilTimeout.constprop.0+0x64>
 8004034:	0440      	lsls	r0, r0, #17
 8004036:	d409      	bmi.n	800404c <I2C_WaitOnFlagUntilTimeout.constprop.0+0x64>
              (tmp1 != I2C_CR2_STOP) && \
 8004038:	2a20      	cmp	r2, #32
 800403a:	d007      	beq.n	800404c <I2C_WaitOnFlagUntilTimeout.constprop.0+0x64>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004042:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004044:	f7fe f9b0 	bl	80023a8 <HAL_GetTick>
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004048:	6823      	ldr	r3, [r4, #0]
            tickstart = HAL_GetTick();
 800404a:	4605      	mov	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800404c:	699a      	ldr	r2, [r3, #24]
 800404e:	0691      	lsls	r1, r2, #26
 8004050:	d4df      	bmi.n	8004012 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x2a>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004052:	f7fe f9a9 	bl	80023a8 <HAL_GetTick>
 8004056:	1b40      	subs	r0, r0, r5
 8004058:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800405a:	6823      	ldr	r3, [r4, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800405c:	d9f6      	bls.n	800404c <I2C_WaitOnFlagUntilTimeout.constprop.0+0x64>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800405e:	699a      	ldr	r2, [r3, #24]
 8004060:	0692      	lsls	r2, r2, #26
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004062:	f04f 0620 	mov.w	r6, #32

              status = HAL_ERROR;
 8004066:	f04f 0701 	mov.w	r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800406a:	d5d5      	bpl.n	8004018 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x30>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800406c:	b90f      	cbnz	r7, 8004072 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x8a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800406e:	2220      	movs	r2, #32
 8004070:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004072:	f046 0604 	orr.w	r6, r6, #4

    status = HAL_ERROR;
 8004076:	2501      	movs	r5, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004078:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800407a:	05d7      	lsls	r7, r2, #23
 800407c:	d531      	bpl.n	80040e2 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xfa>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800407e:	f44f 7180 	mov.w	r1, #256	@ 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004082:	0550      	lsls	r0, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004084:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8004086:	f046 0601 	orr.w	r6, r6, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800408a:	d504      	bpl.n	8004096 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xae>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800408c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004090:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8004092:	f046 0608 	orr.w	r6, r6, #8

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004096:	0592      	lsls	r2, r2, #22
 8004098:	d504      	bpl.n	80040a4 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xbc>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800409a:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800409e:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80040a2:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80040a4:	699a      	ldr	r2, [r3, #24]
 80040a6:	0795      	lsls	r5, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 80040a8:	bf44      	itt	mi
 80040aa:	2200      	movmi	r2, #0
 80040ac:	629a      	strmi	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040ae:	699a      	ldr	r2, [r3, #24]
 80040b0:	07d0      	lsls	r0, r2, #31
 80040b2:	d403      	bmi.n	80040bc <I2C_WaitOnFlagUntilTimeout.constprop.0+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80040b4:	699a      	ldr	r2, [r3, #24]
 80040b6:	f042 0201 	orr.w	r2, r2, #1
 80040ba:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	481a      	ldr	r0, [pc, #104]	@ (8004128 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x140>)
 80040c0:	4002      	ands	r2, r0
 80040c2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80040c4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80040c6:	2120      	movs	r1, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c8:	2200      	movs	r2, #0
    hi2c->ErrorCode |= error_code;
 80040ca:	4333      	orrs	r3, r6
 80040cc:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80040ce:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d2:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 80040d6:	2300      	movs	r3, #0
 80040d8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80040dc:	2001      	movs	r0, #1
}
 80040de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80040e2:	0551      	lsls	r1, r2, #21
 80040e4:	d4d2      	bmi.n	800408c <I2C_WaitOnFlagUntilTimeout.constprop.0+0xa4>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80040e6:	0597      	lsls	r7, r2, #22
 80040e8:	d4d7      	bmi.n	800409a <I2C_WaitOnFlagUntilTimeout.constprop.0+0xb2>
  if (status != HAL_OK)
 80040ea:	2d00      	cmp	r5, #0
 80040ec:	d1da      	bne.n	80040a4 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xbc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ee:	f7fe f95b 	bl	80023a8 <HAL_GetTick>
 80040f2:	eba0 0008 	sub.w	r0, r0, r8
 80040f6:	2819      	cmp	r0, #25
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80040f8:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040fa:	d902      	bls.n	8004102 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x11a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80040fc:	699a      	ldr	r2, [r3, #24]
 80040fe:	0411      	lsls	r1, r2, #16
 8004100:	d408      	bmi.n	8004114 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x12c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004102:	699a      	ldr	r2, [r3, #24]
 8004104:	0412      	lsls	r2, r2, #16
 8004106:	f53f af7a 	bmi.w	8003ffe <I2C_WaitOnFlagUntilTimeout.constprop.0+0x16>
  return HAL_OK;
 800410a:	2000      	movs	r0, #0
}
 800410c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8004110:	4635      	mov	r5, r6
 8004112:	e7b1      	b.n	8004078 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x90>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004114:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004116:	2220      	movs	r2, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004118:	4313      	orrs	r3, r2
 800411a:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800411c:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004120:	f884 5042 	strb.w	r5, [r4, #66]	@ 0x42
          return HAL_ERROR;
 8004124:	e7d7      	b.n	80040d6 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xee>
 8004126:	bf00      	nop
 8004128:	fe00e800 	.word	0xfe00e800

0800412c <I2C_WaitOnFlagUntilTimeout>:
{
 800412c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004130:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004132:	6800      	ldr	r0, [r0, #0]
{
 8004134:	4688      	mov	r8, r1
 8004136:	4617      	mov	r7, r2
 8004138:	461e      	mov	r6, r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800413a:	f04f 0a10 	mov.w	sl, #16
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800413e:	6983      	ldr	r3, [r0, #24]
 8004140:	ea38 0303 	bics.w	r3, r8, r3
 8004144:	bf0c      	ite	eq
 8004146:	2301      	moveq	r3, #1
 8004148:	2300      	movne	r3, #0
 800414a:	42bb      	cmp	r3, r7
 800414c:	d16a      	bne.n	8004224 <I2C_WaitOnFlagUntilTimeout+0xf8>
  uint32_t itflag   = hi2c->Instance->ISR;
 800414e:	6984      	ldr	r4, [r0, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004150:	f014 0410 	ands.w	r4, r4, #16
 8004154:	d064      	beq.n	8004220 <I2C_WaitOnFlagUntilTimeout+0xf4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004156:	1c71      	adds	r1, r6, #1
 8004158:	f8c0 a01c 	str.w	sl, [r0, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800415c:	d165      	bne.n	800422a <I2C_WaitOnFlagUntilTimeout+0xfe>
 800415e:	6983      	ldr	r3, [r0, #24]
 8004160:	069a      	lsls	r2, r3, #26
 8004162:	d5fc      	bpl.n	800415e <I2C_WaitOnFlagUntilTimeout+0x32>
  uint32_t error_code = 0;
 8004164:	2400      	movs	r4, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004166:	2320      	movs	r3, #32
 8004168:	61c3      	str	r3, [r0, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800416a:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 800416e:	2201      	movs	r2, #1
  itflag = hi2c->Instance->ISR;
 8004170:	6983      	ldr	r3, [r0, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004172:	05d9      	lsls	r1, r3, #23
 8004174:	d531      	bpl.n	80041da <I2C_WaitOnFlagUntilTimeout+0xae>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004176:	f44f 7280 	mov.w	r2, #256	@ 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800417a:	055e      	lsls	r6, r3, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800417c:	61c2      	str	r2, [r0, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 800417e:	f044 0401 	orr.w	r4, r4, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004182:	d504      	bpl.n	800418e <I2C_WaitOnFlagUntilTimeout+0x62>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004184:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004188:	61c2      	str	r2, [r0, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 800418a:	f044 0408 	orr.w	r4, r4, #8
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800418e:	059a      	lsls	r2, r3, #22
 8004190:	d504      	bpl.n	800419c <I2C_WaitOnFlagUntilTimeout+0x70>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004192:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8004196:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800419a:	61c3      	str	r3, [r0, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800419c:	6983      	ldr	r3, [r0, #24]
 800419e:	0799      	lsls	r1, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 80041a0:	bf44      	itt	mi
 80041a2:	2300      	movmi	r3, #0
 80041a4:	6283      	strmi	r3, [r0, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041a6:	6983      	ldr	r3, [r0, #24]
 80041a8:	07da      	lsls	r2, r3, #31
 80041aa:	d403      	bmi.n	80041b4 <I2C_WaitOnFlagUntilTimeout+0x88>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80041ac:	6983      	ldr	r3, [r0, #24]
 80041ae:	f043 0301 	orr.w	r3, r3, #1
 80041b2:	6183      	str	r3, [r0, #24]
    I2C_RESET_CR2(hi2c);
 80041b4:	6843      	ldr	r3, [r0, #4]
 80041b6:	4a3b      	ldr	r2, [pc, #236]	@ (80042a4 <I2C_WaitOnFlagUntilTimeout+0x178>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	6043      	str	r3, [r0, #4]
    hi2c->ErrorCode |= error_code;
 80041bc:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80041be:	2120      	movs	r1, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c0:	2200      	movs	r2, #0
    hi2c->ErrorCode |= error_code;
 80041c2:	4323      	orrs	r3, r4
 80041c4:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80041c6:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ca:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 80041ce:	2300      	movs	r3, #0
 80041d0:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
      return HAL_ERROR;
 80041d4:	2001      	movs	r0, #1
}
 80041d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80041da:	0559      	lsls	r1, r3, #21
 80041dc:	d4d2      	bmi.n	8004184 <I2C_WaitOnFlagUntilTimeout+0x58>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80041de:	059b      	lsls	r3, r3, #22
 80041e0:	d4d7      	bmi.n	8004192 <I2C_WaitOnFlagUntilTimeout+0x66>
  if (status != HAL_OK)
 80041e2:	2a00      	cmp	r2, #0
 80041e4:	d1da      	bne.n	800419c <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 80041e6:	1c73      	adds	r3, r6, #1
 80041e8:	d0a9      	beq.n	800413e <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ea:	f7fe f8dd 	bl	80023a8 <HAL_GetTick>
 80041ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80041f0:	1ac3      	subs	r3, r0, r3
 80041f2:	42b3      	cmp	r3, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80041f4:	6828      	ldr	r0, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f6:	d801      	bhi.n	80041fc <I2C_WaitOnFlagUntilTimeout+0xd0>
 80041f8:	2e00      	cmp	r6, #0
 80041fa:	d19e      	bne.n	800413a <I2C_WaitOnFlagUntilTimeout+0xe>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80041fc:	6983      	ldr	r3, [r0, #24]
 80041fe:	ea38 0303 	bics.w	r3, r8, r3
 8004202:	bf0c      	ite	eq
 8004204:	2301      	moveq	r3, #1
 8004206:	2300      	movne	r3, #0
 8004208:	42bb      	cmp	r3, r7
 800420a:	d196      	bne.n	800413a <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800420c:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800420e:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004210:	430b      	orrs	r3, r1
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004212:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004214:	646b      	str	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004216:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800421a:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
          return HAL_ERROR;
 800421e:	e7d6      	b.n	80041ce <I2C_WaitOnFlagUntilTimeout+0xa2>
  HAL_StatusTypeDef status = HAL_OK;
 8004220:	4622      	mov	r2, r4
 8004222:	e7a5      	b.n	8004170 <I2C_WaitOnFlagUntilTimeout+0x44>
  return HAL_OK;
 8004224:	2000      	movs	r0, #0
}
 8004226:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t error_code = 0;
 800422a:	2400      	movs	r4, #0
  uint32_t tickstart = Tickstart;
 800422c:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
  HAL_StatusTypeDef status = HAL_OK;
 8004230:	46a3      	mov	fp, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004232:	6983      	ldr	r3, [r0, #24]
 8004234:	069b      	lsls	r3, r3, #26
 8004236:	d42f      	bmi.n	8004298 <I2C_WaitOnFlagUntilTimeout+0x16c>
 8004238:	f1bb 0f00 	cmp.w	fp, #0
 800423c:	d195      	bne.n	800416a <I2C_WaitOnFlagUntilTimeout+0x3e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800423e:	f7fe f8b3 	bl	80023a8 <HAL_GetTick>
 8004242:	eba0 0009 	sub.w	r0, r0, r9
 8004246:	4286      	cmp	r6, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004248:	6828      	ldr	r0, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800424a:	d301      	bcc.n	8004250 <I2C_WaitOnFlagUntilTimeout+0x124>
 800424c:	2e00      	cmp	r6, #0
 800424e:	d1f0      	bne.n	8004232 <I2C_WaitOnFlagUntilTimeout+0x106>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004250:	6841      	ldr	r1, [r0, #4]
          tmp2 = hi2c->Mode;
 8004252:	f895 3042 	ldrb.w	r3, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004256:	6982      	ldr	r2, [r0, #24]
 8004258:	0412      	lsls	r2, r2, #16
          tmp2 = hi2c->Mode;
 800425a:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800425c:	d50b      	bpl.n	8004276 <I2C_WaitOnFlagUntilTimeout+0x14a>
 800425e:	044a      	lsls	r2, r1, #17
 8004260:	d409      	bmi.n	8004276 <I2C_WaitOnFlagUntilTimeout+0x14a>
              (tmp1 != I2C_CR2_STOP) && \
 8004262:	2b20      	cmp	r3, #32
 8004264:	d007      	beq.n	8004276 <I2C_WaitOnFlagUntilTimeout+0x14a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004266:	6843      	ldr	r3, [r0, #4]
 8004268:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800426c:	6043      	str	r3, [r0, #4]
            tickstart = HAL_GetTick();
 800426e:	f7fe f89b 	bl	80023a8 <HAL_GetTick>
 8004272:	4681      	mov	r9, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004274:	6828      	ldr	r0, [r5, #0]
 8004276:	6983      	ldr	r3, [r0, #24]
 8004278:	0699      	lsls	r1, r3, #26
 800427a:	d4da      	bmi.n	8004232 <I2C_WaitOnFlagUntilTimeout+0x106>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800427c:	f7fe f894 	bl	80023a8 <HAL_GetTick>
 8004280:	eba0 0009 	sub.w	r0, r0, r9
 8004284:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004286:	6828      	ldr	r0, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004288:	d9f5      	bls.n	8004276 <I2C_WaitOnFlagUntilTimeout+0x14a>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800428a:	6983      	ldr	r3, [r0, #24]
 800428c:	069b      	lsls	r3, r3, #26
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800428e:	f04f 0420 	mov.w	r4, #32
              status = HAL_ERROR;
 8004292:	f04f 0b01 	mov.w	fp, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004296:	d5cf      	bpl.n	8004238 <I2C_WaitOnFlagUntilTimeout+0x10c>
    if (status == HAL_OK)
 8004298:	f1bb 0f00 	cmp.w	fp, #0
 800429c:	f43f af63 	beq.w	8004166 <I2C_WaitOnFlagUntilTimeout+0x3a>
 80042a0:	e763      	b.n	800416a <I2C_WaitOnFlagUntilTimeout+0x3e>
 80042a2:	bf00      	nop
 80042a4:	fe00e800 	.word	0xfe00e800

080042a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042a8:	6803      	ldr	r3, [r0, #0]
{
 80042aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042ae:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042b0:	6998      	ldr	r0, [r3, #24]
 80042b2:	0684      	lsls	r4, r0, #26
 80042b4:	d45e      	bmi.n	8004374 <I2C_WaitOnSTOPFlagUntilTimeout+0xcc>
 80042b6:	460e      	mov	r6, r1
 80042b8:	4617      	mov	r7, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042ba:	f04f 0810 	mov.w	r8, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 80042be:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80042c0:	f012 0c10 	ands.w	ip, r2, #16
 80042c4:	d059      	beq.n	800437a <I2C_WaitOnSTOPFlagUntilTimeout+0xd2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042c6:	1c70      	adds	r0, r6, #1
 80042c8:	f8c3 801c 	str.w	r8, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80042cc:	d160      	bne.n	8004390 <I2C_WaitOnSTOPFlagUntilTimeout+0xe8>
 80042ce:	699a      	ldr	r2, [r3, #24]
 80042d0:	0691      	lsls	r1, r2, #26
 80042d2:	d5fc      	bpl.n	80042ce <I2C_WaitOnSTOPFlagUntilTimeout+0x26>
  uint32_t error_code = 0;
 80042d4:	2400      	movs	r4, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042d6:	2220      	movs	r2, #32
 80042d8:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80042da:	f044 0c04 	orr.w	ip, r4, #4
    status = HAL_ERROR;
 80042de:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 80042e0:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80042e2:	05d0      	lsls	r0, r2, #23
 80042e4:	d532      	bpl.n	800434c <I2C_WaitOnSTOPFlagUntilTimeout+0xa4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80042e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80042ea:	0554      	lsls	r4, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80042ec:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 80042ee:	f04c 0c01 	orr.w	ip, ip, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80042f2:	d504      	bpl.n	80042fe <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80042f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80042f8:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 80042fa:	f04c 0c08 	orr.w	ip, ip, #8
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80042fe:	0596      	lsls	r6, r2, #22
 8004300:	d504      	bpl.n	800430c <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004302:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8004306:	f04c 0c02 	orr.w	ip, ip, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800430a:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800430c:	699a      	ldr	r2, [r3, #24]
 800430e:	0790      	lsls	r0, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8004310:	bf44      	itt	mi
 8004312:	2200      	movmi	r2, #0
 8004314:	629a      	strmi	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004316:	699a      	ldr	r2, [r3, #24]
 8004318:	07d1      	lsls	r1, r2, #31
 800431a:	d403      	bmi.n	8004324 <I2C_WaitOnSTOPFlagUntilTimeout+0x7c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800431c:	699a      	ldr	r2, [r3, #24]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	4836      	ldr	r0, [pc, #216]	@ (8004400 <I2C_WaitOnSTOPFlagUntilTimeout+0x158>)
 8004328:	4002      	ands	r2, r0
 800432a:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800432c:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800432e:	2120      	movs	r1, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004330:	2200      	movs	r2, #0
    hi2c->ErrorCode |= error_code;
 8004332:	ea43 030c 	orr.w	r3, r3, ip
 8004336:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004338:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800433c:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 8004340:	2300      	movs	r3, #0
 8004342:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
      return HAL_ERROR;
 8004346:	2001      	movs	r0, #1
}
 8004348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800434c:	0550      	lsls	r0, r2, #21
 800434e:	d4d1      	bmi.n	80042f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004350:	0594      	lsls	r4, r2, #22
 8004352:	d4d6      	bmi.n	8004302 <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
  if (status != HAL_OK)
 8004354:	2900      	cmp	r1, #0
 8004356:	d1d9      	bne.n	800430c <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004358:	f7fe f826 	bl	80023a8 <HAL_GetTick>
 800435c:	1bc0      	subs	r0, r0, r7
 800435e:	42b0      	cmp	r0, r6
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004360:	682b      	ldr	r3, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004362:	d800      	bhi.n	8004366 <I2C_WaitOnSTOPFlagUntilTimeout+0xbe>
 8004364:	b91e      	cbnz	r6, 800436e <I2C_WaitOnSTOPFlagUntilTimeout+0xc6>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004366:	699a      	ldr	r2, [r3, #24]
 8004368:	f012 0220 	ands.w	r2, r2, #32
 800436c:	d007      	beq.n	800437e <I2C_WaitOnSTOPFlagUntilTimeout+0xd6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800436e:	699a      	ldr	r2, [r3, #24]
 8004370:	0692      	lsls	r2, r2, #26
 8004372:	d5a4      	bpl.n	80042be <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8004374:	2000      	movs	r0, #0
}
 8004376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800437a:	4661      	mov	r1, ip
 800437c:	e7b0      	b.n	80042e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800437e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004380:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004382:	430b      	orrs	r3, r1
 8004384:	646b      	str	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004386:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800438a:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
        return HAL_ERROR;
 800438e:	e7d7      	b.n	8004340 <I2C_WaitOnSTOPFlagUntilTimeout+0x98>
  uint32_t error_code = 0;
 8004390:	2400      	movs	r4, #0
  uint32_t tickstart = Tickstart;
 8004392:	46b9      	mov	r9, r7
  HAL_StatusTypeDef status = HAL_OK;
 8004394:	46a2      	mov	sl, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004396:	699a      	ldr	r2, [r3, #24]
 8004398:	0692      	lsls	r2, r2, #26
 800439a:	d42c      	bmi.n	80043f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x14e>
 800439c:	f1ba 0f00 	cmp.w	sl, #0
 80043a0:	d19b      	bne.n	80042da <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80043a2:	f7fe f801 	bl	80023a8 <HAL_GetTick>
 80043a6:	eba0 0009 	sub.w	r0, r0, r9
 80043aa:	4286      	cmp	r6, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80043ac:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80043ae:	d301      	bcc.n	80043b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x10c>
 80043b0:	2e00      	cmp	r6, #0
 80043b2:	d1f0      	bne.n	8004396 <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80043b4:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 80043b6:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80043ba:	6999      	ldr	r1, [r3, #24]
 80043bc:	0409      	lsls	r1, r1, #16
          tmp2 = hi2c->Mode;
 80043be:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80043c0:	d50b      	bpl.n	80043da <I2C_WaitOnSTOPFlagUntilTimeout+0x132>
 80043c2:	0441      	lsls	r1, r0, #17
 80043c4:	d409      	bmi.n	80043da <I2C_WaitOnSTOPFlagUntilTimeout+0x132>
              (tmp1 != I2C_CR2_STOP) && \
 80043c6:	2a20      	cmp	r2, #32
 80043c8:	d007      	beq.n	80043da <I2C_WaitOnSTOPFlagUntilTimeout+0x132>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043d0:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80043d2:	f7fd ffe9 	bl	80023a8 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043d6:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 80043d8:	4681      	mov	r9, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043da:	699a      	ldr	r2, [r3, #24]
 80043dc:	0690      	lsls	r0, r2, #26
 80043de:	d4da      	bmi.n	8004396 <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80043e0:	f7fd ffe2 	bl	80023a8 <HAL_GetTick>
 80043e4:	eba0 0009 	sub.w	r0, r0, r9
 80043e8:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80043ea:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80043ec:	d9f5      	bls.n	80043da <I2C_WaitOnSTOPFlagUntilTimeout+0x132>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80043ee:	2420      	movs	r4, #32
              status = HAL_ERROR;
 80043f0:	f04f 0a01 	mov.w	sl, #1
 80043f4:	e7cf      	b.n	8004396 <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
    if (status == HAL_OK)
 80043f6:	f1ba 0f00 	cmp.w	sl, #0
 80043fa:	f43f af6c 	beq.w	80042d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80043fe:	e76c      	b.n	80042da <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8004400:	fe00e800 	.word	0xfe00e800

08004404 <I2C_WaitOnRXNEFlagUntilTimeout>:
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004404:	6803      	ldr	r3, [r0, #0]
{
 8004406:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800440a:	4605      	mov	r5, r0
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800440c:	6998      	ldr	r0, [r3, #24]
 800440e:	0744      	lsls	r4, r0, #29
 8004410:	f100 8091 	bmi.w	8004536 <I2C_WaitOnRXNEFlagUntilTimeout+0x132>
 8004414:	460e      	mov	r6, r1
 8004416:	4617      	mov	r7, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004418:	f04f 0810 	mov.w	r8, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 800441c:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800441e:	f012 0c10 	ands.w	ip, r2, #16
 8004422:	d067      	beq.n	80044f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004424:	1c70      	adds	r0, r6, #1
 8004426:	f8c3 801c 	str.w	r8, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800442a:	f040 808f 	bne.w	800454c <I2C_WaitOnRXNEFlagUntilTimeout+0x148>
 800442e:	699a      	ldr	r2, [r3, #24]
 8004430:	0691      	lsls	r1, r2, #26
 8004432:	d5fc      	bpl.n	800442e <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
  uint32_t error_code = 0;
 8004434:	2400      	movs	r4, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004436:	2220      	movs	r2, #32
 8004438:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800443a:	f044 0c04 	orr.w	ip, r4, #4
    status = HAL_ERROR;
 800443e:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 8004440:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004442:	05d0      	lsls	r0, r2, #23
 8004444:	d538      	bpl.n	80044b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004446:	f44f 7180 	mov.w	r1, #256	@ 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800444a:	0554      	lsls	r4, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800444c:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 800444e:	f04c 0c01 	orr.w	ip, ip, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004452:	d504      	bpl.n	800445e <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004454:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004458:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 800445a:	f04c 0c08 	orr.w	ip, ip, #8
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800445e:	0594      	lsls	r4, r2, #22
 8004460:	d504      	bpl.n	800446c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004462:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8004466:	f04c 0c02 	orr.w	ip, ip, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800446a:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800446c:	699a      	ldr	r2, [r3, #24]
 800446e:	0792      	lsls	r2, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8004470:	bf44      	itt	mi
 8004472:	2200      	movmi	r2, #0
 8004474:	629a      	strmi	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004476:	699a      	ldr	r2, [r3, #24]
 8004478:	07d7      	lsls	r7, r2, #31
 800447a:	d403      	bmi.n	8004484 <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800447c:	699a      	ldr	r2, [r3, #24]
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	484e      	ldr	r0, [pc, #312]	@ (80045c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x1bc>)
 8004488:	4002      	ands	r2, r0
 800448a:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800448c:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800448e:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004490:	2020      	movs	r0, #32
    hi2c->ErrorCode |= error_code;
 8004492:	ea42 020c 	orr.w	r2, r2, ip
 8004496:	646a      	str	r2, [r5, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004498:	f885 1040 	strb.w	r1, [r5, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800449c:	f885 0041 	strb.w	r0, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a0:	f885 1042 	strb.w	r1, [r5, #66]	@ 0x42
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	069e      	lsls	r6, r3, #26
 80044a8:	d526      	bpl.n	80044f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf4>
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80044aa:	f7fd ff7d 	bl	80023a8 <HAL_GetTick>
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80044ae:	682b      	ldr	r3, [r5, #0]
 80044b0:	699b      	ldr	r3, [r3, #24]
    status = HAL_ERROR;
 80044b2:	2001      	movs	r0, #1
}
 80044b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80044b8:	0550      	lsls	r0, r2, #21
 80044ba:	d4cb      	bmi.n	8004454 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80044bc:	0590      	lsls	r0, r2, #22
 80044be:	d4d0      	bmi.n	8004462 <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
  if (status != HAL_OK)
 80044c0:	2900      	cmp	r1, #0
 80044c2:	d1d3      	bne.n	800446c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80044c4:	699a      	ldr	r2, [r3, #24]
 80044c6:	0694      	lsls	r4, r2, #26
 80044c8:	d51c      	bpl.n	8004504 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80044ca:	699a      	ldr	r2, [r3, #24]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044cc:	699a      	ldr	r2, [r3, #24]
 80044ce:	06d0      	lsls	r0, r2, #27
 80044d0:	d517      	bpl.n	8004502 <I2C_WaitOnRXNEFlagUntilTimeout+0xfe>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044d2:	2020      	movs	r0, #32
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044d4:	2410      	movs	r4, #16
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80044d6:	2204      	movs	r2, #4
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044d8:	61dc      	str	r4, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80044da:	646a      	str	r2, [r5, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044dc:	61d8      	str	r0, [r3, #28]
        I2C_RESET_CR2(hi2c);
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	4c37      	ldr	r4, [pc, #220]	@ (80045c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x1bc>)
 80044e2:	4022      	ands	r2, r4
 80044e4:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 80044e6:	f885 0041 	strb.w	r0, [r5, #65]	@ 0x41
        __HAL_UNLOCK(hi2c);
 80044ea:	f885 1040 	strb.w	r1, [r5, #64]	@ 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ee:	f885 1042 	strb.w	r1, [r5, #66]	@ 0x42
 80044f2:	e7da      	b.n	80044aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
  HAL_StatusTypeDef status = HAL_OK;
 80044f4:	4661      	mov	r1, ip
 80044f6:	e7a3      	b.n	8004440 <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80044f8:	f7fd ff56 	bl	80023a8 <HAL_GetTick>
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80044fc:	682b      	ldr	r3, [r5, #0]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	e7d7      	b.n	80044b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xae>
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004502:	6469      	str	r1, [r5, #68]	@ 0x44
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004504:	f7fd ff50 	bl	80023a8 <HAL_GetTick>
 8004508:	1bc0      	subs	r0, r0, r7
 800450a:	4286      	cmp	r6, r0
 800450c:	d215      	bcs.n	800453a <I2C_WaitOnRXNEFlagUntilTimeout+0x136>
 800450e:	6829      	ldr	r1, [r5, #0]
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004510:	698a      	ldr	r2, [r1, #24]
 8004512:	f012 0204 	ands.w	r2, r2, #4
 8004516:	460b      	mov	r3, r1
 8004518:	d109      	bne.n	800452e <I2C_WaitOnRXNEFlagUntilTimeout+0x12a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800451a:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800451c:	f885 2040 	strb.w	r2, [r5, #64]	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8004520:	2020      	movs	r0, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004522:	4303      	orrs	r3, r0
 8004524:	646b      	str	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004526:	f885 0041 	strb.w	r0, [r5, #65]	@ 0x41
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800452a:	698b      	ldr	r3, [r1, #24]
 800452c:	e7c1      	b.n	80044b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xae>
 800452e:	698a      	ldr	r2, [r1, #24]
 8004530:	0751      	lsls	r1, r2, #29
 8004532:	f57f af73 	bpl.w	800441c <I2C_WaitOnRXNEFlagUntilTimeout+0x18>
    status = HAL_ERROR;
 8004536:	2000      	movs	r0, #0
 8004538:	e7bc      	b.n	80044b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800453a:	682b      	ldr	r3, [r5, #0]
 800453c:	4619      	mov	r1, r3
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800453e:	2e00      	cmp	r6, #0
 8004540:	d0e6      	beq.n	8004510 <I2C_WaitOnRXNEFlagUntilTimeout+0x10c>
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004542:	699a      	ldr	r2, [r3, #24]
 8004544:	0752      	lsls	r2, r2, #29
 8004546:	f57f af69 	bpl.w	800441c <I2C_WaitOnRXNEFlagUntilTimeout+0x18>
 800454a:	e7f4      	b.n	8004536 <I2C_WaitOnRXNEFlagUntilTimeout+0x132>
  uint32_t error_code = 0;
 800454c:	2400      	movs	r4, #0
  uint32_t tickstart = Tickstart;
 800454e:	46b9      	mov	r9, r7
  HAL_StatusTypeDef status = HAL_OK;
 8004550:	46a2      	mov	sl, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004552:	699a      	ldr	r2, [r3, #24]
 8004554:	0692      	lsls	r2, r2, #26
 8004556:	d42d      	bmi.n	80045b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x1b0>
 8004558:	f1ba 0f00 	cmp.w	sl, #0
 800455c:	f47f af6d 	bne.w	800443a <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004560:	f7fd ff22 	bl	80023a8 <HAL_GetTick>
 8004564:	eba0 0009 	sub.w	r0, r0, r9
 8004568:	4286      	cmp	r6, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800456a:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800456c:	d301      	bcc.n	8004572 <I2C_WaitOnRXNEFlagUntilTimeout+0x16e>
 800456e:	2e00      	cmp	r6, #0
 8004570:	d1ef      	bne.n	8004552 <I2C_WaitOnRXNEFlagUntilTimeout+0x14e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004572:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8004574:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004578:	6999      	ldr	r1, [r3, #24]
 800457a:	0409      	lsls	r1, r1, #16
          tmp2 = hi2c->Mode;
 800457c:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800457e:	d50b      	bpl.n	8004598 <I2C_WaitOnRXNEFlagUntilTimeout+0x194>
 8004580:	0441      	lsls	r1, r0, #17
 8004582:	d409      	bmi.n	8004598 <I2C_WaitOnRXNEFlagUntilTimeout+0x194>
              (tmp1 != I2C_CR2_STOP) && \
 8004584:	2a20      	cmp	r2, #32
 8004586:	d007      	beq.n	8004598 <I2C_WaitOnRXNEFlagUntilTimeout+0x194>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800458e:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8004590:	f7fd ff0a 	bl	80023a8 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004594:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8004596:	4681      	mov	r9, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004598:	699a      	ldr	r2, [r3, #24]
 800459a:	0690      	lsls	r0, r2, #26
 800459c:	d4d9      	bmi.n	8004552 <I2C_WaitOnRXNEFlagUntilTimeout+0x14e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800459e:	f7fd ff03 	bl	80023a8 <HAL_GetTick>
 80045a2:	eba0 0009 	sub.w	r0, r0, r9
 80045a6:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80045a8:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80045aa:	d9f5      	bls.n	8004598 <I2C_WaitOnRXNEFlagUntilTimeout+0x194>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80045ac:	2420      	movs	r4, #32
              status = HAL_ERROR;
 80045ae:	f04f 0a01 	mov.w	sl, #1
 80045b2:	e7ce      	b.n	8004552 <I2C_WaitOnRXNEFlagUntilTimeout+0x14e>
    if (status == HAL_OK)
 80045b4:	f1ba 0f00 	cmp.w	sl, #0
 80045b8:	f43f af3d 	beq.w	8004436 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 80045bc:	e73d      	b.n	800443a <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
 80045be:	bf00      	nop
 80045c0:	fe00e800 	.word	0xfe00e800

080045c4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80045c4:	2800      	cmp	r0, #0
 80045c6:	d054      	beq.n	8004672 <HAL_I2C_Init+0xae>
{
 80045c8:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045ca:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80045ce:	4604      	mov	r4, r0
 80045d0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d047      	beq.n	8004668 <HAL_I2C_Init+0xa4>
  __HAL_I2C_DISABLE(hi2c);
 80045d8:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80045da:	2224      	movs	r2, #36	@ 0x24
 80045dc:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 80045e0:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80045e2:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 80045e4:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80045e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 80045ec:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80045ee:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80045f0:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045f2:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80045f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045f8:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80045fa:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80045fc:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045fe:	d009      	beq.n	8004614 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004600:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004604:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004606:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004608:	d107      	bne.n	800461a <HAL_I2C_Init+0x56>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004610:	605a      	str	r2, [r3, #4]
 8004612:	e006      	b.n	8004622 <HAL_I2C_Init+0x5e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004614:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004618:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004620:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004622:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004624:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004626:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 800462a:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 800462e:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004630:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004632:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004634:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004636:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004638:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800463c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004640:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004642:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004644:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004646:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004648:	4301      	orrs	r1, r0
 800464a:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800464c:	6819      	ldr	r1, [r3, #0]
 800464e:	f041 0101 	orr.w	r1, r1, #1
 8004652:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004654:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8004656:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004658:	6462      	str	r2, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800465a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800465e:	6322      	str	r2, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004660:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
  return HAL_OK;
 8004664:	4610      	mov	r0, r2
}
 8004666:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004668:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800466c:	f7fd f80c 	bl	8001688 <HAL_I2C_MspInit>
 8004670:	e7b2      	b.n	80045d8 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8004672:	2001      	movs	r0, #1
}
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop

08004678 <HAL_I2C_Master_Transmit>:
{
 8004678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800467c:	4615      	mov	r5, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800467e:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8004682:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004684:	2a20      	cmp	r2, #32
{
 8004686:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004688:	f040 8088 	bne.w	800479c <HAL_I2C_Master_Transmit+0x124>
 800468c:	461f      	mov	r7, r3
    __HAL_LOCK(hi2c);
 800468e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8004692:	2b01      	cmp	r3, #1
 8004694:	4604      	mov	r4, r0
 8004696:	f000 8081 	beq.w	800479c <HAL_I2C_Master_Transmit+0x124>
 800469a:	2301      	movs	r3, #1
 800469c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80046a0:	468b      	mov	fp, r1
 80046a2:	f7fd fe81 	bl	80023a8 <HAL_GetTick>
 80046a6:	4682      	mov	sl, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046a8:	4601      	mov	r1, r0
 80046aa:	4620      	mov	r0, r4
 80046ac:	f7ff fc9c 	bl	8003fe8 <I2C_WaitOnFlagUntilTimeout.constprop.0>
 80046b0:	2800      	cmp	r0, #0
 80046b2:	d16f      	bne.n	8004794 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80046b4:	2321      	movs	r3, #33	@ 0x21
 80046b6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80046ba:	2310      	movs	r3, #16
 80046bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046c0:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 80046c2:	8567      	strh	r7, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046c4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80046c6:	6823      	ldr	r3, [r4, #0]
    hi2c->pBuffPtr  = pData;
 80046c8:	6265      	str	r5, [r4, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046ca:	b292      	uxth	r2, r2
 80046cc:	2aff      	cmp	r2, #255	@ 0xff
    hi2c->XferISR   = NULL;
 80046ce:	6360      	str	r0, [r4, #52]	@ 0x34
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046d0:	f3cb 0b09 	ubfx	fp, fp, #0, #10
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046d4:	d866      	bhi.n	80047a4 <HAL_I2C_Master_Transmit+0x12c>
      hi2c->XferSize = hi2c->XferCount;
 80046d6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80046d8:	b292      	uxth	r2, r2
      xfermode = I2C_AUTOEND_MODE;
 80046da:	8522      	strh	r2, [r4, #40]	@ 0x28
    if (hi2c->XferSize > 0U)
 80046dc:	2a00      	cmp	r2, #0
 80046de:	f040 812c 	bne.w	800493a <HAL_I2C_Master_Transmit+0x2c2>
  MODIFY_REG(hi2c->Instance->CR2, \
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	4999      	ldr	r1, [pc, #612]	@ (800494c <HAL_I2C_Master_Transmit+0x2d4>)
 80046e6:	400a      	ands	r2, r1
 80046e8:	ea42 020b 	orr.w	r2, r2, fp
 80046ec:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80046f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80046f4:	605a      	str	r2, [r3, #4]
    while (hi2c->XferCount > 0U)
 80046f6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80046f8:	b292      	uxth	r2, r2
 80046fa:	2a00      	cmp	r2, #0
 80046fc:	f000 80a6 	beq.w	800484c <HAL_I2C_Master_Transmit+0x1d4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004700:	f04f 0910 	mov.w	r9, #16
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004704:	699d      	ldr	r5, [r3, #24]
 8004706:	f015 0502 	ands.w	r5, r5, #2
 800470a:	f040 8089 	bne.w	8004820 <HAL_I2C_Master_Transmit+0x1a8>
  uint32_t itflag   = hi2c->Instance->ISR;
 800470e:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004710:	f012 0210 	ands.w	r2, r2, #16
 8004714:	f000 8082 	beq.w	800481c <HAL_I2C_Master_Transmit+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004718:	1c70      	adds	r0, r6, #1
 800471a:	f8c3 901c 	str.w	r9, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800471e:	f040 80d3 	bne.w	80048c8 <HAL_I2C_Master_Transmit+0x250>
 8004722:	699a      	ldr	r2, [r3, #24]
 8004724:	0691      	lsls	r1, r2, #26
 8004726:	d5fc      	bpl.n	8004722 <HAL_I2C_Master_Transmit+0xaa>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004728:	2220      	movs	r2, #32
 800472a:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800472c:	f045 0204 	orr.w	r2, r5, #4
    status = HAL_ERROR;
 8004730:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8004732:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004734:	05cd      	lsls	r5, r1, #23
 8004736:	d550      	bpl.n	80047da <HAL_I2C_Master_Transmit+0x162>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004738:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800473c:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800473e:	0548      	lsls	r0, r1, #21
    error_code |= HAL_I2C_ERROR_BERR;
 8004740:	f042 0201 	orr.w	r2, r2, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004744:	d504      	bpl.n	8004750 <HAL_I2C_Master_Transmit+0xd8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004746:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800474a:	61d8      	str	r0, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 800474c:	f042 0208 	orr.w	r2, r2, #8
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004750:	058e      	lsls	r6, r1, #22
 8004752:	d504      	bpl.n	800475e <HAL_I2C_Master_Transmit+0xe6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004754:	f44f 7100 	mov.w	r1, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8004758:	f042 0202 	orr.w	r2, r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800475c:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800475e:	6999      	ldr	r1, [r3, #24]
 8004760:	0788      	lsls	r0, r1, #30
    hi2c->Instance->TXDR = 0x00U;
 8004762:	bf44      	itt	mi
 8004764:	2100      	movmi	r1, #0
 8004766:	6299      	strmi	r1, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004768:	6999      	ldr	r1, [r3, #24]
 800476a:	07c9      	lsls	r1, r1, #31
 800476c:	d403      	bmi.n	8004776 <HAL_I2C_Master_Transmit+0xfe>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800476e:	6999      	ldr	r1, [r3, #24]
 8004770:	f041 0101 	orr.w	r1, r1, #1
 8004774:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8004776:	6859      	ldr	r1, [r3, #4]
 8004778:	4d75      	ldr	r5, [pc, #468]	@ (8004950 <HAL_I2C_Master_Transmit+0x2d8>)
 800477a:	4029      	ands	r1, r5
 800477c:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800477e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004780:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004782:	2120      	movs	r1, #32
    hi2c->ErrorCode |= error_code;
 8004784:	4313      	orrs	r3, r2
 8004786:	6463      	str	r3, [r4, #68]	@ 0x44
    __HAL_UNLOCK(hi2c);
 8004788:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800478c:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004790:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8004794:	2001      	movs	r0, #1
}
 8004796:	b003      	add	sp, #12
 8004798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800479c:	2002      	movs	r0, #2
}
 800479e:	b003      	add	sp, #12
 80047a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047a4:	22ff      	movs	r2, #255	@ 0xff
 80047a6:	8522      	strh	r2, [r4, #40]	@ 0x28
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047a8:	f44f 017f 	mov.w	r1, #16711680	@ 0xff0000
 80047ac:	20fe      	movs	r0, #254	@ 0xfe
      xfermode = I2C_RELOAD_MODE;
 80047ae:	f04f 7780 	mov.w	r7, #16777216	@ 0x1000000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047b2:	ea41 020b 	orr.w	r2, r1, fp
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80047b6:	f815 1b01 	ldrb.w	r1, [r5], #1
 80047ba:	6299      	str	r1, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80047bc:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80047be:	8520      	strh	r0, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80047c0:	3901      	subs	r1, #1
 80047c2:	b289      	uxth	r1, r1
 80047c4:	8561      	strh	r1, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80047c6:	6859      	ldr	r1, [r3, #4]
 80047c8:	4860      	ldr	r0, [pc, #384]	@ (800494c <HAL_I2C_Master_Transmit+0x2d4>)
      hi2c->pBuffPtr++;
 80047ca:	6265      	str	r5, [r4, #36]	@ 0x24
  MODIFY_REG(hi2c->Instance->CR2, \
 80047cc:	4001      	ands	r1, r0
 80047ce:	430a      	orrs	r2, r1
 80047d0:	433a      	orrs	r2, r7
 80047d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047d6:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80047d8:	e78d      	b.n	80046f6 <HAL_I2C_Master_Transmit+0x7e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80047da:	054f      	lsls	r7, r1, #21
 80047dc:	d4b3      	bmi.n	8004746 <HAL_I2C_Master_Transmit+0xce>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80047de:	058d      	lsls	r5, r1, #22
 80047e0:	d4b8      	bmi.n	8004754 <HAL_I2C_Master_Transmit+0xdc>
  if (status != HAL_OK)
 80047e2:	2800      	cmp	r0, #0
 80047e4:	d1bb      	bne.n	800475e <HAL_I2C_Master_Transmit+0xe6>
    if (Timeout != HAL_MAX_DELAY)
 80047e6:	1c72      	adds	r2, r6, #1
 80047e8:	d08c      	beq.n	8004704 <HAL_I2C_Master_Transmit+0x8c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ea:	f7fd fddd 	bl	80023a8 <HAL_GetTick>
 80047ee:	eba0 030a 	sub.w	r3, r0, sl
 80047f2:	429e      	cmp	r6, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80047f4:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f6:	d301      	bcc.n	80047fc <HAL_I2C_Master_Transmit+0x184>
 80047f8:	2e00      	cmp	r6, #0
 80047fa:	d183      	bne.n	8004704 <HAL_I2C_Master_Transmit+0x8c>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80047fc:	699a      	ldr	r2, [r3, #24]
 80047fe:	f012 0202 	ands.w	r2, r2, #2
 8004802:	f47f af7f 	bne.w	8004704 <HAL_I2C_Master_Transmit+0x8c>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004806:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 8004808:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 800480c:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800480e:	430b      	orrs	r3, r1
 8004810:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004812:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004816:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          return HAL_ERROR;
 800481a:	e7bb      	b.n	8004794 <HAL_I2C_Master_Transmit+0x11c>
  HAL_StatusTypeDef status = HAL_OK;
 800481c:	4610      	mov	r0, r2
 800481e:	e788      	b.n	8004732 <HAL_I2C_Master_Transmit+0xba>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004820:	6a60      	ldr	r0, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8004822:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004824:	f810 1b01 	ldrb.w	r1, [r0], #1
 8004828:	6299      	str	r1, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800482a:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 800482c:	6260      	str	r0, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800482e:	3901      	subs	r1, #1
 8004830:	b289      	uxth	r1, r1
 8004832:	8561      	strh	r1, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004834:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8004836:	3a01      	subs	r2, #1
 8004838:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800483a:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 800483c:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800483e:	b101      	cbz	r1, 8004842 <HAL_I2C_Master_Transmit+0x1ca>
 8004840:	b1ca      	cbz	r2, 8004876 <HAL_I2C_Master_Transmit+0x1fe>
    while (hi2c->XferCount > 0U)
 8004842:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8004844:	b292      	uxth	r2, r2
 8004846:	2a00      	cmp	r2, #0
 8004848:	f47f af5c 	bne.w	8004704 <HAL_I2C_Master_Transmit+0x8c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800484c:	4652      	mov	r2, sl
 800484e:	4631      	mov	r1, r6
 8004850:	4620      	mov	r0, r4
 8004852:	f7ff fd29 	bl	80042a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004856:	2800      	cmp	r0, #0
 8004858:	d19c      	bne.n	8004794 <HAL_I2C_Master_Transmit+0x11c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800485a:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800485c:	4d3c      	ldr	r5, [pc, #240]	@ (8004950 <HAL_I2C_Master_Transmit+0x2d8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800485e:	2120      	movs	r1, #32
 8004860:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	402a      	ands	r2, r5
 8004866:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004868:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800486c:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004870:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8004874:	e78f      	b.n	8004796 <HAL_I2C_Master_Transmit+0x11e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004876:	f8cd a000 	str.w	sl, [sp]
 800487a:	4633      	mov	r3, r6
 800487c:	2180      	movs	r1, #128	@ 0x80
 800487e:	4620      	mov	r0, r4
 8004880:	f7ff fc54 	bl	800412c <I2C_WaitOnFlagUntilTimeout>
 8004884:	2800      	cmp	r0, #0
 8004886:	d185      	bne.n	8004794 <HAL_I2C_Master_Transmit+0x11c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004888:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800488a:	6823      	ldr	r3, [r4, #0]
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800488c:	b292      	uxth	r2, r2
 800488e:	2aff      	cmp	r2, #255	@ 0xff
 8004890:	d90c      	bls.n	80048ac <HAL_I2C_Master_Transmit+0x234>
  MODIFY_REG(hi2c->Instance->CR2, \
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	492f      	ldr	r1, [pc, #188]	@ (8004954 <HAL_I2C_Master_Transmit+0x2dc>)
 8004896:	400a      	ands	r2, r1
 8004898:	ea42 020b 	orr.w	r2, r2, fp
 800489c:	f042 72ff 	orr.w	r2, r2, #33423360	@ 0x1fe0000
 80048a0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80048a4:	21ff      	movs	r1, #255	@ 0xff
 80048a6:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80048a8:	605a      	str	r2, [r3, #4]
}
 80048aa:	e7ca      	b.n	8004842 <HAL_I2C_Master_Transmit+0x1ca>
          hi2c->XferSize = hi2c->XferCount;
 80048ac:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80048ae:	4829      	ldr	r0, [pc, #164]	@ (8004954 <HAL_I2C_Master_Transmit+0x2dc>)
 80048b0:	6859      	ldr	r1, [r3, #4]
          hi2c->XferSize = hi2c->XferCount;
 80048b2:	b292      	uxth	r2, r2
 80048b4:	8522      	strh	r2, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048b6:	b2d2      	uxtb	r2, r2
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048b8:	ea4b 4202 	orr.w	r2, fp, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80048bc:	4001      	ands	r1, r0
 80048be:	430a      	orrs	r2, r1
 80048c0:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80048c4:	605a      	str	r2, [r3, #4]
}
 80048c6:	e7bc      	b.n	8004842 <HAL_I2C_Master_Transmit+0x1ca>
  uint32_t tickstart = Tickstart;
 80048c8:	4657      	mov	r7, sl
  HAL_StatusTypeDef status = HAL_OK;
 80048ca:	46a8      	mov	r8, r5
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048cc:	699a      	ldr	r2, [r3, #24]
 80048ce:	0692      	lsls	r2, r2, #26
 80048d0:	d42e      	bmi.n	8004930 <HAL_I2C_Master_Transmit+0x2b8>
 80048d2:	f1b8 0f00 	cmp.w	r8, #0
 80048d6:	f47f af29 	bne.w	800472c <HAL_I2C_Master_Transmit+0xb4>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048da:	f7fd fd65 	bl	80023a8 <HAL_GetTick>
 80048de:	1bc0      	subs	r0, r0, r7
 80048e0:	4286      	cmp	r6, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80048e2:	6823      	ldr	r3, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048e4:	d301      	bcc.n	80048ea <HAL_I2C_Master_Transmit+0x272>
 80048e6:	2e00      	cmp	r6, #0
 80048e8:	d1f0      	bne.n	80048cc <HAL_I2C_Master_Transmit+0x254>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80048ea:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 80048ec:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80048f0:	6999      	ldr	r1, [r3, #24]
 80048f2:	0409      	lsls	r1, r1, #16
          tmp2 = hi2c->Mode;
 80048f4:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80048f6:	d50b      	bpl.n	8004910 <HAL_I2C_Master_Transmit+0x298>
 80048f8:	0441      	lsls	r1, r0, #17
 80048fa:	d409      	bmi.n	8004910 <HAL_I2C_Master_Transmit+0x298>
              (tmp1 != I2C_CR2_STOP) && \
 80048fc:	2a20      	cmp	r2, #32
 80048fe:	d007      	beq.n	8004910 <HAL_I2C_Master_Transmit+0x298>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004906:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8004908:	f7fd fd4e 	bl	80023a8 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800490c:	6823      	ldr	r3, [r4, #0]
            tickstart = HAL_GetTick();
 800490e:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004910:	699a      	ldr	r2, [r3, #24]
 8004912:	0690      	lsls	r0, r2, #26
 8004914:	d4da      	bmi.n	80048cc <HAL_I2C_Master_Transmit+0x254>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004916:	f7fd fd47 	bl	80023a8 <HAL_GetTick>
 800491a:	1bc0      	subs	r0, r0, r7
 800491c:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800491e:	6823      	ldr	r3, [r4, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004920:	d9f6      	bls.n	8004910 <HAL_I2C_Master_Transmit+0x298>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004922:	699a      	ldr	r2, [r3, #24]
 8004924:	0692      	lsls	r2, r2, #26
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004926:	f04f 0520 	mov.w	r5, #32
              status = HAL_ERROR;
 800492a:	f04f 0801 	mov.w	r8, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800492e:	d5d0      	bpl.n	80048d2 <HAL_I2C_Master_Transmit+0x25a>
    if (status == HAL_OK)
 8004930:	f1b8 0f00 	cmp.w	r8, #0
 8004934:	f43f aef8 	beq.w	8004728 <HAL_I2C_Master_Transmit+0xb0>
 8004938:	e6f8      	b.n	800472c <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize--;
 800493a:	3a01      	subs	r2, #1
 800493c:	b290      	uxth	r0, r2
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800493e:	1c41      	adds	r1, r0, #1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004940:	b2c9      	uxtb	r1, r1
 8004942:	0409      	lsls	r1, r1, #16
      xfermode = I2C_AUTOEND_MODE;
 8004944:	f04f 7700 	mov.w	r7, #33554432	@ 0x2000000
 8004948:	e733      	b.n	80047b2 <HAL_I2C_Master_Transmit+0x13a>
 800494a:	bf00      	nop
 800494c:	fc009800 	.word	0xfc009800
 8004950:	fe00e800 	.word	0xfe00e800
 8004954:	fc009c00 	.word	0xfc009c00

08004958 <HAL_I2C_Master_Receive>:
{
 8004958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800495c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800495e:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
{
 8004962:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004964:	2820      	cmp	r0, #32
{
 8004966:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004968:	f040 808c 	bne.w	8004a84 <HAL_I2C_Master_Receive+0x12c>
 800496c:	4698      	mov	r8, r3
    __HAL_LOCK(hi2c);
 800496e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8004972:	2b01      	cmp	r3, #1
 8004974:	f000 8086 	beq.w	8004a84 <HAL_I2C_Master_Receive+0x12c>
 8004978:	2301      	movs	r3, #1
 800497a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800497e:	460f      	mov	r7, r1
 8004980:	4691      	mov	r9, r2
 8004982:	f7fd fd11 	bl	80023a8 <HAL_GetTick>
 8004986:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004988:	4601      	mov	r1, r0
 800498a:	4620      	mov	r0, r4
 800498c:	f7ff fb2c 	bl	8003fe8 <I2C_WaitOnFlagUntilTimeout.constprop.0>
 8004990:	2800      	cmp	r0, #0
 8004992:	d173      	bne.n	8004a7c <HAL_I2C_Master_Receive+0x124>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004994:	2322      	movs	r3, #34	@ 0x22
 8004996:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800499a:	2310      	movs	r3, #16
 800499c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049a0:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 80049a2:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049a6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80049a8:	6822      	ldr	r2, [r4, #0]
    hi2c->pBuffPtr  = pData;
 80049aa:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	2bff      	cmp	r3, #255	@ 0xff
    hi2c->XferISR   = NULL;
 80049b2:	6360      	str	r0, [r4, #52]	@ 0x34
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049b4:	f3c7 0709 	ubfx	r7, r7, #0, #10
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049b8:	d868      	bhi.n	8004a8c <HAL_I2C_Master_Receive+0x134>
      hi2c->XferSize = hi2c->XferCount;
 80049ba:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80049bc:	4840      	ldr	r0, [pc, #256]	@ (8004ac0 <HAL_I2C_Master_Receive+0x168>)
 80049be:	6851      	ldr	r1, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80049c4:	b2db      	uxtb	r3, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049c6:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80049ca:	4001      	ands	r1, r0
 80049cc:	430b      	orrs	r3, r1
 80049ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80049d2:	f443 5310 	orr.w	r3, r3, #9216	@ 0x2400
 80049d6:	6053      	str	r3, [r2, #4]
    while (hi2c->XferCount > 0U)
 80049d8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80049da:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049dc:	462a      	mov	r2, r5
 80049de:	4631      	mov	r1, r6
 80049e0:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d039      	beq.n	8004a5a <HAL_I2C_Master_Receive+0x102>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049e6:	f7ff fd0d 	bl	8004404 <I2C_WaitOnRXNEFlagUntilTimeout>
 80049ea:	2800      	cmp	r0, #0
 80049ec:	d146      	bne.n	8004a7c <HAL_I2C_Master_Receive+0x124>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80049ee:	6822      	ldr	r2, [r4, #0]
 80049f0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80049f2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80049f4:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 80049f6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80049f8:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80049fa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a02:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8004a04:	3a01      	subs	r2, #1
 8004a06:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8004a08:	3101      	adds	r1, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a0a:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8004a0c:	6261      	str	r1, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8004a0e:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0e1      	beq.n	80049d8 <HAL_I2C_Master_Receive+0x80>
 8004a14:	2a00      	cmp	r2, #0
 8004a16:	d1df      	bne.n	80049d8 <HAL_I2C_Master_Receive+0x80>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a18:	2180      	movs	r1, #128	@ 0x80
 8004a1a:	9500      	str	r5, [sp, #0]
 8004a1c:	4633      	mov	r3, r6
 8004a1e:	4620      	mov	r0, r4
 8004a20:	f7ff fb84 	bl	800412c <I2C_WaitOnFlagUntilTimeout>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a24:	21ff      	movs	r1, #255	@ 0xff
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a26:	bb48      	cbnz	r0, 8004a7c <HAL_I2C_Master_Receive+0x124>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a28:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a2a:	f8df c09c 	ldr.w	ip, [pc, #156]	@ 8004ac8 <HAL_I2C_Master_Receive+0x170>
 8004a2e:	6822      	ldr	r2, [r4, #0]
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	428b      	cmp	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a34:	4660      	mov	r0, ip
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a36:	d935      	bls.n	8004aa4 <HAL_I2C_Master_Receive+0x14c>
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a38:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a3a:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a3c:	ea03 030c 	and.w	r3, r3, ip
 8004a40:	433b      	orrs	r3, r7
 8004a42:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 8004a46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a4a:	6053      	str	r3, [r2, #4]
    while (hi2c->XferCount > 0U)
 8004a4c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004a4e:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a50:	462a      	mov	r2, r5
 8004a52:	4631      	mov	r1, r6
 8004a54:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1c5      	bne.n	80049e6 <HAL_I2C_Master_Receive+0x8e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a5a:	f7ff fc25 	bl	80042a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a5e:	b968      	cbnz	r0, 8004a7c <HAL_I2C_Master_Receive+0x124>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a60:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8004a62:	4d18      	ldr	r5, [pc, #96]	@ (8004ac4 <HAL_I2C_Master_Receive+0x16c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a64:	2120      	movs	r1, #32
 8004a66:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	402a      	ands	r2, r5
 8004a6c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004a6e:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8004a72:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a76:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8004a7a:	e000      	b.n	8004a7e <HAL_I2C_Master_Receive+0x126>
      return HAL_ERROR;
 8004a7c:	2001      	movs	r0, #1
}
 8004a7e:	b003      	add	sp, #12
 8004a80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 8004a84:	2002      	movs	r0, #2
}
 8004a86:	b003      	add	sp, #12
 8004a88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a8c:	6853      	ldr	r3, [r2, #4]
 8004a8e:	490c      	ldr	r1, [pc, #48]	@ (8004ac0 <HAL_I2C_Master_Receive+0x168>)
 8004a90:	400b      	ands	r3, r1
 8004a92:	433b      	orrs	r3, r7
 8004a94:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 8004a98:	f443 3392 	orr.w	r3, r3, #74752	@ 0x12400
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a9c:	21ff      	movs	r1, #255	@ 0xff
 8004a9e:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8004aa0:	6053      	str	r3, [r2, #4]
}
 8004aa2:	e799      	b.n	80049d8 <HAL_I2C_Master_Receive+0x80>
          hi2c->XferSize = hi2c->XferCount;
 8004aa4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8004aa6:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004aac:	b2db      	uxtb	r3, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004aae:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ab2:	4001      	ands	r1, r0
 8004ab4:	430b      	orrs	r3, r1
 8004ab6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004aba:	6053      	str	r3, [r2, #4]
}
 8004abc:	e78c      	b.n	80049d8 <HAL_I2C_Master_Receive+0x80>
 8004abe:	bf00      	nop
 8004ac0:	fc009800 	.word	0xfc009800
 8004ac4:	fe00e800 	.word	0xfe00e800
 8004ac8:	fc009c00 	.word	0xfc009c00

08004acc <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004acc:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8004ad0:	2a20      	cmp	r2, #32
 8004ad2:	d123      	bne.n	8004b1c <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8004ad4:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ad8:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8004adc:	2a01      	cmp	r2, #1
 8004ade:	4603      	mov	r3, r0
 8004ae0:	d01c      	beq.n	8004b1c <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ae2:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ae4:	2024      	movs	r0, #36	@ 0x24
{
 8004ae6:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ae8:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8004aec:	6810      	ldr	r0, [r2, #0]
 8004aee:	f020 0001 	bic.w	r0, r0, #1
 8004af2:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004af4:	6810      	ldr	r0, [r2, #0]
 8004af6:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8004afa:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004afc:	6810      	ldr	r0, [r2, #0]
 8004afe:	4301      	orrs	r1, r0
 8004b00:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b02:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b04:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 8004b08:	f041 0101 	orr.w	r1, r1, #1
 8004b0c:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004b0e:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8004b12:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b16:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004b18:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8004b1c:	2002      	movs	r0, #2
}
 8004b1e:	4770      	bx	lr

08004b20 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b20:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8004b24:	2a20      	cmp	r2, #32
 8004b26:	d122      	bne.n	8004b6e <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 8004b28:	b500      	push	{lr}
 8004b2a:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b2e:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8004b32:	2a01      	cmp	r2, #1
 8004b34:	4603      	mov	r3, r0
 8004b36:	d01c      	beq.n	8004b72 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b38:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b3a:	2024      	movs	r0, #36	@ 0x24
 8004b3c:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8004b40:	6810      	ldr	r0, [r2, #0]
 8004b42:	f020 0001 	bic.w	r0, r0, #1
 8004b46:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b48:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b4a:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b4e:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b52:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b54:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b56:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 8004b5a:	f041 0101 	orr.w	r1, r1, #1
 8004b5e:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004b60:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8004b64:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b68:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004b6a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8004b6e:	2002      	movs	r0, #2
}
 8004b70:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8004b72:	2002      	movs	r0, #2
}
 8004b74:	f85d fb04 	ldr.w	pc, [sp], #4

08004b78 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b78:	4a35      	ldr	r2, [pc, #212]	@ (8004c50 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8004b7a:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004b7c:	b960      	cbnz	r0, 8004b98 <HAL_PWREx_ControlVoltageScaling+0x20>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b7e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004b82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b86:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b8a:	d01b      	beq.n	8004bc4 <HAL_PWREx_ControlVoltageScaling+0x4c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004b94:	2000      	movs	r0, #0
}
 8004b96:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b98:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8004b9c:	d006      	beq.n	8004bac <HAL_PWREx_ControlVoltageScaling+0x34>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b9e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ba2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ba6:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004ba8:	2000      	movs	r0, #0
}
 8004baa:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004bb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bb4:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bb8:	d029      	beq.n	8004c0e <HAL_PWREx_ControlVoltageScaling+0x96>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bbe:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004bc2:	e7f1      	b.n	8004ba8 <HAL_PWREx_ControlVoltageScaling+0x30>
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bc8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bcc:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004bce:	4821      	ldr	r0, [pc, #132]	@ (8004c54 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004bd0:	4921      	ldr	r1, [pc, #132]	@ (8004c58 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bd2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004bd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004bda:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004bdc:	6803      	ldr	r3, [r0, #0]
 8004bde:	2032      	movs	r0, #50	@ 0x32
 8004be0:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004be4:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004be6:	fba1 1303 	umull	r1, r3, r1, r3
 8004bea:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bec:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004bee:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bf2:	d506      	bpl.n	8004c02 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8004bf4:	e000      	b.n	8004bf8 <HAL_PWREx_ControlVoltageScaling+0x80>
 8004bf6:	b123      	cbz	r3, 8004c02 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8004bf8:	6951      	ldr	r1, [r2, #20]
 8004bfa:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8004bfc:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c00:	d4f9      	bmi.n	8004bf6 <HAL_PWREx_ControlVoltageScaling+0x7e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c02:	4b13      	ldr	r3, [pc, #76]	@ (8004c50 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	055b      	lsls	r3, r3, #21
 8004c08:	d5ce      	bpl.n	8004ba8 <HAL_PWREx_ControlVoltageScaling+0x30>
        return HAL_TIMEOUT;
 8004c0a:	2003      	movs	r0, #3
 8004c0c:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c12:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c16:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c18:	480e      	ldr	r0, [pc, #56]	@ (8004c54 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004c1a:	490f      	ldr	r1, [pc, #60]	@ (8004c58 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c1c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c20:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c24:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c26:	6803      	ldr	r3, [r0, #0]
 8004c28:	2032      	movs	r0, #50	@ 0x32
 8004c2a:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c2e:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c30:	fba1 1303 	umull	r1, r3, r1, r3
 8004c34:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c36:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c38:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c3c:	d5e1      	bpl.n	8004c02 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8004c3e:	e001      	b.n	8004c44 <HAL_PWREx_ControlVoltageScaling+0xcc>
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0de      	beq.n	8004c02 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8004c44:	6951      	ldr	r1, [r2, #20]
 8004c46:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8004c48:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c4c:	d5d9      	bpl.n	8004c02 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8004c4e:	e7f7      	b.n	8004c40 <HAL_PWREx_ControlVoltageScaling+0xc8>
 8004c50:	40007000 	.word	0x40007000
 8004c54:	20000008 	.word	0x20000008
 8004c58:	431bde83 	.word	0x431bde83

08004c5c <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004c5c:	4a02      	ldr	r2, [pc, #8]	@ (8004c68 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8004c5e:	6893      	ldr	r3, [r2, #8]
 8004c60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c64:	6093      	str	r3, [r2, #8]
}
 8004c66:	4770      	bx	lr
 8004c68:	40007000 	.word	0x40007000

08004c6c <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c6c:	2800      	cmp	r0, #0
 8004c6e:	f000 81bd 	beq.w	8004fec <HAL_RCC_OscConfig+0x380>
{
 8004c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c76:	6803      	ldr	r3, [r0, #0]
 8004c78:	07d9      	lsls	r1, r3, #31
{
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c7e:	d512      	bpl.n	8004ca6 <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c80:	49a6      	ldr	r1, [pc, #664]	@ (8004f1c <HAL_RCC_OscConfig+0x2b0>)
 8004c82:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c84:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c86:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004c8a:	2a0c      	cmp	r2, #12
 8004c8c:	f000 80d0 	beq.w	8004e30 <HAL_RCC_OscConfig+0x1c4>
 8004c90:	2a08      	cmp	r2, #8
 8004c92:	f040 80d2 	bne.w	8004e3a <HAL_RCC_OscConfig+0x1ce>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c96:	4aa1      	ldr	r2, [pc, #644]	@ (8004f1c <HAL_RCC_OscConfig+0x2b0>)
 8004c98:	6812      	ldr	r2, [r2, #0]
 8004c9a:	0392      	lsls	r2, r2, #14
 8004c9c:	d503      	bpl.n	8004ca6 <HAL_RCC_OscConfig+0x3a>
 8004c9e:	6862      	ldr	r2, [r4, #4]
 8004ca0:	2a00      	cmp	r2, #0
 8004ca2:	f000 8137 	beq.w	8004f14 <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ca6:	079a      	lsls	r2, r3, #30
 8004ca8:	d522      	bpl.n	8004cf0 <HAL_RCC_OscConfig+0x84>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004caa:	4a9c      	ldr	r2, [pc, #624]	@ (8004f1c <HAL_RCC_OscConfig+0x2b0>)
 8004cac:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cae:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cb0:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004cb4:	2b0c      	cmp	r3, #12
 8004cb6:	f000 80f8 	beq.w	8004eaa <HAL_RCC_OscConfig+0x23e>
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	f040 80fa 	bne.w	8004eb4 <HAL_RCC_OscConfig+0x248>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cc0:	4b96      	ldr	r3, [pc, #600]	@ (8004f1c <HAL_RCC_OscConfig+0x2b0>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	055b      	lsls	r3, r3, #21
 8004cc6:	d503      	bpl.n	8004cd0 <HAL_RCC_OscConfig+0x64>
 8004cc8:	68e3      	ldr	r3, [r4, #12]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f000 8122 	beq.w	8004f14 <HAL_RCC_OscConfig+0x2a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cd0:	4a92      	ldr	r2, [pc, #584]	@ (8004f1c <HAL_RCC_OscConfig+0x2b0>)
 8004cd2:	6920      	ldr	r0, [r4, #16]
 8004cd4:	6853      	ldr	r3, [r2, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004cd6:	4992      	ldr	r1, [pc, #584]	@ (8004f20 <HAL_RCC_OscConfig+0x2b4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cd8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004cdc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004ce0:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004ce2:	6808      	ldr	r0, [r1, #0]
 8004ce4:	f7fd fb1e 	bl	8002324 <HAL_InitTick>
 8004ce8:	2800      	cmp	r0, #0
 8004cea:	f040 8113 	bne.w	8004f14 <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	071a      	lsls	r2, r3, #28
 8004cf2:	d519      	bpl.n	8004d28 <HAL_RCC_OscConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cf4:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cf6:	4d89      	ldr	r5, [pc, #548]	@ (8004f1c <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 80c2 	beq.w	8004e82 <HAL_RCC_OscConfig+0x216>
      __HAL_RCC_LSI_ENABLE();
 8004cfe:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8004d02:	f043 0301 	orr.w	r3, r3, #1
 8004d06:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d0a:	f7fd fb4d 	bl	80023a8 <HAL_GetTick>
 8004d0e:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d10:	e005      	b.n	8004d1e <HAL_RCC_OscConfig+0xb2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d12:	f7fd fb49 	bl	80023a8 <HAL_GetTick>
 8004d16:	1b80      	subs	r0, r0, r6
 8004d18:	2802      	cmp	r0, #2
 8004d1a:	f200 8117 	bhi.w	8004f4c <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d1e:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8004d22:	079b      	lsls	r3, r3, #30
 8004d24:	d5f5      	bpl.n	8004d12 <HAL_RCC_OscConfig+0xa6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d26:	6823      	ldr	r3, [r4, #0]
 8004d28:	075d      	lsls	r5, r3, #29
 8004d2a:	d541      	bpl.n	8004db0 <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d2c:	4b7b      	ldr	r3, [pc, #492]	@ (8004f1c <HAL_RCC_OscConfig+0x2b0>)
 8004d2e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004d30:	00d0      	lsls	r0, r2, #3
 8004d32:	f100 810f 	bmi.w	8004f54 <HAL_RCC_OscConfig+0x2e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d36:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004d38:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004d3c:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d44:	9301      	str	r3, [sp, #4]
 8004d46:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004d48:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d4a:	4e76      	ldr	r6, [pc, #472]	@ (8004f24 <HAL_RCC_OscConfig+0x2b8>)
 8004d4c:	6833      	ldr	r3, [r6, #0]
 8004d4e:	05d9      	lsls	r1, r3, #23
 8004d50:	f140 812e 	bpl.w	8004fb0 <HAL_RCC_OscConfig+0x344>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d54:	68a3      	ldr	r3, [r4, #8]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	f000 80fe 	beq.w	8004f58 <HAL_RCC_OscConfig+0x2ec>
 8004d5c:	2b05      	cmp	r3, #5
 8004d5e:	f000 8184 	beq.w	800506a <HAL_RCC_OscConfig+0x3fe>
 8004d62:	4e6e      	ldr	r6, [pc, #440]	@ (8004f1c <HAL_RCC_OscConfig+0x2b0>)
 8004d64:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8004d68:	f022 0201 	bic.w	r2, r2, #1
 8004d6c:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
 8004d70:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8004d74:	f022 0204 	bic.w	r2, r2, #4
 8004d78:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f040 80f2 	bne.w	8004f66 <HAL_RCC_OscConfig+0x2fa>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d82:	f7fd fb11 	bl	80023a8 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d86:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8004d8a:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d8c:	e005      	b.n	8004d9a <HAL_RCC_OscConfig+0x12e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d8e:	f7fd fb0b 	bl	80023a8 <HAL_GetTick>
 8004d92:	1bc0      	subs	r0, r0, r7
 8004d94:	4540      	cmp	r0, r8
 8004d96:	f200 80d9 	bhi.w	8004f4c <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d9a:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 8004d9e:	0799      	lsls	r1, r3, #30
 8004da0:	d4f5      	bmi.n	8004d8e <HAL_RCC_OscConfig+0x122>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004da2:	b125      	cbz	r5, 8004dae <HAL_RCC_OscConfig+0x142>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004da4:	4a5d      	ldr	r2, [pc, #372]	@ (8004f1c <HAL_RCC_OscConfig+0x2b0>)
 8004da6:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004da8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	069a      	lsls	r2, r3, #26
 8004db2:	d518      	bpl.n	8004de6 <HAL_RCC_OscConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004db4:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004db6:	4d59      	ldr	r5, [pc, #356]	@ (8004f1c <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 80e5 	beq.w	8004f88 <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_HSI48_ENABLE();
 8004dbe:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8004dc2:	f043 0301 	orr.w	r3, r3, #1
 8004dc6:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dca:	f7fd faed 	bl	80023a8 <HAL_GetTick>
 8004dce:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dd0:	e005      	b.n	8004dde <HAL_RCC_OscConfig+0x172>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dd2:	f7fd fae9 	bl	80023a8 <HAL_GetTick>
 8004dd6:	1b80      	subs	r0, r0, r6
 8004dd8:	2802      	cmp	r0, #2
 8004dda:	f200 80b7 	bhi.w	8004f4c <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dde:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8004de2:	079b      	lsls	r3, r3, #30
 8004de4:	d5f5      	bpl.n	8004dd2 <HAL_RCC_OscConfig+0x166>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004de6:	69e3      	ldr	r3, [r4, #28]
 8004de8:	b1f3      	cbz	r3, 8004e28 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dea:	4d4c      	ldr	r5, [pc, #304]	@ (8004f1c <HAL_RCC_OscConfig+0x2b0>)
 8004dec:	68aa      	ldr	r2, [r5, #8]
 8004dee:	f002 020c 	and.w	r2, r2, #12
 8004df2:	2a0c      	cmp	r2, #12
 8004df4:	f000 8147 	beq.w	8005086 <HAL_RCC_OscConfig+0x41a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004df8:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dfa:	682b      	ldr	r3, [r5, #0]
 8004dfc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e00:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e02:	f000 80f5 	beq.w	8004ff0 <HAL_RCC_OscConfig+0x384>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e06:	f7fd facf 	bl	80023a8 <HAL_GetTick>
 8004e0a:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e0c:	e005      	b.n	8004e1a <HAL_RCC_OscConfig+0x1ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e0e:	f7fd facb 	bl	80023a8 <HAL_GetTick>
 8004e12:	1b00      	subs	r0, r0, r4
 8004e14:	2802      	cmp	r0, #2
 8004e16:	f200 8099 	bhi.w	8004f4c <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e1a:	682b      	ldr	r3, [r5, #0]
 8004e1c:	019b      	lsls	r3, r3, #6
 8004e1e:	d4f6      	bmi.n	8004e0e <HAL_RCC_OscConfig+0x1a2>
            return HAL_TIMEOUT;
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004e20:	68ea      	ldr	r2, [r5, #12]
 8004e22:	4b41      	ldr	r3, [pc, #260]	@ (8004f28 <HAL_RCC_OscConfig+0x2bc>)
 8004e24:	4013      	ands	r3, r2
 8004e26:	60eb      	str	r3, [r5, #12]
      }
    }
  }
  }

  return HAL_OK;
 8004e28:	2000      	movs	r0, #0
}
 8004e2a:	b002      	add	sp, #8
 8004e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e30:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004e34:	2903      	cmp	r1, #3
 8004e36:	f43f af2e 	beq.w	8004c96 <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e3a:	6863      	ldr	r3, [r4, #4]
 8004e3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e40:	d055      	beq.n	8004eee <HAL_RCC_OscConfig+0x282>
 8004e42:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e46:	f000 80c4 	beq.w	8004fd2 <HAL_RCC_OscConfig+0x366>
 8004e4a:	4d34      	ldr	r5, [pc, #208]	@ (8004f1c <HAL_RCC_OscConfig+0x2b0>)
 8004e4c:	682a      	ldr	r2, [r5, #0]
 8004e4e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004e52:	602a      	str	r2, [r5, #0]
 8004e54:	682a      	ldr	r2, [r5, #0]
 8004e56:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004e5a:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d14b      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x28c>
        tickstart = HAL_GetTick();
 8004e60:	f7fd faa2 	bl	80023a8 <HAL_GetTick>
 8004e64:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e66:	e004      	b.n	8004e72 <HAL_RCC_OscConfig+0x206>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e68:	f7fd fa9e 	bl	80023a8 <HAL_GetTick>
 8004e6c:	1b80      	subs	r0, r0, r6
 8004e6e:	2864      	cmp	r0, #100	@ 0x64
 8004e70:	d86c      	bhi.n	8004f4c <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e72:	682b      	ldr	r3, [r5, #0]
 8004e74:	0399      	lsls	r1, r3, #14
 8004e76:	d4f7      	bmi.n	8004e68 <HAL_RCC_OscConfig+0x1fc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e78:	6823      	ldr	r3, [r4, #0]
 8004e7a:	079a      	lsls	r2, r3, #30
 8004e7c:	f57f af38 	bpl.w	8004cf0 <HAL_RCC_OscConfig+0x84>
 8004e80:	e713      	b.n	8004caa <HAL_RCC_OscConfig+0x3e>
      __HAL_RCC_LSI_DISABLE();
 8004e82:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8004e86:	f023 0301 	bic.w	r3, r3, #1
 8004e8a:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8004e8e:	f7fd fa8b 	bl	80023a8 <HAL_GetTick>
 8004e92:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e94:	e004      	b.n	8004ea0 <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e96:	f7fd fa87 	bl	80023a8 <HAL_GetTick>
 8004e9a:	1b80      	subs	r0, r0, r6
 8004e9c:	2802      	cmp	r0, #2
 8004e9e:	d855      	bhi.n	8004f4c <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ea0:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8004ea4:	079f      	lsls	r7, r3, #30
 8004ea6:	d4f6      	bmi.n	8004e96 <HAL_RCC_OscConfig+0x22a>
 8004ea8:	e73d      	b.n	8004d26 <HAL_RCC_OscConfig+0xba>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004eaa:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004eae:	2a02      	cmp	r2, #2
 8004eb0:	f43f af06 	beq.w	8004cc0 <HAL_RCC_OscConfig+0x54>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004eb4:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8004eb6:	4d19      	ldr	r5, [pc, #100]	@ (8004f1c <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d037      	beq.n	8004f2c <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 8004ebc:	682b      	ldr	r3, [r5, #0]
 8004ebe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ec2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004ec4:	f7fd fa70 	bl	80023a8 <HAL_GetTick>
 8004ec8:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eca:	e004      	b.n	8004ed6 <HAL_RCC_OscConfig+0x26a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ecc:	f7fd fa6c 	bl	80023a8 <HAL_GetTick>
 8004ed0:	1b80      	subs	r0, r0, r6
 8004ed2:	2802      	cmp	r0, #2
 8004ed4:	d83a      	bhi.n	8004f4c <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ed6:	682b      	ldr	r3, [r5, #0]
 8004ed8:	055f      	lsls	r7, r3, #21
 8004eda:	d5f7      	bpl.n	8004ecc <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004edc:	686b      	ldr	r3, [r5, #4]
 8004ede:	6922      	ldr	r2, [r4, #16]
 8004ee0:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004ee4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004ee8:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	e700      	b.n	8004cf0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eee:	4a0b      	ldr	r2, [pc, #44]	@ (8004f1c <HAL_RCC_OscConfig+0x2b0>)
 8004ef0:	6813      	ldr	r3, [r2, #0]
 8004ef2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ef6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004ef8:	f7fd fa56 	bl	80023a8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004efc:	4e07      	ldr	r6, [pc, #28]	@ (8004f1c <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8004efe:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f00:	e004      	b.n	8004f0c <HAL_RCC_OscConfig+0x2a0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f02:	f7fd fa51 	bl	80023a8 <HAL_GetTick>
 8004f06:	1b40      	subs	r0, r0, r5
 8004f08:	2864      	cmp	r0, #100	@ 0x64
 8004f0a:	d81f      	bhi.n	8004f4c <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f0c:	6833      	ldr	r3, [r6, #0]
 8004f0e:	039f      	lsls	r7, r3, #14
 8004f10:	d5f7      	bpl.n	8004f02 <HAL_RCC_OscConfig+0x296>
 8004f12:	e7b1      	b.n	8004e78 <HAL_RCC_OscConfig+0x20c>
    return HAL_ERROR;
 8004f14:	2001      	movs	r0, #1
}
 8004f16:	b002      	add	sp, #8
 8004f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	20000018 	.word	0x20000018
 8004f24:	40007000 	.word	0x40007000
 8004f28:	feeefffc 	.word	0xfeeefffc
        __HAL_RCC_HSI_DISABLE();
 8004f2c:	682b      	ldr	r3, [r5, #0]
 8004f2e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f32:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004f34:	f7fd fa38 	bl	80023a8 <HAL_GetTick>
 8004f38:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f3a:	682b      	ldr	r3, [r5, #0]
 8004f3c:	0559      	lsls	r1, r3, #21
 8004f3e:	f57f aed6 	bpl.w	8004cee <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f42:	f7fd fa31 	bl	80023a8 <HAL_GetTick>
 8004f46:	1b80      	subs	r0, r0, r6
 8004f48:	2802      	cmp	r0, #2
 8004f4a:	d9f6      	bls.n	8004f3a <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 8004f4c:	2003      	movs	r0, #3
}
 8004f4e:	b002      	add	sp, #8
 8004f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8004f54:	2500      	movs	r5, #0
 8004f56:	e6f8      	b.n	8004d4a <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f58:	4a65      	ldr	r2, [pc, #404]	@ (80050f0 <HAL_RCC_OscConfig+0x484>)
 8004f5a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004f5e:	f043 0301 	orr.w	r3, r3, #1
 8004f62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8004f66:	f7fd fa1f 	bl	80023a8 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f6a:	4f61      	ldr	r7, [pc, #388]	@ (80050f0 <HAL_RCC_OscConfig+0x484>)
      tickstart = HAL_GetTick();
 8004f6c:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f6e:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f72:	e004      	b.n	8004f7e <HAL_RCC_OscConfig+0x312>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f74:	f7fd fa18 	bl	80023a8 <HAL_GetTick>
 8004f78:	1b80      	subs	r0, r0, r6
 8004f7a:	4540      	cmp	r0, r8
 8004f7c:	d8e6      	bhi.n	8004f4c <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004f82:	079b      	lsls	r3, r3, #30
 8004f84:	d5f6      	bpl.n	8004f74 <HAL_RCC_OscConfig+0x308>
 8004f86:	e70c      	b.n	8004da2 <HAL_RCC_OscConfig+0x136>
      __HAL_RCC_HSI48_DISABLE();
 8004f88:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8004f8c:	f023 0301 	bic.w	r3, r3, #1
 8004f90:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8004f94:	f7fd fa08 	bl	80023a8 <HAL_GetTick>
 8004f98:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f9a:	e004      	b.n	8004fa6 <HAL_RCC_OscConfig+0x33a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f9c:	f7fd fa04 	bl	80023a8 <HAL_GetTick>
 8004fa0:	1b80      	subs	r0, r0, r6
 8004fa2:	2802      	cmp	r0, #2
 8004fa4:	d8d2      	bhi.n	8004f4c <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fa6:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8004faa:	079f      	lsls	r7, r3, #30
 8004fac:	d4f6      	bmi.n	8004f9c <HAL_RCC_OscConfig+0x330>
 8004fae:	e71a      	b.n	8004de6 <HAL_RCC_OscConfig+0x17a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fb0:	6833      	ldr	r3, [r6, #0]
 8004fb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fb6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004fb8:	f7fd f9f6 	bl	80023a8 <HAL_GetTick>
 8004fbc:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fbe:	6833      	ldr	r3, [r6, #0]
 8004fc0:	05da      	lsls	r2, r3, #23
 8004fc2:	f53f aec7 	bmi.w	8004d54 <HAL_RCC_OscConfig+0xe8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fc6:	f7fd f9ef 	bl	80023a8 <HAL_GetTick>
 8004fca:	1bc0      	subs	r0, r0, r7
 8004fcc:	2802      	cmp	r0, #2
 8004fce:	d9f6      	bls.n	8004fbe <HAL_RCC_OscConfig+0x352>
 8004fd0:	e7bc      	b.n	8004f4c <HAL_RCC_OscConfig+0x2e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fd2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004fd6:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004fe8:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fea:	e785      	b.n	8004ef8 <HAL_RCC_OscConfig+0x28c>
    return HAL_ERROR;
 8004fec:	2001      	movs	r0, #1
}
 8004fee:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8004ff0:	f7fd f9da 	bl	80023a8 <HAL_GetTick>
 8004ff4:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ff6:	e004      	b.n	8005002 <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ff8:	f7fd f9d6 	bl	80023a8 <HAL_GetTick>
 8004ffc:	1b80      	subs	r0, r0, r6
 8004ffe:	2802      	cmp	r0, #2
 8005000:	d8a4      	bhi.n	8004f4c <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005002:	682b      	ldr	r3, [r5, #0]
 8005004:	0199      	lsls	r1, r3, #6
 8005006:	d4f7      	bmi.n	8004ff8 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005008:	68e9      	ldr	r1, [r5, #12]
 800500a:	4b3a      	ldr	r3, [pc, #232]	@ (80050f4 <HAL_RCC_OscConfig+0x488>)
 800500c:	6a22      	ldr	r2, [r4, #32]
 800500e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005010:	4e37      	ldr	r6, [pc, #220]	@ (80050f0 <HAL_RCC_OscConfig+0x484>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005012:	400b      	ands	r3, r1
 8005014:	4313      	orrs	r3, r2
 8005016:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	@ 0x28
 800501a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800501e:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8005022:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	@ 0x30
 8005026:	3801      	subs	r0, #1
 8005028:	0849      	lsrs	r1, r1, #1
 800502a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800502e:	3901      	subs	r1, #1
 8005030:	0852      	lsrs	r2, r2, #1
 8005032:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8005036:	3a01      	subs	r2, #1
 8005038:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800503c:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800503e:	682b      	ldr	r3, [r5, #0]
 8005040:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005044:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005046:	68eb      	ldr	r3, [r5, #12]
 8005048:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800504c:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800504e:	f7fd f9ab 	bl	80023a8 <HAL_GetTick>
 8005052:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005054:	e005      	b.n	8005062 <HAL_RCC_OscConfig+0x3f6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005056:	f7fd f9a7 	bl	80023a8 <HAL_GetTick>
 800505a:	1b00      	subs	r0, r0, r4
 800505c:	2802      	cmp	r0, #2
 800505e:	f63f af75 	bhi.w	8004f4c <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005062:	6833      	ldr	r3, [r6, #0]
 8005064:	019a      	lsls	r2, r3, #6
 8005066:	d5f6      	bpl.n	8005056 <HAL_RCC_OscConfig+0x3ea>
 8005068:	e6de      	b.n	8004e28 <HAL_RCC_OscConfig+0x1bc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800506a:	4b21      	ldr	r3, [pc, #132]	@ (80050f0 <HAL_RCC_OscConfig+0x484>)
 800506c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005070:	f042 0204 	orr.w	r2, r2, #4
 8005074:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8005078:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800507c:	f042 0201 	orr.w	r2, r2, #1
 8005080:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005084:	e76f      	b.n	8004f66 <HAL_RCC_OscConfig+0x2fa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005086:	2b01      	cmp	r3, #1
 8005088:	f43f af44 	beq.w	8004f14 <HAL_RCC_OscConfig+0x2a8>
      temp_pllckcfg = RCC->PLLCFGR;
 800508c:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800508e:	6a22      	ldr	r2, [r4, #32]
 8005090:	f003 0103 	and.w	r1, r3, #3
 8005094:	4291      	cmp	r1, r2
 8005096:	f47f af3d 	bne.w	8004f14 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800509a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800509c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80050a0:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050a2:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80050a6:	f47f af35 	bne.w	8004f14 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80050aa:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80050ac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050b0:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80050b4:	f47f af2e 	bne.w	8004f14 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050b8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80050ba:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80050be:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80050c2:	f47f af27 	bne.w	8004f14 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050c6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80050c8:	0852      	lsrs	r2, r2, #1
 80050ca:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 80050ce:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050d0:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80050d4:	f47f af1e 	bne.w	8004f14 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80050d8:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80050da:	0852      	lsrs	r2, r2, #1
 80050dc:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 80050e0:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050e2:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80050e6:	bf14      	ite	ne
 80050e8:	2001      	movne	r0, #1
 80050ea:	2000      	moveq	r0, #0
 80050ec:	e69d      	b.n	8004e2a <HAL_RCC_OscConfig+0x1be>
 80050ee:	bf00      	nop
 80050f0:	40021000 	.word	0x40021000
 80050f4:	019f800c 	.word	0x019f800c

080050f8 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80050f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050fa:	b087      	sub	sp, #28
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80050fc:	2303      	movs	r3, #3
 80050fe:	9303      	str	r3, [sp, #12]
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8005100:	2502      	movs	r5, #2
 8005102:	2300      	movs	r3, #0
 8005104:	e9cd 5301 	strd	r5, r3, [sp, #4]
  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8005108:	4f0f      	ldr	r7, [pc, #60]	@ (8005148 <HAL_RCC_MCOConfig+0x50>)
{
 800510a:	4604      	mov	r4, r0
 800510c:	4616      	mov	r6, r2
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 800510e:	f3c0 4003 	ubfx	r0, r0, #16, #4
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8005112:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005114:	2301      	movs	r3, #1
 8005116:	4083      	lsls	r3, r0
 8005118:	4313      	orrs	r3, r2
 800511a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 800511c:	f500 1090 	add.w	r0, r0, #1179648	@ 0x120000

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8005120:	b2a3      	uxth	r3, r4
 8005122:	9300      	str	r3, [sp, #0]
{
 8005124:	460d      	mov	r5, r1
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8005126:	f3c4 5307 	ubfx	r3, r4, #20, #8
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 800512a:	0280      	lsls	r0, r0, #10
 800512c:	4669      	mov	r1, sp
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 800512e:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8005130:	f7fe fe46 	bl	8003dc0 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8005134:	00e3      	lsls	r3, r4, #3
 8005136:	d405      	bmi.n	8005144 <HAL_RCC_MCOConfig+0x4c>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800513e:	4333      	orrs	r3, r6
 8005140:	432b      	orrs	r3, r5
 8005142:	60bb      	str	r3, [r7, #8]
  }
}
 8005144:	b007      	add	sp, #28
 8005146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005148:	40021000 	.word	0x40021000

0800514c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800514c:	4b18      	ldr	r3, [pc, #96]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0x64>)
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	f002 020c 	and.w	r2, r2, #12
 8005154:	2a04      	cmp	r2, #4
 8005156:	d026      	beq.n	80051a6 <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005158:	689a      	ldr	r2, [r3, #8]
 800515a:	f002 020c 	and.w	r2, r2, #12
 800515e:	2a08      	cmp	r2, #8
 8005160:	d023      	beq.n	80051aa <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	f002 020c 	and.w	r2, r2, #12
 8005168:	2a0c      	cmp	r2, #12
 800516a:	d001      	beq.n	8005170 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 800516c:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 800516e:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005170:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005172:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005174:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005176:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 800517a:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800517c:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005180:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005184:	bf0c      	ite	eq
 8005186:	4b0b      	ldreq	r3, [pc, #44]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005188:	4b0b      	ldrne	r3, [pc, #44]	@ (80051b8 <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800518a:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800518c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005190:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005194:	4b06      	ldr	r3, [pc, #24]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0x64>)
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800519c:	3301      	adds	r3, #1
 800519e:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80051a0:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 80051a4:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 80051a6:	4804      	ldr	r0, [pc, #16]	@ (80051b8 <HAL_RCC_GetSysClockFreq+0x6c>)
 80051a8:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80051aa:	4802      	ldr	r0, [pc, #8]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0x68>)
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40021000 	.word	0x40021000
 80051b4:	017d7840 	.word	0x017d7840
 80051b8:	00f42400 	.word	0x00f42400

080051bc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80051bc:	2800      	cmp	r0, #0
 80051be:	f000 80ee 	beq.w	800539e <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051c2:	4a78      	ldr	r2, [pc, #480]	@ (80053a4 <HAL_RCC_ClockConfig+0x1e8>)
{
 80051c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051c8:	6813      	ldr	r3, [r2, #0]
 80051ca:	f003 030f 	and.w	r3, r3, #15
 80051ce:	428b      	cmp	r3, r1
 80051d0:	460d      	mov	r5, r1
 80051d2:	4604      	mov	r4, r0
 80051d4:	d20c      	bcs.n	80051f0 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051d6:	6813      	ldr	r3, [r2, #0]
 80051d8:	f023 030f 	bic.w	r3, r3, #15
 80051dc:	430b      	orrs	r3, r1
 80051de:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051e0:	6813      	ldr	r3, [r2, #0]
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	428b      	cmp	r3, r1
 80051e8:	d002      	beq.n	80051f0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80051ea:	2001      	movs	r0, #1
}
 80051ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051f0:	6823      	ldr	r3, [r4, #0]
 80051f2:	07df      	lsls	r7, r3, #31
 80051f4:	d569      	bpl.n	80052ca <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051f6:	6867      	ldr	r7, [r4, #4]
 80051f8:	2f03      	cmp	r7, #3
 80051fa:	f000 80a0 	beq.w	800533e <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051fe:	4b6a      	ldr	r3, [pc, #424]	@ (80053a8 <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005200:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005202:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005204:	f000 8097 	beq.w	8005336 <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005208:	055b      	lsls	r3, r3, #21
 800520a:	d5ee      	bpl.n	80051ea <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 800520c:	f7ff ff9e 	bl	800514c <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8005210:	4b66      	ldr	r3, [pc, #408]	@ (80053ac <HAL_RCC_ClockConfig+0x1f0>)
 8005212:	4298      	cmp	r0, r3
 8005214:	f240 80c0 	bls.w	8005398 <HAL_RCC_ClockConfig+0x1dc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005218:	4a63      	ldr	r2, [pc, #396]	@ (80053a8 <HAL_RCC_ClockConfig+0x1ec>)
 800521a:	6893      	ldr	r3, [r2, #8]
 800521c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005220:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005224:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005226:	f04f 0980 	mov.w	r9, #128	@ 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800522a:	4e5f      	ldr	r6, [pc, #380]	@ (80053a8 <HAL_RCC_ClockConfig+0x1ec>)
 800522c:	68b3      	ldr	r3, [r6, #8]
 800522e:	f023 0303 	bic.w	r3, r3, #3
 8005232:	433b      	orrs	r3, r7
 8005234:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8005236:	f7fd f8b7 	bl	80023a8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800523a:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 800523e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005240:	e004      	b.n	800524c <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005242:	f7fd f8b1 	bl	80023a8 <HAL_GetTick>
 8005246:	1bc0      	subs	r0, r0, r7
 8005248:	4540      	cmp	r0, r8
 800524a:	d871      	bhi.n	8005330 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800524c:	68b3      	ldr	r3, [r6, #8]
 800524e:	6862      	ldr	r2, [r4, #4]
 8005250:	f003 030c 	and.w	r3, r3, #12
 8005254:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005258:	d1f3      	bne.n	8005242 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800525a:	6823      	ldr	r3, [r4, #0]
 800525c:	079f      	lsls	r7, r3, #30
 800525e:	d436      	bmi.n	80052ce <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 8005260:	f1b9 0f00 	cmp.w	r9, #0
 8005264:	d003      	beq.n	800526e <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005266:	68b3      	ldr	r3, [r6, #8]
 8005268:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800526c:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800526e:	4e4d      	ldr	r6, [pc, #308]	@ (80053a4 <HAL_RCC_ClockConfig+0x1e8>)
 8005270:	6833      	ldr	r3, [r6, #0]
 8005272:	f003 030f 	and.w	r3, r3, #15
 8005276:	42ab      	cmp	r3, r5
 8005278:	d846      	bhi.n	8005308 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800527a:	6823      	ldr	r3, [r4, #0]
 800527c:	075a      	lsls	r2, r3, #29
 800527e:	d506      	bpl.n	800528e <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005280:	4949      	ldr	r1, [pc, #292]	@ (80053a8 <HAL_RCC_ClockConfig+0x1ec>)
 8005282:	68e0      	ldr	r0, [r4, #12]
 8005284:	688a      	ldr	r2, [r1, #8]
 8005286:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800528a:	4302      	orrs	r2, r0
 800528c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800528e:	071b      	lsls	r3, r3, #28
 8005290:	d507      	bpl.n	80052a2 <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005292:	4a45      	ldr	r2, [pc, #276]	@ (80053a8 <HAL_RCC_ClockConfig+0x1ec>)
 8005294:	6921      	ldr	r1, [r4, #16]
 8005296:	6893      	ldr	r3, [r2, #8]
 8005298:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800529c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80052a0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052a2:	f7ff ff53 	bl	800514c <HAL_RCC_GetSysClockFreq>
 80052a6:	4a40      	ldr	r2, [pc, #256]	@ (80053a8 <HAL_RCC_ClockConfig+0x1ec>)
 80052a8:	4c41      	ldr	r4, [pc, #260]	@ (80053b0 <HAL_RCC_ClockConfig+0x1f4>)
 80052aa:	6892      	ldr	r2, [r2, #8]
 80052ac:	4941      	ldr	r1, [pc, #260]	@ (80053b4 <HAL_RCC_ClockConfig+0x1f8>)
 80052ae:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80052b2:	4603      	mov	r3, r0
 80052b4:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 80052b6:	4840      	ldr	r0, [pc, #256]	@ (80053b8 <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052b8:	f002 021f 	and.w	r2, r2, #31
 80052bc:	40d3      	lsrs	r3, r2
 80052be:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 80052c0:	6800      	ldr	r0, [r0, #0]
}
 80052c2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 80052c6:	f7fd b82d 	b.w	8002324 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052ca:	079e      	lsls	r6, r3, #30
 80052cc:	d5cf      	bpl.n	800526e <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ce:	0758      	lsls	r0, r3, #29
 80052d0:	d504      	bpl.n	80052dc <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052d2:	4935      	ldr	r1, [pc, #212]	@ (80053a8 <HAL_RCC_ClockConfig+0x1ec>)
 80052d4:	688a      	ldr	r2, [r1, #8]
 80052d6:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80052da:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052dc:	0719      	lsls	r1, r3, #28
 80052de:	d506      	bpl.n	80052ee <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80052e0:	4a31      	ldr	r2, [pc, #196]	@ (80053a8 <HAL_RCC_ClockConfig+0x1ec>)
 80052e2:	6893      	ldr	r3, [r2, #8]
 80052e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80052e8:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80052ec:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052ee:	4a2e      	ldr	r2, [pc, #184]	@ (80053a8 <HAL_RCC_ClockConfig+0x1ec>)
 80052f0:	68a1      	ldr	r1, [r4, #8]
 80052f2:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052f4:	4e2b      	ldr	r6, [pc, #172]	@ (80053a4 <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052fa:	430b      	orrs	r3, r1
 80052fc:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052fe:	6833      	ldr	r3, [r6, #0]
 8005300:	f003 030f 	and.w	r3, r3, #15
 8005304:	42ab      	cmp	r3, r5
 8005306:	d9b8      	bls.n	800527a <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005308:	6833      	ldr	r3, [r6, #0]
 800530a:	f023 030f 	bic.w	r3, r3, #15
 800530e:	432b      	orrs	r3, r5
 8005310:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005312:	f7fd f849 	bl	80023a8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005316:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 800531a:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800531c:	6833      	ldr	r3, [r6, #0]
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	42ab      	cmp	r3, r5
 8005324:	d0a9      	beq.n	800527a <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005326:	f7fd f83f 	bl	80023a8 <HAL_GetTick>
 800532a:	1bc0      	subs	r0, r0, r7
 800532c:	4540      	cmp	r0, r8
 800532e:	d9f5      	bls.n	800531c <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 8005330:	2003      	movs	r0, #3
}
 8005332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005336:	039a      	lsls	r2, r3, #14
 8005338:	f53f af68 	bmi.w	800520c <HAL_RCC_ClockConfig+0x50>
 800533c:	e755      	b.n	80051ea <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800533e:	4a1a      	ldr	r2, [pc, #104]	@ (80053a8 <HAL_RCC_ClockConfig+0x1ec>)
 8005340:	6811      	ldr	r1, [r2, #0]
 8005342:	0188      	lsls	r0, r1, #6
 8005344:	f57f af51 	bpl.w	80051ea <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005348:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800534a:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800534c:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 800534e:	4e17      	ldr	r6, [pc, #92]	@ (80053ac <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005350:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 8005354:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005356:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800535a:	bf0c      	ite	eq
 800535c:	4817      	ldreq	r0, [pc, #92]	@ (80053bc <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800535e:	4818      	ldrne	r0, [pc, #96]	@ (80053c0 <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005360:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005362:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005366:	4810      	ldr	r0, [pc, #64]	@ (80053a8 <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005368:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800536c:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005370:	68c1      	ldr	r1, [r0, #12]
 8005372:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8005376:	3101      	adds	r1, #1
 8005378:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 800537a:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 800537e:	42b2      	cmp	r2, r6
 8005380:	d90a      	bls.n	8005398 <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005382:	6882      	ldr	r2, [r0, #8]
 8005384:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 8005388:	f43f af46 	beq.w	8005218 <HAL_RCC_ClockConfig+0x5c>
 800538c:	0799      	lsls	r1, r3, #30
 800538e:	d503      	bpl.n	8005398 <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005390:	68a3      	ldr	r3, [r4, #8]
 8005392:	2b00      	cmp	r3, #0
 8005394:	f43f af40 	beq.w	8005218 <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005398:	f04f 0900 	mov.w	r9, #0
 800539c:	e745      	b.n	800522a <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 800539e:	2001      	movs	r0, #1
}
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	40022000 	.word	0x40022000
 80053a8:	40021000 	.word	0x40021000
 80053ac:	04c4b400 	.word	0x04c4b400
 80053b0:	08007e48 	.word	0x08007e48
 80053b4:	20000008 	.word	0x20000008
 80053b8:	20000018 	.word	0x20000018
 80053bc:	017d7840 	.word	0x017d7840
 80053c0:	00f42400 	.word	0x00f42400

080053c4 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 80053c4:	4b01      	ldr	r3, [pc, #4]	@ (80053cc <HAL_RCC_GetHCLKFreq+0x8>)
}
 80053c6:	6818      	ldr	r0, [r3, #0]
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	20000008 	.word	0x20000008

080053d0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80053d0:	4b05      	ldr	r3, [pc, #20]	@ (80053e8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80053d2:	4a06      	ldr	r2, [pc, #24]	@ (80053ec <HAL_RCC_GetPCLK1Freq+0x1c>)
 80053d4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80053d6:	4906      	ldr	r1, [pc, #24]	@ (80053f0 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80053d8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80053dc:	6808      	ldr	r0, [r1, #0]
 80053de:	5cd3      	ldrb	r3, [r2, r3]
 80053e0:	f003 031f 	and.w	r3, r3, #31
}
 80053e4:	40d8      	lsrs	r0, r3
 80053e6:	4770      	bx	lr
 80053e8:	40021000 	.word	0x40021000
 80053ec:	08007e40 	.word	0x08007e40
 80053f0:	20000008 	.word	0x20000008

080053f4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80053f4:	4b05      	ldr	r3, [pc, #20]	@ (800540c <HAL_RCC_GetPCLK2Freq+0x18>)
 80053f6:	4a06      	ldr	r2, [pc, #24]	@ (8005410 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80053f8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80053fa:	4906      	ldr	r1, [pc, #24]	@ (8005414 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80053fc:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005400:	6808      	ldr	r0, [r1, #0]
 8005402:	5cd3      	ldrb	r3, [r2, r3]
 8005404:	f003 031f 	and.w	r3, r3, #31
}
 8005408:	40d8      	lsrs	r0, r3
 800540a:	4770      	bx	lr
 800540c:	40021000 	.word	0x40021000
 8005410:	08007e40 	.word	0x08007e40
 8005414:	20000008 	.word	0x20000008

08005418 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800541c:	6803      	ldr	r3, [r0, #0]
{
 800541e:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005420:	f413 2000 	ands.w	r0, r3, #524288	@ 0x80000
{
 8005424:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005426:	d052      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xb6>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005428:	4bac      	ldr	r3, [pc, #688]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800542a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800542c:	00d5      	lsls	r5, r2, #3
 800542e:	f140 813a 	bpl.w	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
    FlagStatus       pwrclkchanged = RESET;
 8005432:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005434:	4daa      	ldr	r5, [pc, #680]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005436:	682b      	ldr	r3, [r5, #0]
 8005438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800543c:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800543e:	f7fc ffb3 	bl	80023a8 <HAL_GetTick>
 8005442:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005444:	e005      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005446:	f7fc ffaf 	bl	80023a8 <HAL_GetTick>
 800544a:	1b83      	subs	r3, r0, r6
 800544c:	2b02      	cmp	r3, #2
 800544e:	f200 8135 	bhi.w	80056bc <HAL_RCCEx_PeriphCLKConfig+0x2a4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005452:	682b      	ldr	r3, [r5, #0]
 8005454:	05d8      	lsls	r0, r3, #23
 8005456:	d5f6      	bpl.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005458:	4da0      	ldr	r5, [pc, #640]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800545a:	6d22      	ldr	r2, [r4, #80]	@ 0x50
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800545c:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005460:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8005464:	d026      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8005466:	4293      	cmp	r3, r2
 8005468:	d024      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800546a:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800546e:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8005472:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005476:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800547a:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 800547e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005482:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005486:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800548a:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 800548c:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005490:	d510      	bpl.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005492:	f7fc ff89 	bl	80023a8 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005496:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800549a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800549c:	e005      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x92>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800549e:	f7fc ff83 	bl	80023a8 <HAL_GetTick>
 80054a2:	1b80      	subs	r0, r0, r6
 80054a4:	4540      	cmp	r0, r8
 80054a6:	f200 8109 	bhi.w	80056bc <HAL_RCCEx_PeriphCLKConfig+0x2a4>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054aa:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80054ae:	079b      	lsls	r3, r3, #30
 80054b0:	d5f5      	bpl.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x86>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054b2:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80054b4:	4989      	ldr	r1, [pc, #548]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054b6:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 80054ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054be:	4313      	orrs	r3, r2
 80054c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054c4:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054c6:	2000      	movs	r0, #0
    if(pwrclkchanged == SET)
 80054c8:	2f00      	cmp	r7, #0
 80054ca:	f040 80fc 	bne.w	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054ce:	07dd      	lsls	r5, r3, #31
 80054d0:	d508      	bpl.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054d2:	4982      	ldr	r1, [pc, #520]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054d4:	6865      	ldr	r5, [r4, #4]
 80054d6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80054da:	f022 0203 	bic.w	r2, r2, #3
 80054de:	432a      	orrs	r2, r5
 80054e0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054e4:	0799      	lsls	r1, r3, #30
 80054e6:	d508      	bpl.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054e8:	497c      	ldr	r1, [pc, #496]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054ea:	68a5      	ldr	r5, [r4, #8]
 80054ec:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80054f0:	f022 020c 	bic.w	r2, r2, #12
 80054f4:	432a      	orrs	r2, r5
 80054f6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054fa:	075a      	lsls	r2, r3, #29
 80054fc:	d508      	bpl.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054fe:	4977      	ldr	r1, [pc, #476]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005500:	68e5      	ldr	r5, [r4, #12]
 8005502:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005506:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800550a:	432a      	orrs	r2, r5
 800550c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005510:	071f      	lsls	r7, r3, #28
 8005512:	d508      	bpl.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005514:	4971      	ldr	r1, [pc, #452]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005516:	6925      	ldr	r5, [r4, #16]
 8005518:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800551c:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8005520:	432a      	orrs	r2, r5
 8005522:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005526:	06de      	lsls	r6, r3, #27
 8005528:	d508      	bpl.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800552a:	496c      	ldr	r1, [pc, #432]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800552c:	6965      	ldr	r5, [r4, #20]
 800552e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005532:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005536:	432a      	orrs	r2, r5
 8005538:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800553c:	069d      	lsls	r5, r3, #26
 800553e:	d508      	bpl.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005540:	4966      	ldr	r1, [pc, #408]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005542:	69a5      	ldr	r5, [r4, #24]
 8005544:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005548:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800554c:	432a      	orrs	r2, r5
 800554e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005552:	0659      	lsls	r1, r3, #25
 8005554:	d508      	bpl.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005556:	4961      	ldr	r1, [pc, #388]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005558:	69e5      	ldr	r5, [r4, #28]
 800555a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800555e:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8005562:	432a      	orrs	r2, r5
 8005564:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005568:	061a      	lsls	r2, r3, #24
 800556a:	d508      	bpl.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800556c:	495b      	ldr	r1, [pc, #364]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800556e:	6a25      	ldr	r5, [r4, #32]
 8005570:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005574:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005578:	432a      	orrs	r2, r5
 800557a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800557e:	05df      	lsls	r7, r3, #23
 8005580:	d508      	bpl.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005582:	4956      	ldr	r1, [pc, #344]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005584:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8005586:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800558a:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800558e:	432a      	orrs	r2, r5
 8005590:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005594:	039e      	lsls	r6, r3, #14
 8005596:	d508      	bpl.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005598:	4950      	ldr	r1, [pc, #320]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800559a:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 800559c:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 80055a0:	f022 0203 	bic.w	r2, r2, #3
 80055a4:	432a      	orrs	r2, r5
 80055a6:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055aa:	059d      	lsls	r5, r3, #22
 80055ac:	d508      	bpl.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055ae:	494b      	ldr	r1, [pc, #300]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80055b0:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 80055b2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80055b6:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 80055ba:	432a      	orrs	r2, r5
 80055bc:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80055c0:	0559      	lsls	r1, r3, #21
 80055c2:	d50b      	bpl.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055c4:	4945      	ldr	r1, [pc, #276]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80055c6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80055c8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80055cc:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80055d0:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80055d2:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055d6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80055da:	d07a      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80055dc:	051a      	lsls	r2, r3, #20
 80055de:	d50b      	bpl.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80055e0:	493e      	ldr	r1, [pc, #248]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80055e2:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 80055e4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80055e8:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 80055ec:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80055ee:	f5b5 0f80 	cmp.w	r5, #4194304	@ 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80055f2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80055f6:	d075      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80055f8:	04df      	lsls	r7, r3, #19
 80055fa:	d50b      	bpl.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80055fc:	4937      	ldr	r1, [pc, #220]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80055fe:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8005600:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005604:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005608:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800560a:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800560e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005612:	d06c      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005614:	049e      	lsls	r6, r3, #18
 8005616:	d50b      	bpl.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005618:	4930      	ldr	r1, [pc, #192]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800561a:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800561c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005620:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8005624:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005626:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800562a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800562e:	d063      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005630:	045d      	lsls	r5, r3, #17
 8005632:	d50b      	bpl.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005634:	4929      	ldr	r1, [pc, #164]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005636:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8005638:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800563c:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8005640:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005642:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005646:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800564a:	d05a      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800564c:	0419      	lsls	r1, r3, #16
 800564e:	d50b      	bpl.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005650:	4922      	ldr	r1, [pc, #136]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005652:	6c65      	ldr	r5, [r4, #68]	@ 0x44
 8005654:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005658:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800565c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800565e:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005662:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005666:	d051      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005668:	03da      	lsls	r2, r3, #15
 800566a:	d50b      	bpl.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800566c:	491b      	ldr	r1, [pc, #108]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800566e:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8005670:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005674:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8005678:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800567a:	f1b5 4f80 	cmp.w	r5, #1073741824	@ 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800567e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005682:	d048      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005684:	035b      	lsls	r3, r3, #13
 8005686:	d50b      	bpl.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005688:	4a14      	ldr	r2, [pc, #80]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800568a:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800568c:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8005690:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005694:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005696:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800569a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800569e:	d03f      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x308>
  }

#endif /* QUADSPI */

  return status;
}
 80056a0:	b002      	add	sp, #8
 80056a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80056a6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80056a8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80056ac:	659a      	str	r2, [r3, #88]	@ 0x58
 80056ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056b4:	9301      	str	r3, [sp, #4]
 80056b6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80056b8:	2701      	movs	r7, #1
 80056ba:	e6bb      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056bc:	6823      	ldr	r3, [r4, #0]
        status = ret;
 80056be:	2003      	movs	r0, #3
    if(pwrclkchanged == SET)
 80056c0:	2f00      	cmp	r7, #0
 80056c2:	f43f af04 	beq.w	80054ce <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80056c6:	4905      	ldr	r1, [pc, #20]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80056c8:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 80056ca:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80056ce:	658a      	str	r2, [r1, #88]	@ 0x58
 80056d0:	e6fd      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056d2:	68ca      	ldr	r2, [r1, #12]
 80056d4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80056d8:	60ca      	str	r2, [r1, #12]
 80056da:	e77f      	b.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 80056dc:	40021000 	.word	0x40021000
 80056e0:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056e4:	68ca      	ldr	r2, [r1, #12]
 80056e6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80056ea:	60ca      	str	r2, [r1, #12]
 80056ec:	e784      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056ee:	68ca      	ldr	r2, [r1, #12]
 80056f0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80056f4:	60ca      	str	r2, [r1, #12]
 80056f6:	e78d      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056f8:	68ca      	ldr	r2, [r1, #12]
 80056fa:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80056fe:	60ca      	str	r2, [r1, #12]
 8005700:	e796      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x218>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005702:	68ca      	ldr	r2, [r1, #12]
 8005704:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005708:	60ca      	str	r2, [r1, #12]
 800570a:	e79f      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x234>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800570c:	68ca      	ldr	r2, [r1, #12]
 800570e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005712:	60ca      	str	r2, [r1, #12]
 8005714:	e7a8      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005716:	68ca      	ldr	r2, [r1, #12]
 8005718:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800571c:	60ca      	str	r2, [r1, #12]
 800571e:	e7b1      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005720:	68d3      	ldr	r3, [r2, #12]
 8005722:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005726:	60d3      	str	r3, [r2, #12]
}
 8005728:	b002      	add	sp, #8
 800572a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800572e:	bf00      	nop

08005730 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005734:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005736:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005738:	460e      	mov	r6, r1
 800573a:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 800573c:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005740:	4605      	mov	r5, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005742:	f7fc fe31 	bl	80023a8 <HAL_GetTick>
 8005746:	4437      	add	r7, r6
 8005748:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 800574a:	f7fc fe2d 	bl	80023a8 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800574e:	4b32      	ldr	r3, [pc, #200]	@ (8005818 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe8>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005750:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005758:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800575c:	0d1b      	lsrs	r3, r3, #20
 800575e:	fb07 f303 	mul.w	r3, r7, r3
 8005762:	3601      	adds	r6, #1
 8005764:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8005766:	d111      	bne.n	800578c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5c>
 8005768:	68a3      	ldr	r3, [r4, #8]
 800576a:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 800576e:	d009      	beq.n	8005784 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005770:	7b23      	ldrb	r3, [r4, #12]
 8005772:	b2db      	uxtb	r3, r3
 8005774:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005778:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 800577c:	68a3      	ldr	r3, [r4, #8]
 800577e:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 8005782:	d1f5      	bne.n	8005770 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      }
      count--;
    }
  }

  return HAL_OK;
 8005784:	2000      	movs	r0, #0
}
 8005786:	b002      	add	sp, #8
 8005788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800578c:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800578e:	4623      	mov	r3, r4
 8005790:	e013      	b.n	80057ba <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
      tmpreg8 = *ptmpreg8;
 8005792:	7b23      	ldrb	r3, [r4, #12]
 8005794:	b2db      	uxtb	r3, r3
 8005796:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 800579a:	f89d 3003 	ldrb.w	r3, [sp, #3]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800579e:	f7fc fe03 	bl	80023a8 <HAL_GetTick>
 80057a2:	eba0 0008 	sub.w	r0, r0, r8
 80057a6:	42b8      	cmp	r0, r7
 80057a8:	d20c      	bcs.n	80057c4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x94>
      if (count == 0U)
 80057aa:	9a01      	ldr	r2, [sp, #4]
      count--;
 80057ac:	9b01      	ldr	r3, [sp, #4]
 80057ae:	3b01      	subs	r3, #1
        tmp_timeout = 0U;
 80057b0:	2a00      	cmp	r2, #0
      count--;
 80057b2:	9301      	str	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057b4:	682b      	ldr	r3, [r5, #0]
        tmp_timeout = 0U;
 80057b6:	bf08      	it	eq
 80057b8:	2700      	moveq	r7, #0
  while ((hspi->Instance->SR & Fifo) != State)
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 80057c0:	d1e7      	bne.n	8005792 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x62>
 80057c2:	e7df      	b.n	8005784 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057c4:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057c8:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057ca:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057ce:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80057d2:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057d4:	d013      	beq.n	80057fe <SPI_WaitFifoStateUntilTimeout.constprop.0+0xce>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057d6:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 80057d8:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80057dc:	d107      	bne.n	80057ee <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
          SPI_RESET_CRC(hspi);
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057e4:	601a      	str	r2, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80057ec:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80057ee:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 80057f0:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 80057f2:	f885 205d 	strb.w	r2, [r5, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80057f6:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80057fa:	2003      	movs	r0, #3
 80057fc:	e7c3      	b.n	8005786 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x56>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057fe:	68aa      	ldr	r2, [r5, #8]
 8005800:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8005804:	d002      	beq.n	800580c <SPI_WaitFifoStateUntilTimeout.constprop.0+0xdc>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005806:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800580a:	d1e4      	bne.n	80057d6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
          __HAL_SPI_DISABLE(hspi);
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005812:	601a      	str	r2, [r3, #0]
 8005814:	e7df      	b.n	80057d6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
 8005816:	bf00      	nop
 8005818:	20000008 	.word	0x20000008

0800581c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800581c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005820:	b085      	sub	sp, #20
  __IO uint8_t  tmpreg8 = 0;
 8005822:	2300      	movs	r3, #0
{
 8005824:	460e      	mov	r6, r1
  __IO uint8_t  tmpreg8 = 0;
 8005826:	f88d 3007 	strb.w	r3, [sp, #7]
 800582a:	eb01 0902 	add.w	r9, r1, r2
{
 800582e:	4617      	mov	r7, r2
 8005830:	4605      	mov	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005832:	f7fc fdb9 	bl	80023a8 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005836:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 800595c <SPI_EndRxTxTransaction+0x140>
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800583a:	eba9 0a00 	sub.w	sl, r9, r0
  tmp_tickstart = HAL_GetTick();
 800583e:	f7fc fdb3 	bl	80023a8 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005842:	f8d8 3000 	ldr.w	r3, [r8]
  while ((hspi->Instance->SR & Fifo) != State)
 8005846:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005848:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800584c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005850:	0d1b      	lsrs	r3, r3, #20
 8005852:	fb0a f303 	mul.w	r3, sl, r3
 8005856:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8005858:	1c73      	adds	r3, r6, #1
 800585a:	bf18      	it	ne
 800585c:	4683      	movne	fp, r0
 800585e:	d130      	bne.n	80058c2 <SPI_EndRxTxTransaction+0xa6>
 8005860:	68a3      	ldr	r3, [r4, #8]
 8005862:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 8005866:	d1fb      	bne.n	8005860 <SPI_EndRxTxTransaction+0x44>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005868:	f7fc fd9e 	bl	80023a8 <HAL_GetTick>
 800586c:	eba9 0900 	sub.w	r9, r9, r0
  tmp_tickstart = HAL_GetTick();
 8005870:	f7fc fd9a 	bl	80023a8 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005874:	f8d8 3000 	ldr.w	r3, [r8]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005878:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800587a:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800587e:	fb09 f303 	mul.w	r3, r9, r3
 8005882:	1c71      	adds	r1, r6, #1
  tmp_tickstart = HAL_GetTick();
 8005884:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005886:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005888:	d130      	bne.n	80058ec <SPI_EndRxTxTransaction+0xd0>
 800588a:	68a3      	ldr	r3, [r4, #8]
 800588c:	061a      	lsls	r2, r3, #24
 800588e:	d4fc      	bmi.n	800588a <SPI_EndRxTxTransaction+0x6e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005890:	463a      	mov	r2, r7
 8005892:	4631      	mov	r1, r6
 8005894:	4628      	mov	r0, r5
 8005896:	f7ff ff4b 	bl	8005730 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800589a:	bb58      	cbnz	r0, 80058f4 <SPI_EndRxTxTransaction+0xd8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800589c:	b005      	add	sp, #20
 800589e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058a2:	f7fc fd81 	bl	80023a8 <HAL_GetTick>
 80058a6:	eba0 000b 	sub.w	r0, r0, fp
 80058aa:	4582      	cmp	sl, r0
 80058ac:	d92a      	bls.n	8005904 <SPI_EndRxTxTransaction+0xe8>
      if (count == 0U)
 80058ae:	9a02      	ldr	r2, [sp, #8]
      count--;
 80058b0:	9b02      	ldr	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 80058b2:	682c      	ldr	r4, [r5, #0]
        tmp_timeout = 0U;
 80058b4:	2a00      	cmp	r2, #0
      count--;
 80058b6:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 80058ba:	bf08      	it	eq
 80058bc:	f04f 0a00 	moveq.w	sl, #0
      count--;
 80058c0:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 80058c2:	68a3      	ldr	r3, [r4, #8]
 80058c4:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 80058c8:	d1eb      	bne.n	80058a2 <SPI_EndRxTxTransaction+0x86>
 80058ca:	e7cd      	b.n	8005868 <SPI_EndRxTxTransaction+0x4c>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058cc:	f7fc fd6c 	bl	80023a8 <HAL_GetTick>
 80058d0:	eba0 0008 	sub.w	r0, r0, r8
 80058d4:	4581      	cmp	r9, r0
 80058d6:	d915      	bls.n	8005904 <SPI_EndRxTxTransaction+0xe8>
      if (count == 0U)
 80058d8:	9a03      	ldr	r2, [sp, #12]
      count--;
 80058da:	9b03      	ldr	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058dc:	682c      	ldr	r4, [r5, #0]
        tmp_timeout = 0U;
 80058de:	2a00      	cmp	r2, #0
      count--;
 80058e0:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 80058e4:	bf08      	it	eq
 80058e6:	f04f 0900 	moveq.w	r9, #0
      count--;
 80058ea:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058ec:	68a3      	ldr	r3, [r4, #8]
 80058ee:	061b      	lsls	r3, r3, #24
 80058f0:	d4ec      	bmi.n	80058cc <SPI_EndRxTxTransaction+0xb0>
 80058f2:	e7cd      	b.n	8005890 <SPI_EndRxTxTransaction+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058f4:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 80058f6:	f043 0320 	orr.w	r3, r3, #32
 80058fa:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 80058fc:	2003      	movs	r0, #3
}
 80058fe:	b005      	add	sp, #20
 8005900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005904:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005908:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800590a:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800590e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005912:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005914:	d016      	beq.n	8005944 <SPI_EndRxTxTransaction+0x128>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005916:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8005918:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800591c:	d107      	bne.n	800592e <SPI_EndRxTxTransaction+0x112>
          SPI_RESET_CRC(hspi);
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800592c:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800592e:	2301      	movs	r3, #1
 8005930:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005934:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        __HAL_UNLOCK(hspi);
 8005936:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005938:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hspi);
 800593c:	f885 205c 	strb.w	r2, [r5, #92]	@ 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005940:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005942:	e7db      	b.n	80058fc <SPI_EndRxTxTransaction+0xe0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005944:	68aa      	ldr	r2, [r5, #8]
 8005946:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800594a:	d002      	beq.n	8005952 <SPI_EndRxTxTransaction+0x136>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800594c:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005950:	d1e1      	bne.n	8005916 <SPI_EndRxTxTransaction+0xfa>
          __HAL_SPI_DISABLE(hspi);
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	e7dc      	b.n	8005916 <SPI_EndRxTxTransaction+0xfa>
 800595c:	20000008 	.word	0x20000008

08005960 <HAL_SPI_Init>:
  if (hspi == NULL)
 8005960:	2800      	cmp	r0, #0
 8005962:	d077      	beq.n	8005a54 <HAL_SPI_Init+0xf4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005964:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 8005966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800596a:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800596c:	2a00      	cmp	r2, #0
 800596e:	d057      	beq.n	8005a20 <HAL_SPI_Init+0xc0>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005970:	2300      	movs	r3, #0
 8005972:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005976:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800597a:	2100      	movs	r1, #0
 800597c:	62a1      	str	r1, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800597e:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8005982:	2b00      	cmp	r3, #0
 8005984:	d05a      	beq.n	8005a3c <HAL_SPI_Init+0xdc>
  __HAL_SPI_DISABLE(hspi);
 8005986:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005988:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800598a:	2302      	movs	r3, #2
 800598c:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8005990:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005992:	f5b7 6fe0 	cmp.w	r7, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 8005996:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800599a:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800599c:	d846      	bhi.n	8005a2c <HAL_SPI_Init+0xcc>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800599e:	d154      	bne.n	8005a4a <HAL_SPI_Init+0xea>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059a0:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80059a2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059a6:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 80059aa:	68a3      	ldr	r3, [r4, #8]
 80059ac:	69a6      	ldr	r6, [r4, #24]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80059ae:	f002 0c10 	and.w	ip, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059b2:	6862      	ldr	r2, [r4, #4]
 80059b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80059b8:	f402 7282 	and.w	r2, r2, #260	@ 0x104
 80059bc:	431a      	orrs	r2, r3
 80059be:	6923      	ldr	r3, [r4, #16]
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	4313      	orrs	r3, r2
 80059c6:	6962      	ldr	r2, [r4, #20]
 80059c8:	f002 0201 	and.w	r2, r2, #1
 80059cc:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80059ce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80059d0:	f407 6770 	and.w	r7, r7, #3840	@ 0xf00
 80059d4:	f003 0308 	and.w	r3, r3, #8
 80059d8:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059dc:	69e3      	ldr	r3, [r4, #28]
 80059de:	f003 0838 	and.w	r8, r3, #56	@ 0x38
 80059e2:	6a23      	ldr	r3, [r4, #32]
 80059e4:	f003 0780 	and.w	r7, r3, #128	@ 0x80
 80059e8:	f406 7300 	and.w	r3, r6, #512	@ 0x200
 80059ec:	4313      	orrs	r3, r2
 80059ee:	ea43 0308 	orr.w	r3, r3, r8
 80059f2:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80059f4:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059f6:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80059f8:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059fc:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80059fe:	ea4e 0306 	orr.w	r3, lr, r6
 8005a02:	ea43 030c 	orr.w	r3, r3, ip
 8005a06:	4303      	orrs	r3, r0
 8005a08:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a0a:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a0c:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8005a12:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a14:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a16:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a18:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
}
 8005a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a20:	6843      	ldr	r3, [r0, #4]
 8005a22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a26:	d0a6      	beq.n	8005976 <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a28:	61c2      	str	r2, [r0, #28]
 8005a2a:	e7a4      	b.n	8005976 <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a2c:	f5b7 6f70 	cmp.w	r7, #3840	@ 0xf00
 8005a30:	d112      	bne.n	8005a58 <HAL_SPI_Init+0xf8>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a32:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a34:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a36:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 8005a3a:	e7b6      	b.n	80059aa <HAL_SPI_Init+0x4a>
    hspi->Lock = HAL_UNLOCKED;
 8005a3c:	f884 105c 	strb.w	r1, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8005a40:	4620      	mov	r0, r4
 8005a42:	f7fb fe7d 	bl	8001740 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a46:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005a48:	e79d      	b.n	8005986 <HAL_SPI_Init+0x26>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a4a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a4e:	2500      	movs	r5, #0
 8005a50:	62a5      	str	r5, [r4, #40]	@ 0x28
 8005a52:	e7aa      	b.n	80059aa <HAL_SPI_Init+0x4a>
    return HAL_ERROR;
 8005a54:	2001      	movs	r0, #1
}
 8005a56:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a58:	2000      	movs	r0, #0
 8005a5a:	e7f8      	b.n	8005a4e <HAL_SPI_Init+0xee>

08005a5c <HAL_SPI_Transmit>:
{
 8005a5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a60:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8005a62:	f890 005c 	ldrb.w	r0, [r0, #92]	@ 0x5c
 8005a66:	2801      	cmp	r0, #1
{
 8005a68:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 8005a6a:	d07a      	beq.n	8005b62 <HAL_SPI_Transmit+0x106>
 8005a6c:	461d      	mov	r5, r3
 8005a6e:	2301      	movs	r3, #1
 8005a70:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8005a74:	4689      	mov	r9, r1
 8005a76:	4690      	mov	r8, r2
 8005a78:	f7fc fc96 	bl	80023a8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8005a7c:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8005a80:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8005a82:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005a84:	b2df      	uxtb	r7, r3
 8005a86:	d007      	beq.n	8005a98 <HAL_SPI_Transmit+0x3c>
    errorcode = HAL_BUSY;
 8005a88:	2702      	movs	r7, #2
  __HAL_UNLOCK(hspi);
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4638      	mov	r0, r7
  __HAL_UNLOCK(hspi);
 8005a8e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8005a92:	b003      	add	sp, #12
 8005a94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((pData == NULL) || (Size == 0U))
 8005a98:	f1b9 0f00 	cmp.w	r9, #0
 8005a9c:	d0f5      	beq.n	8005a8a <HAL_SPI_Transmit+0x2e>
 8005a9e:	f1b8 0f00 	cmp.w	r8, #0
 8005aa2:	d0f2      	beq.n	8005a8a <HAL_SPI_Transmit+0x2e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aa4:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8005aa6:	6823      	ldr	r3, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005aa8:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005aac:	2100      	movs	r1, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005aae:	2003      	movs	r0, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ab0:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ab4:	f884 005d 	strb.w	r0, [r4, #93]	@ 0x5d
  hspi->RxISR       = NULL;
 8005ab8:	e9c4 1113 	strd	r1, r1, [r4, #76]	@ 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005abc:	6621      	str	r1, [r4, #96]	@ 0x60
  hspi->TxXferSize  = Size;
 8005abe:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005ac2:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ac6:	6421      	str	r1, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005ac8:	f8a4 1044 	strh.w	r1, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005acc:	f8a4 1046 	strh.w	r1, [r4, #70]	@ 0x46
    __HAL_SPI_DISABLE(hspi);
 8005ad0:	4618      	mov	r0, r3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ad2:	d070      	beq.n	8005bb6 <HAL_SPI_Transmit+0x15a>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	0652      	lsls	r2, r2, #25
 8005ad8:	d403      	bmi.n	8005ae2 <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ae0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ae2:	68e2      	ldr	r2, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ae4:	6861      	ldr	r1, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ae6:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 8005aea:	d93f      	bls.n	8005b6c <HAL_SPI_Transmit+0x110>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005aec:	2900      	cmp	r1, #0
 8005aee:	f000 80a2 	beq.w	8005c36 <HAL_SPI_Transmit+0x1da>
 8005af2:	f1b8 0f01 	cmp.w	r8, #1
 8005af6:	f000 809e 	beq.w	8005c36 <HAL_SPI_Transmit+0x1da>
    while (hspi->TxXferCount > 0U)
 8005afa:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8005afc:	b292      	uxth	r2, r2
 8005afe:	b1ba      	cbz	r2, 8005b30 <HAL_SPI_Transmit+0xd4>
 8005b00:	1c69      	adds	r1, r5, #1
 8005b02:	f040 808f 	bne.w	8005c24 <HAL_SPI_Transmit+0x1c8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b06:	689a      	ldr	r2, [r3, #8]
 8005b08:	0792      	lsls	r2, r2, #30
 8005b0a:	f140 80ac 	bpl.w	8005c66 <HAL_SPI_Transmit+0x20a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b0e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005b10:	f832 1b02 	ldrh.w	r1, [r2], #2
 8005b14:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 8005b16:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b1a:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8005b1c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005b20:	fa1f fc8c 	uxth.w	ip, ip
 8005b24:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8005b28:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8005b2a:	b292      	uxth	r2, r2
 8005b2c:	2a00      	cmp	r2, #0
 8005b2e:	d1ea      	bne.n	8005b06 <HAL_SPI_Transmit+0xaa>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b30:	4632      	mov	r2, r6
 8005b32:	4629      	mov	r1, r5
 8005b34:	4620      	mov	r0, r4
 8005b36:	f7ff fe71 	bl	800581c <SPI_EndRxTxTransaction>
 8005b3a:	b108      	cbz	r0, 8005b40 <HAL_SPI_Transmit+0xe4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b3c:	2320      	movs	r3, #32
 8005b3e:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b40:	68a3      	ldr	r3, [r4, #8]
 8005b42:	b933      	cbnz	r3, 8005b52 <HAL_SPI_Transmit+0xf6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b44:	6822      	ldr	r2, [r4, #0]
 8005b46:	9301      	str	r3, [sp, #4]
 8005b48:	68d3      	ldr	r3, [r2, #12]
 8005b4a:	9301      	str	r3, [sp, #4]
 8005b4c:	6893      	ldr	r3, [r2, #8]
 8005b4e:	9301      	str	r3, [sp, #4]
 8005b50:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b52:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d198      	bne.n	8005a8a <HAL_SPI_Transmit+0x2e>
    hspi->State = HAL_SPI_STATE_READY;
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b5e:	461f      	mov	r7, r3
 8005b60:	e793      	b.n	8005a8a <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 8005b62:	2702      	movs	r7, #2
}
 8005b64:	4638      	mov	r0, r7
 8005b66:	b003      	add	sp, #12
 8005b68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b6c:	2900      	cmp	r1, #0
 8005b6e:	d06c      	beq.n	8005c4a <HAL_SPI_Transmit+0x1ee>
 8005b70:	f1b8 0f01 	cmp.w	r8, #1
 8005b74:	d069      	beq.n	8005c4a <HAL_SPI_Transmit+0x1ee>
    while (hspi->TxXferCount > 0U)
 8005b76:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d0d8      	beq.n	8005b30 <HAL_SPI_Transmit+0xd4>
 8005b7e:	1c68      	adds	r0, r5, #1
 8005b80:	d012      	beq.n	8005ba8 <HAL_SPI_Transmit+0x14c>
 8005b82:	e033      	b.n	8005bec <HAL_SPI_Transmit+0x190>
        if (hspi->TxXferCount > 1U)
 8005b84:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b86:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	2b01      	cmp	r3, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b8c:	4601      	mov	r1, r0
        if (hspi->TxXferCount > 1U)
 8005b8e:	d973      	bls.n	8005c78 <HAL_SPI_Transmit+0x21c>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b90:	f831 3b02 	ldrh.w	r3, [r1], #2
 8005b94:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 8005b96:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b98:	63a1      	str	r1, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005b9a:	3b02      	subs	r3, #2
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8005ba0:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 8005ba2:	b289      	uxth	r1, r1
 8005ba4:	2900      	cmp	r1, #0
 8005ba6:	d0c3      	beq.n	8005b30 <HAL_SPI_Transmit+0xd4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ba8:	6822      	ldr	r2, [r4, #0]
 8005baa:	6893      	ldr	r3, [r2, #8]
 8005bac:	0799      	lsls	r1, r3, #30
 8005bae:	d4e9      	bmi.n	8005b84 <HAL_SPI_Transmit+0x128>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bb0:	f7fc fbfa 	bl	80023a8 <HAL_GetTick>
 8005bb4:	e7f4      	b.n	8005ba0 <HAL_SPI_Transmit+0x144>
    __HAL_SPI_DISABLE(hspi);
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bbc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	e785      	b.n	8005ad4 <HAL_SPI_Transmit+0x78>
        if (hspi->TxXferCount > 1U)
 8005bc8:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bca:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 8005bcc:	b292      	uxth	r2, r2
 8005bce:	2a01      	cmp	r2, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bd0:	4601      	mov	r1, r0
        if (hspi->TxXferCount > 1U)
 8005bd2:	d966      	bls.n	8005ca2 <HAL_SPI_Transmit+0x246>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bd4:	f831 2b02 	ldrh.w	r2, [r1], #2
 8005bd8:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 8005bda:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bdc:	63a1      	str	r1, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005bde:	3b02      	subs	r3, #2
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8005be4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d0a1      	beq.n	8005b30 <HAL_SPI_Transmit+0xd4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bec:	6823      	ldr	r3, [r4, #0]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	0792      	lsls	r2, r2, #30
 8005bf2:	d4e9      	bmi.n	8005bc8 <HAL_SPI_Transmit+0x16c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bf4:	f7fc fbd8 	bl	80023a8 <HAL_GetTick>
 8005bf8:	1b83      	subs	r3, r0, r6
 8005bfa:	42ab      	cmp	r3, r5
 8005bfc:	d3f2      	bcc.n	8005be4 <HAL_SPI_Transmit+0x188>
          hspi->State = HAL_SPI_STATE_READY;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 8005c04:	2703      	movs	r7, #3
 8005c06:	e740      	b.n	8005a8a <HAL_SPI_Transmit+0x2e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c08:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005c0a:	f832 3b02 	ldrh.w	r3, [r2], #2
 8005c0e:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 8005c10:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c12:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8005c14:	3b01      	subs	r3, #1
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8005c1a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d086      	beq.n	8005b30 <HAL_SPI_Transmit+0xd4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c22:	6820      	ldr	r0, [r4, #0]
 8005c24:	6883      	ldr	r3, [r0, #8]
 8005c26:	079b      	lsls	r3, r3, #30
 8005c28:	d4ee      	bmi.n	8005c08 <HAL_SPI_Transmit+0x1ac>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c2a:	f7fc fbbd 	bl	80023a8 <HAL_GetTick>
 8005c2e:	1b83      	subs	r3, r0, r6
 8005c30:	42ab      	cmp	r3, r5
 8005c32:	d3f2      	bcc.n	8005c1a <HAL_SPI_Transmit+0x1be>
 8005c34:	e7e3      	b.n	8005bfe <HAL_SPI_Transmit+0x1a2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c36:	4649      	mov	r1, r9
 8005c38:	f831 2b02 	ldrh.w	r2, [r1], #2
 8005c3c:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8005c3e:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c40:	63a1      	str	r1, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8005c42:	3a01      	subs	r2, #1
 8005c44:	b292      	uxth	r2, r2
 8005c46:	87e2      	strh	r2, [r4, #62]	@ 0x3e
 8005c48:	e757      	b.n	8005afa <HAL_SPI_Transmit+0x9e>
      if (hspi->TxXferCount > 1U)
 8005c4a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8005c4c:	b292      	uxth	r2, r2
 8005c4e:	2a01      	cmp	r2, #1
 8005c50:	d91c      	bls.n	8005c8c <HAL_SPI_Transmit+0x230>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c52:	4649      	mov	r1, r9
 8005c54:	f831 2b02 	ldrh.w	r2, [r1], #2
 8005c58:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8005c5a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c5c:	63a1      	str	r1, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005c5e:	3b02      	subs	r3, #2
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8005c64:	e787      	b.n	8005b76 <HAL_SPI_Transmit+0x11a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c66:	f7fc fb9f 	bl	80023a8 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8005c6a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f43f af5e 	beq.w	8005b30 <HAL_SPI_Transmit+0xd4>
 8005c74:	6823      	ldr	r3, [r4, #0]
 8005c76:	e746      	b.n	8005b06 <HAL_SPI_Transmit+0xaa>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c78:	7803      	ldrb	r3, [r0, #0]
 8005c7a:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 8005c7c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 8005c7e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8005c80:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 8005c82:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 8005c84:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8005c86:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8005c88:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8005c8a:	e789      	b.n	8005ba0 <HAL_SPI_Transmit+0x144>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c8c:	f899 2000 	ldrb.w	r2, [r9]
 8005c90:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8005c92:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005c94:	3301      	adds	r3, #1
 8005c96:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8005c98:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8005ca0:	e769      	b.n	8005b76 <HAL_SPI_Transmit+0x11a>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ca2:	7802      	ldrb	r2, [r0, #0]
 8005ca4:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8005ca6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 8005ca8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8005caa:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 8005cac:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 8005cae:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8005cb0:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8005cb2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8005cb4:	e796      	b.n	8005be4 <HAL_SPI_Transmit+0x188>
 8005cb6:	bf00      	nop

08005cb8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	f000 8099 	beq.w	8005df0 <HAL_TIM_Base_Init+0x138>
{
 8005cbe:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cc0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005cc4:	4604      	mov	r4, r0
 8005cc6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d07d      	beq.n	8005dca <HAL_TIM_Base_Init+0x112>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cce:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cd0:	4948      	ldr	r1, [pc, #288]	@ (8005df4 <HAL_TIM_Base_Init+0x13c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cd8:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8005cda:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cdc:	d061      	beq.n	8005da2 <HAL_TIM_Base_Init+0xea>
 8005cde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ce2:	d029      	beq.n	8005d38 <HAL_TIM_Base_Init+0x80>
 8005ce4:	f5a1 3194 	sub.w	r1, r1, #75776	@ 0x12800
 8005ce8:	428b      	cmp	r3, r1
 8005cea:	d025      	beq.n	8005d38 <HAL_TIM_Base_Init+0x80>
 8005cec:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005cf0:	428b      	cmp	r3, r1
 8005cf2:	d021      	beq.n	8005d38 <HAL_TIM_Base_Init+0x80>
 8005cf4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005cf8:	428b      	cmp	r3, r1
 8005cfa:	d01d      	beq.n	8005d38 <HAL_TIM_Base_Init+0x80>
 8005cfc:	f501 3194 	add.w	r1, r1, #75776	@ 0x12800
 8005d00:	428b      	cmp	r3, r1
 8005d02:	d04e      	beq.n	8005da2 <HAL_TIM_Base_Init+0xea>
 8005d04:	f501 51e0 	add.w	r1, r1, #7168	@ 0x1c00
 8005d08:	428b      	cmp	r3, r1
 8005d0a:	d04a      	beq.n	8005da2 <HAL_TIM_Base_Init+0xea>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d0c:	f5a1 5180 	sub.w	r1, r1, #4096	@ 0x1000
 8005d10:	428b      	cmp	r3, r1
 8005d12:	d05f      	beq.n	8005dd4 <HAL_TIM_Base_Init+0x11c>
 8005d14:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005d18:	428b      	cmp	r3, r1
 8005d1a:	d05b      	beq.n	8005dd4 <HAL_TIM_Base_Init+0x11c>
 8005d1c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005d20:	428b      	cmp	r3, r1
 8005d22:	d057      	beq.n	8005dd4 <HAL_TIM_Base_Init+0x11c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d24:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d26:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d28:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d2a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d2e:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8005d30:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d32:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005d34:	6299      	str	r1, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d36:	e010      	b.n	8005d5a <HAL_TIM_Base_Init+0xa2>
    tmpcr1 |= Structure->CounterMode;
 8005d38:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d3a:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d3c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005d40:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d42:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d46:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d48:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d4e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d50:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 8005d52:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005d54:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d56:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005d58:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d5e:	691a      	ldr	r2, [r3, #16]
 8005d60:	07d2      	lsls	r2, r2, #31
 8005d62:	d503      	bpl.n	8005d6c <HAL_TIM_Base_Init+0xb4>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d64:	691a      	ldr	r2, [r3, #16]
 8005d66:	f022 0201 	bic.w	r2, r2, #1
 8005d6a:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d72:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005d76:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005d7a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005d7e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8005d82:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d8a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005d8e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8005d92:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8005d96:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005d9a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8005d9e:	2000      	movs	r0, #0
}
 8005da0:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8005da2:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005da4:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005da6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005daa:	4302      	orrs	r2, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dac:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005db0:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005db2:	69a1      	ldr	r1, [r4, #24]
 8005db4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005db8:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8005dba:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dbc:	68e2      	ldr	r2, [r4, #12]
 8005dbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005dc0:	6862      	ldr	r2, [r4, #4]
 8005dc2:	629a      	str	r2, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005dc4:	6962      	ldr	r2, [r4, #20]
 8005dc6:	631a      	str	r2, [r3, #48]	@ 0x30
 8005dc8:	e7c7      	b.n	8005d5a <HAL_TIM_Base_Init+0xa2>
    htim->Lock = HAL_UNLOCKED;
 8005dca:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005dce:	f7fb fcf3 	bl	80017b8 <HAL_TIM_Base_MspInit>
 8005dd2:	e77c      	b.n	8005cce <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dd4:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dd6:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dd8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ddc:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dde:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005de2:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005de4:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 8005de6:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005de8:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dea:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005dec:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dee:	e7e9      	b.n	8005dc4 <HAL_TIM_Base_Init+0x10c>
    return HAL_ERROR;
 8005df0:	2001      	movs	r0, #1
}
 8005df2:	4770      	bx	lr
 8005df4:	40012c00 	.word	0x40012c00

08005df8 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005df8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d12f      	bne.n	8005e60 <HAL_TIM_Base_Start+0x68>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e00:	6803      	ldr	r3, [r0, #0]
 8005e02:	4a18      	ldr	r2, [pc, #96]	@ (8005e64 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005e04:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e06:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 8005e08:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e0c:	d01a      	beq.n	8005e44 <HAL_TIM_Base_Start+0x4c>
 8005e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e12:	d017      	beq.n	8005e44 <HAL_TIM_Base_Start+0x4c>
 8005e14:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d013      	beq.n	8005e44 <HAL_TIM_Base_Start+0x4c>
 8005e1c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d00f      	beq.n	8005e44 <HAL_TIM_Base_Start+0x4c>
 8005e24:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d00b      	beq.n	8005e44 <HAL_TIM_Base_Start+0x4c>
 8005e2c:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d007      	beq.n	8005e44 <HAL_TIM_Base_Start+0x4c>
 8005e34:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d003      	beq.n	8005e44 <HAL_TIM_Base_Start+0x4c>
 8005e3c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d107      	bne.n	8005e54 <HAL_TIM_Base_Start+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e44:	6899      	ldr	r1, [r3, #8]
 8005e46:	4a08      	ldr	r2, [pc, #32]	@ (8005e68 <HAL_TIM_Base_Start+0x70>)
 8005e48:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e4a:	2a06      	cmp	r2, #6
 8005e4c:	d006      	beq.n	8005e5c <HAL_TIM_Base_Start+0x64>
 8005e4e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8005e52:	d003      	beq.n	8005e5c <HAL_TIM_Base_Start+0x64>
      __HAL_TIM_ENABLE(htim);
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	f042 0201 	orr.w	r2, r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005e5c:	2000      	movs	r0, #0
 8005e5e:	4770      	bx	lr
    return HAL_ERROR;
 8005e60:	2001      	movs	r0, #1
}
 8005e62:	4770      	bx	lr
 8005e64:	40012c00 	.word	0x40012c00
 8005e68:	00010007 	.word	0x00010007

08005e6c <HAL_TIM_Base_Stop>:
  __HAL_TIM_DISABLE(htim);
 8005e6c:	6803      	ldr	r3, [r0, #0]
 8005e6e:	6a19      	ldr	r1, [r3, #32]
 8005e70:	f241 1211 	movw	r2, #4369	@ 0x1111
 8005e74:	4211      	tst	r1, r2
 8005e76:	d108      	bne.n	8005e8a <HAL_TIM_Base_Stop+0x1e>
 8005e78:	6a19      	ldr	r1, [r3, #32]
 8005e7a:	f244 4244 	movw	r2, #17476	@ 0x4444
 8005e7e:	4211      	tst	r1, r2
 8005e80:	d103      	bne.n	8005e8a <HAL_TIM_Base_Stop+0x1e>
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	f022 0201 	bic.w	r2, r2, #1
 8005e88:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
}
 8005e90:	2000      	movs	r0, #0
 8005e92:	4770      	bx	lr

08005e94 <HAL_TIM_IC_MspInit>:
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop

08005e98 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	f000 8099 	beq.w	8005fd0 <HAL_TIM_IC_Init+0x138>
{
 8005e9e:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005ea0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005ea4:	4604      	mov	r4, r0
 8005ea6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d07d      	beq.n	8005faa <HAL_TIM_IC_Init+0x112>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eae:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005eb0:	4948      	ldr	r1, [pc, #288]	@ (8005fd4 <HAL_TIM_IC_Init+0x13c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005eb8:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8005eba:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ebc:	d061      	beq.n	8005f82 <HAL_TIM_IC_Init+0xea>
 8005ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ec2:	d029      	beq.n	8005f18 <HAL_TIM_IC_Init+0x80>
 8005ec4:	f5a1 3194 	sub.w	r1, r1, #75776	@ 0x12800
 8005ec8:	428b      	cmp	r3, r1
 8005eca:	d025      	beq.n	8005f18 <HAL_TIM_IC_Init+0x80>
 8005ecc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005ed0:	428b      	cmp	r3, r1
 8005ed2:	d021      	beq.n	8005f18 <HAL_TIM_IC_Init+0x80>
 8005ed4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005ed8:	428b      	cmp	r3, r1
 8005eda:	d01d      	beq.n	8005f18 <HAL_TIM_IC_Init+0x80>
 8005edc:	f501 3194 	add.w	r1, r1, #75776	@ 0x12800
 8005ee0:	428b      	cmp	r3, r1
 8005ee2:	d04e      	beq.n	8005f82 <HAL_TIM_IC_Init+0xea>
 8005ee4:	f501 51e0 	add.w	r1, r1, #7168	@ 0x1c00
 8005ee8:	428b      	cmp	r3, r1
 8005eea:	d04a      	beq.n	8005f82 <HAL_TIM_IC_Init+0xea>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eec:	f5a1 5180 	sub.w	r1, r1, #4096	@ 0x1000
 8005ef0:	428b      	cmp	r3, r1
 8005ef2:	d05f      	beq.n	8005fb4 <HAL_TIM_IC_Init+0x11c>
 8005ef4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005ef8:	428b      	cmp	r3, r1
 8005efa:	d05b      	beq.n	8005fb4 <HAL_TIM_IC_Init+0x11c>
 8005efc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005f00:	428b      	cmp	r3, r1
 8005f02:	d057      	beq.n	8005fb4 <HAL_TIM_IC_Init+0x11c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f04:	69a5      	ldr	r5, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 8005f06:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f08:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f0a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f0e:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8005f10:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f12:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005f14:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f16:	e010      	b.n	8005f3a <HAL_TIM_IC_Init+0xa2>
    tmpcr1 |= Structure->CounterMode;
 8005f18:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f1a:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f1c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005f20:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f22:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f26:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f28:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f2a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f2e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f30:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 8005f32:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005f34:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f36:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005f38:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f3e:	691a      	ldr	r2, [r3, #16]
 8005f40:	07d2      	lsls	r2, r2, #31
 8005f42:	d503      	bpl.n	8005f4c <HAL_TIM_IC_Init+0xb4>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f44:	691a      	ldr	r2, [r3, #16]
 8005f46:	f022 0201 	bic.w	r2, r2, #1
 8005f4a:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f52:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005f56:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005f5a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005f5e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8005f62:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f6a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005f6e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8005f72:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8005f76:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005f7a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8005f7e:	2000      	movs	r0, #0
}
 8005f80:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8005f82:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f84:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f86:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005f8a:	4302      	orrs	r2, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f8c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f90:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f92:	69a1      	ldr	r1, [r4, #24]
 8005f94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f98:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8005f9a:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f9c:	68e2      	ldr	r2, [r4, #12]
 8005f9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005fa0:	6862      	ldr	r2, [r4, #4]
 8005fa2:	629a      	str	r2, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005fa4:	6962      	ldr	r2, [r4, #20]
 8005fa6:	631a      	str	r2, [r3, #48]	@ 0x30
 8005fa8:	e7c7      	b.n	8005f3a <HAL_TIM_IC_Init+0xa2>
    htim->Lock = HAL_UNLOCKED;
 8005faa:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_IC_MspInit(htim);
 8005fae:	f7ff ff71 	bl	8005e94 <HAL_TIM_IC_MspInit>
 8005fb2:	e77c      	b.n	8005eae <HAL_TIM_IC_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fb4:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fb6:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fb8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fbc:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fbe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fc2:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fc4:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 8005fc6:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005fc8:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fca:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005fcc:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fce:	e7e9      	b.n	8005fa4 <HAL_TIM_IC_Init+0x10c>
    return HAL_ERROR;
 8005fd0:	2001      	movs	r0, #1
}
 8005fd2:	4770      	bx	lr
 8005fd4:	40012c00 	.word	0x40012c00

08005fd8 <HAL_TIM_IC_Start_DMA>:
{
 8005fd8:	b570      	push	{r4, r5, r6, lr}
 8005fda:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005fdc:	2910      	cmp	r1, #16
 8005fde:	d83b      	bhi.n	8006058 <HAL_TIM_IC_Start_DMA+0x80>
 8005fe0:	e8df f001 	tbb	[pc, r1]
 8005fe4:	3a3a3a09 	.word	0x3a3a3a09
 8005fe8:	3a3a3a42 	.word	0x3a3a3a42
 8005fec:	3a3a3a4e 	.word	0x3a3a3a4e
 8005ff0:	3a3a3a56 	.word	0x3a3a3a56
 8005ff4:	4a          	.byte	0x4a
 8005ff5:	00          	.byte	0x00
 8005ff6:	f894 003e 	ldrb.w	r0, [r4, #62]	@ 0x3e
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005ffa:	f894 c044 	ldrb.w	ip, [r4, #68]	@ 0x44
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005ffe:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006000:	fa5f fc8c 	uxtb.w	ip, ip
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8006004:	2802      	cmp	r0, #2
 8006006:	d026      	beq.n	8006056 <HAL_TIM_IC_Start_DMA+0x7e>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8006008:	f1bc 0f02 	cmp.w	ip, #2
 800600c:	d044      	beq.n	8006098 <HAL_TIM_IC_Start_DMA+0xc0>
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800600e:	2801      	cmp	r0, #1
 8006010:	d120      	bne.n	8006054 <HAL_TIM_IC_Start_DMA+0x7c>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8006012:	f1bc 0f01 	cmp.w	ip, #1
 8006016:	d11d      	bne.n	8006054 <HAL_TIM_IC_Start_DMA+0x7c>
    if ((pData == NULL) || (Length == 0U))
 8006018:	b1e2      	cbz	r2, 8006054 <HAL_TIM_IC_Start_DMA+0x7c>
 800601a:	b1db      	cbz	r3, 8006054 <HAL_TIM_IC_Start_DMA+0x7c>

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800601c:	f001 001f 	and.w	r0, r1, #31
 8006020:	fa0c fc00 	lsl.w	ip, ip, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006024:	6825      	ldr	r5, [r4, #0]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006026:	ea6f 000c 	mvn.w	r0, ip
 800602a:	2910      	cmp	r1, #16
 800602c:	d836      	bhi.n	800609c <HAL_TIM_IC_Start_DMA+0xc4>
 800602e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006032:	00a3      	.short	0x00a3
 8006034:	00350035 	.word	0x00350035
 8006038:	00830035 	.word	0x00830035
 800603c:	00350035 	.word	0x00350035
 8006040:	00c30035 	.word	0x00c30035
 8006044:	00350035 	.word	0x00350035
 8006048:	00e30035 	.word	0x00e30035
 800604c:	00350035 	.word	0x00350035
 8006050:	004b0035 	.word	0x004b0035
      return HAL_ERROR;
 8006054:	2001      	movs	r0, #1
}
 8006056:	bd70      	pop	{r4, r5, r6, pc}
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006058:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800605c:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800605e:	f894 c047 	ldrb.w	ip, [r4, #71]	@ 0x47
 8006062:	fa5f fc8c 	uxtb.w	ip, ip
 8006066:	e7cd      	b.n	8006004 <HAL_TIM_IC_Start_DMA+0x2c>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006068:	f894 003f 	ldrb.w	r0, [r4, #63]	@ 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800606c:	f894 c045 	ldrb.w	ip, [r4, #69]	@ 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006070:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006072:	fa5f fc8c 	uxtb.w	ip, ip
 8006076:	e7c5      	b.n	8006004 <HAL_TIM_IC_Start_DMA+0x2c>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006078:	f894 0042 	ldrb.w	r0, [r4, #66]	@ 0x42
 800607c:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800607e:	e7ee      	b.n	800605e <HAL_TIM_IC_Start_DMA+0x86>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006080:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006084:	f894 c046 	ldrb.w	ip, [r4, #70]	@ 0x46
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006088:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800608a:	fa5f fc8c 	uxtb.w	ip, ip
 800608e:	e7b9      	b.n	8006004 <HAL_TIM_IC_Start_DMA+0x2c>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006090:	f894 0041 	ldrb.w	r0, [r4, #65]	@ 0x41
 8006094:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006096:	e7e2      	b.n	800605e <HAL_TIM_IC_Start_DMA+0x86>
    return HAL_BUSY;
 8006098:	4660      	mov	r0, ip
}
 800609a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800609c:	2602      	movs	r6, #2
 800609e:	f884 6043 	strb.w	r6, [r4, #67]	@ 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060a2:	f884 6047 	strb.w	r6, [r4, #71]	@ 0x47
  TIMx->CCER &= ~tmp;
 80060a6:	6a2e      	ldr	r6, [r5, #32]
 80060a8:	4030      	ands	r0, r6
 80060aa:	6228      	str	r0, [r5, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060ac:	6a28      	ldr	r0, [r5, #32]
  switch (Channel)
 80060ae:	3904      	subs	r1, #4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060b0:	ea40 000c 	orr.w	r0, r0, ip
 80060b4:	6228      	str	r0, [r5, #32]
  switch (Channel)
 80060b6:	2908      	cmp	r1, #8
 80060b8:	d812      	bhi.n	80060e0 <HAL_TIM_IC_Start_DMA+0x108>
 80060ba:	e8df f001 	tbb	[pc, r1]
 80060be:	1149      	.short	0x1149
 80060c0:	11891111 	.word	0x11891111
 80060c4:	1111      	.short	0x1111
 80060c6:	a9          	.byte	0xa9
 80060c7:	00          	.byte	0x00
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060c8:	2302      	movs	r3, #2
 80060ca:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060ce:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  TIMx->CCER &= ~tmp;
 80060d2:	6a2b      	ldr	r3, [r5, #32]
 80060d4:	4003      	ands	r3, r0
 80060d6:	622b      	str	r3, [r5, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060d8:	6a2b      	ldr	r3, [r5, #32]
 80060da:	ea43 030c 	orr.w	r3, r3, ip
 80060de:	622b      	str	r3, [r5, #32]
{
 80060e0:	2001      	movs	r0, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060e2:	4b5b      	ldr	r3, [pc, #364]	@ (8006250 <HAL_TIM_IC_Start_DMA+0x278>)
 80060e4:	429d      	cmp	r5, r3
 80060e6:	f000 80a7 	beq.w	8006238 <HAL_TIM_IC_Start_DMA+0x260>
 80060ea:	f1b5 4f80 	cmp.w	r5, #1073741824	@ 0x40000000
 80060ee:	f000 80a3 	beq.w	8006238 <HAL_TIM_IC_Start_DMA+0x260>
 80060f2:	f5a3 3394 	sub.w	r3, r3, #75776	@ 0x12800
 80060f6:	429d      	cmp	r5, r3
 80060f8:	f000 809e 	beq.w	8006238 <HAL_TIM_IC_Start_DMA+0x260>
 80060fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006100:	429d      	cmp	r5, r3
 8006102:	f000 8099 	beq.w	8006238 <HAL_TIM_IC_Start_DMA+0x260>
 8006106:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800610a:	429d      	cmp	r5, r3
 800610c:	f000 8094 	beq.w	8006238 <HAL_TIM_IC_Start_DMA+0x260>
 8006110:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8006114:	429d      	cmp	r5, r3
 8006116:	f000 808f 	beq.w	8006238 <HAL_TIM_IC_Start_DMA+0x260>
 800611a:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 800611e:	429d      	cmp	r5, r3
 8006120:	f000 808a 	beq.w	8006238 <HAL_TIM_IC_Start_DMA+0x260>
 8006124:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006128:	429d      	cmp	r5, r3
 800612a:	f000 8085 	beq.w	8006238 <HAL_TIM_IC_Start_DMA+0x260>
    __HAL_TIM_ENABLE(htim);
 800612e:	682b      	ldr	r3, [r5, #0]
 8006130:	f043 0301 	orr.w	r3, r3, #1
 8006134:	602b      	str	r3, [r5, #0]
}
 8006136:	bd70      	pop	{r4, r5, r6, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006138:	2102      	movs	r1, #2
 800613a:	f884 103f 	strb.w	r1, [r4, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800613e:	f884 1045 	strb.w	r1, [r4, #69]	@ 0x45
  TIMx->CCER &= ~tmp;
 8006142:	6a29      	ldr	r1, [r5, #32]
 8006144:	4001      	ands	r1, r0
 8006146:	6229      	str	r1, [r5, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006148:	6a29      	ldr	r1, [r5, #32]
 800614a:	ea41 010c 	orr.w	r1, r1, ip
 800614e:	6229      	str	r1, [r5, #32]
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8006150:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8006152:	f105 0138 	add.w	r1, r5, #56	@ 0x38
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8006156:	4d3f      	ldr	r5, [pc, #252]	@ (8006254 <HAL_TIM_IC_Start_DMA+0x27c>)
 8006158:	62c5      	str	r5, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800615a:	4d3f      	ldr	r5, [pc, #252]	@ (8006258 <HAL_TIM_IC_Start_DMA+0x280>)
 800615c:	6305      	str	r5, [r0, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800615e:	4d3f      	ldr	r5, [pc, #252]	@ (800625c <HAL_TIM_IC_Start_DMA+0x284>)
 8006160:	6345      	str	r5, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8006162:	f7fd fd11 	bl	8003b88 <HAL_DMA_Start_IT>
 8006166:	2800      	cmp	r0, #0
 8006168:	f47f af74 	bne.w	8006054 <HAL_TIM_IC_Start_DMA+0x7c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800616c:	6825      	ldr	r5, [r4, #0]
 800616e:	68eb      	ldr	r3, [r5, #12]
 8006170:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006174:	60eb      	str	r3, [r5, #12]
      break;
 8006176:	e7b4      	b.n	80060e2 <HAL_TIM_IC_Start_DMA+0x10a>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006178:	2102      	movs	r1, #2
 800617a:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800617e:	f884 1044 	strb.w	r1, [r4, #68]	@ 0x44
  TIMx->CCER &= ~tmp;
 8006182:	6a29      	ldr	r1, [r5, #32]
 8006184:	4001      	ands	r1, r0
 8006186:	6229      	str	r1, [r5, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006188:	6a29      	ldr	r1, [r5, #32]
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800618a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800618c:	ea41 010c 	orr.w	r1, r1, ip
 8006190:	6229      	str	r1, [r5, #32]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8006192:	f105 0134 	add.w	r1, r5, #52	@ 0x34
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8006196:	4d2f      	ldr	r5, [pc, #188]	@ (8006254 <HAL_TIM_IC_Start_DMA+0x27c>)
 8006198:	62c5      	str	r5, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800619a:	4d2f      	ldr	r5, [pc, #188]	@ (8006258 <HAL_TIM_IC_Start_DMA+0x280>)
 800619c:	6305      	str	r5, [r0, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800619e:	4d2f      	ldr	r5, [pc, #188]	@ (800625c <HAL_TIM_IC_Start_DMA+0x284>)
 80061a0:	6345      	str	r5, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80061a2:	f7fd fcf1 	bl	8003b88 <HAL_DMA_Start_IT>
 80061a6:	2800      	cmp	r0, #0
 80061a8:	f47f af54 	bne.w	8006054 <HAL_TIM_IC_Start_DMA+0x7c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80061ac:	6825      	ldr	r5, [r4, #0]
 80061ae:	68eb      	ldr	r3, [r5, #12]
 80061b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80061b4:	60eb      	str	r3, [r5, #12]
      break;
 80061b6:	e794      	b.n	80060e2 <HAL_TIM_IC_Start_DMA+0x10a>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061b8:	2102      	movs	r1, #2
 80061ba:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061be:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
  TIMx->CCER &= ~tmp;
 80061c2:	6a29      	ldr	r1, [r5, #32]
 80061c4:	4001      	ands	r1, r0
 80061c6:	6229      	str	r1, [r5, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061c8:	6a29      	ldr	r1, [r5, #32]
 80061ca:	ea4c 0101 	orr.w	r1, ip, r1
 80061ce:	6229      	str	r1, [r5, #32]
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80061d0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80061d2:	f105 013c 	add.w	r1, r5, #60	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80061d6:	4d1f      	ldr	r5, [pc, #124]	@ (8006254 <HAL_TIM_IC_Start_DMA+0x27c>)
 80061d8:	62c5      	str	r5, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80061da:	4d1f      	ldr	r5, [pc, #124]	@ (8006258 <HAL_TIM_IC_Start_DMA+0x280>)
 80061dc:	6305      	str	r5, [r0, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80061de:	4d1f      	ldr	r5, [pc, #124]	@ (800625c <HAL_TIM_IC_Start_DMA+0x284>)
 80061e0:	6345      	str	r5, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80061e2:	f7fd fcd1 	bl	8003b88 <HAL_DMA_Start_IT>
 80061e6:	2800      	cmp	r0, #0
 80061e8:	f47f af34 	bne.w	8006054 <HAL_TIM_IC_Start_DMA+0x7c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80061ec:	6825      	ldr	r5, [r4, #0]
 80061ee:	68eb      	ldr	r3, [r5, #12]
 80061f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80061f4:	60eb      	str	r3, [r5, #12]
      break;
 80061f6:	e774      	b.n	80060e2 <HAL_TIM_IC_Start_DMA+0x10a>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061f8:	2102      	movs	r1, #2
 80061fa:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061fe:	f884 1047 	strb.w	r1, [r4, #71]	@ 0x47
  TIMx->CCER &= ~tmp;
 8006202:	6a29      	ldr	r1, [r5, #32]
 8006204:	4001      	ands	r1, r0
 8006206:	6229      	str	r1, [r5, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006208:	6a29      	ldr	r1, [r5, #32]
 800620a:	ea41 010c 	orr.w	r1, r1, ip
 800620e:	6229      	str	r1, [r5, #32]
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8006210:	6b20      	ldr	r0, [r4, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8006212:	f105 0140 	add.w	r1, r5, #64	@ 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8006216:	4d0f      	ldr	r5, [pc, #60]	@ (8006254 <HAL_TIM_IC_Start_DMA+0x27c>)
 8006218:	62c5      	str	r5, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800621a:	4d0f      	ldr	r5, [pc, #60]	@ (8006258 <HAL_TIM_IC_Start_DMA+0x280>)
 800621c:	6305      	str	r5, [r0, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800621e:	4d0f      	ldr	r5, [pc, #60]	@ (800625c <HAL_TIM_IC_Start_DMA+0x284>)
 8006220:	6345      	str	r5, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8006222:	f7fd fcb1 	bl	8003b88 <HAL_DMA_Start_IT>
 8006226:	2800      	cmp	r0, #0
 8006228:	f47f af14 	bne.w	8006054 <HAL_TIM_IC_Start_DMA+0x7c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800622c:	6825      	ldr	r5, [r4, #0]
 800622e:	68eb      	ldr	r3, [r5, #12]
 8006230:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006234:	60eb      	str	r3, [r5, #12]
      break;
 8006236:	e754      	b.n	80060e2 <HAL_TIM_IC_Start_DMA+0x10a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006238:	68aa      	ldr	r2, [r5, #8]
 800623a:	4b09      	ldr	r3, [pc, #36]	@ (8006260 <HAL_TIM_IC_Start_DMA+0x288>)
 800623c:	4013      	ands	r3, r2
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800623e:	2b06      	cmp	r3, #6
 8006240:	f43f af09 	beq.w	8006056 <HAL_TIM_IC_Start_DMA+0x7e>
 8006244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006248:	f47f af71 	bne.w	800612e <HAL_TIM_IC_Start_DMA+0x156>
}
 800624c:	bd70      	pop	{r4, r5, r6, pc}
 800624e:	bf00      	nop
 8006250:	40012c00 	.word	0x40012c00
 8006254:	0800672d 	.word	0x0800672d
 8006258:	080067c5 	.word	0x080067c5
 800625c:	08006829 	.word	0x08006829
 8006260:	00010007 	.word	0x00010007

08006264 <HAL_TIM_IC_Stop_DMA>:
{
 8006264:	b538      	push	{r3, r4, r5, lr}
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006266:	6803      	ldr	r3, [r0, #0]
{
 8006268:	4604      	mov	r4, r0
  TIMx->CCER &= ~tmp;
 800626a:	6a1a      	ldr	r2, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800626c:	f001 001f 	and.w	r0, r1, #31
{
 8006270:	460d      	mov	r5, r1
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006272:	2101      	movs	r1, #1
 8006274:	4081      	lsls	r1, r0
  TIMx->CCER &= ~tmp;
 8006276:	ea22 0201 	bic.w	r2, r2, r1
 800627a:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800627c:	6a1a      	ldr	r2, [r3, #32]
 800627e:	621a      	str	r2, [r3, #32]
  switch (Channel)
 8006280:	2d0c      	cmp	r5, #12
 8006282:	d808      	bhi.n	8006296 <HAL_TIM_IC_Stop_DMA+0x32>
 8006284:	e8df f005 	tbb	[pc, r5]
 8006288:	07070772 	.word	0x07070772
 800628c:	0707073c 	.word	0x0707073c
 8006290:	07070723 	.word	0x07070723
 8006294:	09          	.byte	0x09
 8006295:	00          	.byte	0x00
 8006296:	2001      	movs	r0, #1
}
 8006298:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800629a:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800629c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800629e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80062a2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80062a4:	f7fd fd02 	bl	8003cac <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 80062a8:	6823      	ldr	r3, [r4, #0]
 80062aa:	6a19      	ldr	r1, [r3, #32]
 80062ac:	f241 1211 	movw	r2, #4369	@ 0x1111
 80062b0:	4211      	tst	r1, r2
 80062b2:	d105      	bne.n	80062c0 <HAL_TIM_IC_Stop_DMA+0x5c>
 80062b4:	6a19      	ldr	r1, [r3, #32]
 80062b6:	f244 4244 	movw	r2, #17476	@ 0x4444
 80062ba:	4211      	tst	r1, r2
 80062bc:	f000 8081 	beq.w	80063c2 <HAL_TIM_IC_Stop_DMA+0x15e>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80062c0:	2301      	movs	r3, #1
 80062c2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80062c6:	2301      	movs	r3, #1
 80062c8:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
 80062cc:	e069      	b.n	80063a2 <HAL_TIM_IC_Stop_DMA+0x13e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80062ce:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80062d0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80062d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80062d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80062d8:	f7fd fce8 	bl	8003cac <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 80062dc:	6823      	ldr	r3, [r4, #0]
 80062de:	6a19      	ldr	r1, [r3, #32]
 80062e0:	f241 1211 	movw	r2, #4369	@ 0x1111
 80062e4:	4211      	tst	r1, r2
 80062e6:	d104      	bne.n	80062f2 <HAL_TIM_IC_Stop_DMA+0x8e>
 80062e8:	6a19      	ldr	r1, [r3, #32]
 80062ea:	f244 4244 	movw	r2, #17476	@ 0x4444
 80062ee:	4211      	tst	r1, r2
 80062f0:	d067      	beq.n	80063c2 <HAL_TIM_IC_Stop_DMA+0x15e>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80062f2:	2301      	movs	r3, #1
 80062f4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80062f8:	2301      	movs	r3, #1
 80062fa:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80062fe:	e050      	b.n	80063a2 <HAL_TIM_IC_Stop_DMA+0x13e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006300:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006302:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006304:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006308:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800630a:	f7fd fccf 	bl	8003cac <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 800630e:	6823      	ldr	r3, [r4, #0]
 8006310:	6a19      	ldr	r1, [r3, #32]
 8006312:	f241 1211 	movw	r2, #4369	@ 0x1111
 8006316:	4211      	tst	r1, r2
 8006318:	d145      	bne.n	80063a6 <HAL_TIM_IC_Stop_DMA+0x142>
 800631a:	6a19      	ldr	r1, [r3, #32]
 800631c:	f244 4244 	movw	r2, #17476	@ 0x4444
 8006320:	4211      	tst	r1, r2
 8006322:	d140      	bne.n	80063a6 <HAL_TIM_IC_Stop_DMA+0x142>
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	f022 0201 	bic.w	r2, r2, #1
 800632a:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800632c:	3d04      	subs	r5, #4
 800632e:	2d0c      	cmp	r5, #12
 8006330:	d83f      	bhi.n	80063b2 <HAL_TIM_IC_Stop_DMA+0x14e>
 8006332:	a301      	add	r3, pc, #4	@ (adr r3, 8006338 <HAL_TIM_IC_Stop_DMA+0xd4>)
 8006334:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 8006338:	080063a7 	.word	0x080063a7
 800633c:	080063b3 	.word	0x080063b3
 8006340:	080063b3 	.word	0x080063b3
 8006344:	080063b3 	.word	0x080063b3
 8006348:	080062f3 	.word	0x080062f3
 800634c:	080063b3 	.word	0x080063b3
 8006350:	080063b3 	.word	0x080063b3
 8006354:	080063b3 	.word	0x080063b3
 8006358:	080062c1 	.word	0x080062c1
 800635c:	080063b3 	.word	0x080063b3
 8006360:	080063b3 	.word	0x080063b3
 8006364:	080063b3 	.word	0x080063b3
 8006368:	080063bb 	.word	0x080063bb
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800636c:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800636e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006370:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006374:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006376:	f7fd fc99 	bl	8003cac <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 800637a:	6823      	ldr	r3, [r4, #0]
 800637c:	6a19      	ldr	r1, [r3, #32]
 800637e:	f241 1211 	movw	r2, #4369	@ 0x1111
 8006382:	4211      	tst	r1, r2
 8006384:	d108      	bne.n	8006398 <HAL_TIM_IC_Stop_DMA+0x134>
 8006386:	6a19      	ldr	r1, [r3, #32]
 8006388:	f244 4244 	movw	r2, #17476	@ 0x4444
 800638c:	4211      	tst	r1, r2
 800638e:	d103      	bne.n	8006398 <HAL_TIM_IC_Stop_DMA+0x134>
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	f022 0201 	bic.w	r2, r2, #1
 8006396:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006398:	2301      	movs	r3, #1
 800639a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800639e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
  switch (Channel)
 80063a2:	2000      	movs	r0, #0
}
 80063a4:	bd38      	pop	{r3, r4, r5, pc}
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80063a6:	2301      	movs	r3, #1
 80063a8:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80063ac:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80063b0:	e7f7      	b.n	80063a2 <HAL_TIM_IC_Stop_DMA+0x13e>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80063b2:	2301      	movs	r3, #1
 80063b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80063b8:	e785      	b.n	80062c6 <HAL_TIM_IC_Stop_DMA+0x62>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80063ba:	2301      	movs	r3, #1
 80063bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80063c0:	e781      	b.n	80062c6 <HAL_TIM_IC_Stop_DMA+0x62>
    __HAL_TIM_DISABLE(htim);
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	f022 0201 	bic.w	r2, r2, #1
 80063c8:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80063ca:	2d00      	cmp	r5, #0
 80063cc:	d0e4      	beq.n	8006398 <HAL_TIM_IC_Stop_DMA+0x134>
 80063ce:	e7ad      	b.n	800632c <HAL_TIM_IC_Stop_DMA+0xc8>

080063d0 <HAL_TIM_IC_ConfigChannel>:
{
 80063d0:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80063d2:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 80063d6:	2801      	cmp	r0, #1
 80063d8:	f000 80c9 	beq.w	800656e <HAL_TIM_IC_ConfigChannel+0x19e>
 80063dc:	2001      	movs	r0, #1
{
 80063de:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 80063e0:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  if (Channel == TIM_CHANNEL_1)
 80063e4:	b15a      	cbz	r2, 80063fe <HAL_TIM_IC_ConfigChannel+0x2e>
  else if (Channel == TIM_CHANNEL_2)
 80063e6:	2a04      	cmp	r2, #4
 80063e8:	d054      	beq.n	8006494 <HAL_TIM_IC_ConfigChannel+0xc4>
  else if (Channel == TIM_CHANNEL_3)
 80063ea:	2a08      	cmp	r2, #8
 80063ec:	f000 809c 	beq.w	8006528 <HAL_TIM_IC_ConfigChannel+0x158>
  else if (Channel == TIM_CHANNEL_4)
 80063f0:	2a0c      	cmp	r2, #12
 80063f2:	d074      	beq.n	80064de <HAL_TIM_IC_ConfigChannel+0x10e>
  __HAL_UNLOCK(htim);
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80063fa:	bcf0      	pop	{r4, r5, r6, r7}
 80063fc:	4770      	bx	lr
    TIM_TI1_SetConfig(htim->Instance,
 80063fe:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006400:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8006574 <HAL_TIM_IC_ConfigChannel+0x1a4>
  tmpccer = TIMx->CCER;
 8006404:	6a16      	ldr	r6, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006406:	6a17      	ldr	r7, [r2, #32]
                      sConfig->ICFilter);
 8006408:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800640a:	f027 0701 	bic.w	r7, r7, #1
                      sConfig->ICSelection,
 800640e:	e9d1 4500 	ldrd	r4, r5, [r1]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006412:	4562      	cmp	r2, ip
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006414:	6217      	str	r7, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006416:	6997      	ldr	r7, [r2, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006418:	d01d      	beq.n	8006456 <HAL_TIM_IC_ConfigChannel+0x86>
 800641a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800641e:	d01a      	beq.n	8006456 <HAL_TIM_IC_ConfigChannel+0x86>
 8006420:	f5ac 3c94 	sub.w	ip, ip, #75776	@ 0x12800
 8006424:	4562      	cmp	r2, ip
 8006426:	d016      	beq.n	8006456 <HAL_TIM_IC_ConfigChannel+0x86>
 8006428:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800642c:	4562      	cmp	r2, ip
 800642e:	d012      	beq.n	8006456 <HAL_TIM_IC_ConfigChannel+0x86>
 8006430:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8006434:	4562      	cmp	r2, ip
 8006436:	d00e      	beq.n	8006456 <HAL_TIM_IC_ConfigChannel+0x86>
 8006438:	f50c 3c94 	add.w	ip, ip, #75776	@ 0x12800
 800643c:	4562      	cmp	r2, ip
 800643e:	d00a      	beq.n	8006456 <HAL_TIM_IC_ConfigChannel+0x86>
 8006440:	f50c 6c40 	add.w	ip, ip, #3072	@ 0xc00
 8006444:	4562      	cmp	r2, ip
 8006446:	d006      	beq.n	8006456 <HAL_TIM_IC_ConfigChannel+0x86>
 8006448:	f50c 5c80 	add.w	ip, ip, #4096	@ 0x1000
 800644c:	4562      	cmp	r2, ip
 800644e:	d002      	beq.n	8006456 <HAL_TIM_IC_ConfigChannel+0x86>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006450:	f047 0c01 	orr.w	ip, r7, #1
 8006454:	e003      	b.n	800645e <HAL_TIM_IC_ConfigChannel+0x8e>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006456:	f027 0703 	bic.w	r7, r7, #3
    tmpccmr1 |= TIM_ICSelection;
 800645a:	ea45 0c07 	orr.w	ip, r5, r7
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800645e:	0100      	lsls	r0, r0, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006460:	f02c 0cf0 	bic.w	ip, ip, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006464:	b2c0      	uxtb	r0, r0
 8006466:	ea40 000c 	orr.w	r0, r0, ip
  TIMx->CCMR1 = tmpccmr1;
 800646a:	6190      	str	r0, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800646c:	f026 050a 	bic.w	r5, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006470:	f004 000a 	and.w	r0, r4, #10
 8006474:	4328      	orrs	r0, r5
  TIMx->CCER = tmpccer;
 8006476:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006478:	6990      	ldr	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800647a:	688c      	ldr	r4, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800647c:	f020 000c 	bic.w	r0, r0, #12
 8006480:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006482:	6991      	ldr	r1, [r2, #24]
 8006484:	4321      	orrs	r1, r4
 8006486:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 8006488:	2200      	movs	r2, #0
 800648a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800648e:	2000      	movs	r0, #0
}
 8006490:	bcf0      	pop	{r4, r5, r6, r7}
 8006492:	4770      	bx	lr
                      sConfig->ICSelection,
 8006494:	e9d1 0600 	ldrd	r0, r6, [r1]
    TIM_TI2_SetConfig(htim->Instance,
 8006498:	681a      	ldr	r2, [r3, #0]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800649a:	0104      	lsls	r4, r0, #4
  tmpccer = TIMx->CCER;
 800649c:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800649e:	6a15      	ldr	r5, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064a0:	f020 00a0 	bic.w	r0, r0, #160	@ 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064a4:	f025 0510 	bic.w	r5, r5, #16
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80064a8:	f004 04a0 	and.w	r4, r4, #160	@ 0xa0
 80064ac:	4304      	orrs	r4, r0
                      sConfig->ICFilter);
 80064ae:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064b0:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80064b2:	688d      	ldr	r5, [r1, #8]
  tmpccmr1 = TIMx->CCMR1;
 80064b4:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80064b6:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80064ba:	0300      	lsls	r0, r0, #12
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80064bc:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80064c0:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064c2:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80064c6:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 80064c8:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 80064ca:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80064cc:	6991      	ldr	r1, [r2, #24]
 80064ce:	f421 6140 	bic.w	r1, r1, #3072	@ 0xc00
 80064d2:	6191      	str	r1, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80064d4:	6991      	ldr	r1, [r2, #24]
 80064d6:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 80064da:	6191      	str	r1, [r2, #24]
 80064dc:	e7d4      	b.n	8006488 <HAL_TIM_IC_ConfigChannel+0xb8>
                      sConfig->ICSelection,
 80064de:	e9d1 0600 	ldrd	r0, r6, [r1]
    TIM_TI4_SetConfig(htim->Instance,
 80064e2:	681a      	ldr	r2, [r3, #0]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80064e4:	0304      	lsls	r4, r0, #12
  tmpccer = TIMx->CCER;
 80064e6:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064e8:	6a15      	ldr	r5, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80064ea:	f420 4020 	bic.w	r0, r0, #40960	@ 0xa000
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064ee:	f425 5580 	bic.w	r5, r5, #4096	@ 0x1000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80064f2:	f404 4420 	and.w	r4, r4, #40960	@ 0xa000
 80064f6:	4304      	orrs	r4, r0
                      sConfig->ICFilter);
 80064f8:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064fa:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80064fc:	688d      	ldr	r5, [r1, #8]
  tmpccmr2 = TIMx->CCMR2;
 80064fe:	69d1      	ldr	r1, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006500:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006504:	0300      	lsls	r0, r0, #12
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006506:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800650a:	b280      	uxth	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800650c:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006510:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 8006512:	61d1      	str	r1, [r2, #28]
  TIMx->CCER = tmpccer ;
 8006514:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006516:	69d1      	ldr	r1, [r2, #28]
 8006518:	f421 6140 	bic.w	r1, r1, #3072	@ 0xc00
 800651c:	61d1      	str	r1, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800651e:	69d1      	ldr	r1, [r2, #28]
 8006520:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8006524:	61d1      	str	r1, [r2, #28]
 8006526:	e7af      	b.n	8006488 <HAL_TIM_IC_ConfigChannel+0xb8>
                      sConfig->ICSelection,
 8006528:	e9d1 0500 	ldrd	r0, r5, [r1]
    TIM_TI3_SetConfig(htim->Instance,
 800652c:	681a      	ldr	r2, [r3, #0]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800652e:	0204      	lsls	r4, r0, #8
  tmpccer = TIMx->CCER;
 8006530:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006532:	6a16      	ldr	r6, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006534:	f420 6020 	bic.w	r0, r0, #2560	@ 0xa00
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006538:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800653c:	f404 6420 	and.w	r4, r4, #2560	@ 0xa00
 8006540:	4304      	orrs	r4, r0
                      sConfig->ICFilter);
 8006542:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006544:	6216      	str	r6, [r2, #32]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006546:	688e      	ldr	r6, [r1, #8]
  tmpccmr2 = TIMx->CCMR2;
 8006548:	69d1      	ldr	r1, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800654a:	f021 0103 	bic.w	r1, r1, #3
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800654e:	0100      	lsls	r0, r0, #4
  tmpccmr2 |= TIM_ICSelection;
 8006550:	4329      	orrs	r1, r5
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006552:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006554:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006558:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 800655a:	61d1      	str	r1, [r2, #28]
  TIMx->CCER = tmpccer;
 800655c:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800655e:	69d1      	ldr	r1, [r2, #28]
 8006560:	f021 010c 	bic.w	r1, r1, #12
 8006564:	61d1      	str	r1, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006566:	69d1      	ldr	r1, [r2, #28]
 8006568:	4331      	orrs	r1, r6
 800656a:	61d1      	str	r1, [r2, #28]
 800656c:	e78c      	b.n	8006488 <HAL_TIM_IC_ConfigChannel+0xb8>
  __HAL_LOCK(htim);
 800656e:	2002      	movs	r0, #2
}
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	40012c00 	.word	0x40012c00

08006578 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006578:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800657c:	2b01      	cmp	r3, #1
 800657e:	f000 8091 	beq.w	80066a4 <HAL_TIM_ConfigClockSource+0x12c>
 8006582:	4602      	mov	r2, r0
{
 8006584:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8006586:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8006588:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800658a:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_LOCK(htim);
 800658e:	2001      	movs	r0, #1
 8006590:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8006594:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006596:	4b61      	ldr	r3, [pc, #388]	@ (800671c <HAL_TIM_ConfigClockSource+0x1a4>)
 8006598:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 800659a:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800659c:	680b      	ldr	r3, [r1, #0]
 800659e:	2b70      	cmp	r3, #112	@ 0x70
 80065a0:	f000 80ac 	beq.w	80066fc <HAL_TIM_ConfigClockSource+0x184>
 80065a4:	d827      	bhi.n	80065f6 <HAL_TIM_ConfigClockSource+0x7e>
 80065a6:	2b50      	cmp	r3, #80	@ 0x50
 80065a8:	d07e      	beq.n	80066a8 <HAL_TIM_ConfigClockSource+0x130>
 80065aa:	d93e      	bls.n	800662a <HAL_TIM_ConfigClockSource+0xb2>
 80065ac:	2b60      	cmp	r3, #96	@ 0x60
 80065ae:	d11a      	bne.n	80065e6 <HAL_TIM_ConfigClockSource+0x6e>
  tmpccer = TIMx->CCER;
 80065b0:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockFilter);
 80065b2:	68c8      	ldr	r0, [r1, #12]
                               sClockSourceConfig->ClockPolarity,
 80065b4:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065b6:	6a21      	ldr	r1, [r4, #32]
 80065b8:	f021 0110 	bic.w	r1, r1, #16
 80065bc:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065be:	69a1      	ldr	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065c0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065c4:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 80065c8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065cc:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80065d0:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 80065d2:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80065d4:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80065d6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80065da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065de:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 80065e2:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80065e4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80065e6:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80065e8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80065ea:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80065ee:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 80065f2:	bc30      	pop	{r4, r5}
 80065f4:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80065f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065fa:	d06f      	beq.n	80066dc <HAL_TIM_ConfigClockSource+0x164>
 80065fc:	d941      	bls.n	8006682 <HAL_TIM_ConfigClockSource+0x10a>
 80065fe:	4948      	ldr	r1, [pc, #288]	@ (8006720 <HAL_TIM_ConfigClockSource+0x1a8>)
 8006600:	428b      	cmp	r3, r1
 8006602:	d008      	beq.n	8006616 <HAL_TIM_ConfigClockSource+0x9e>
 8006604:	d92d      	bls.n	8006662 <HAL_TIM_ConfigClockSource+0xea>
 8006606:	4947      	ldr	r1, [pc, #284]	@ (8006724 <HAL_TIM_ConfigClockSource+0x1ac>)
 8006608:	428b      	cmp	r3, r1
 800660a:	d004      	beq.n	8006616 <HAL_TIM_ConfigClockSource+0x9e>
 800660c:	f023 0c20 	bic.w	ip, r3, #32
 8006610:	3910      	subs	r1, #16
 8006612:	458c      	cmp	ip, r1
 8006614:	d1e7      	bne.n	80065e6 <HAL_TIM_ConfigClockSource+0x6e>
  tmpsmcr = TIMx->SMCR;
 8006616:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006618:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800661c:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006620:	4319      	orrs	r1, r3
 8006622:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 8006626:	60a1      	str	r1, [r4, #8]
}
 8006628:	e02e      	b.n	8006688 <HAL_TIM_ConfigClockSource+0x110>
  switch (sClockSourceConfig->ClockSource)
 800662a:	2b40      	cmp	r3, #64	@ 0x40
 800662c:	d12e      	bne.n	800668c <HAL_TIM_ConfigClockSource+0x114>
                               sClockSourceConfig->ClockPolarity,
 800662e:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006630:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8006632:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006634:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8006638:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800663a:	6a23      	ldr	r3, [r4, #32]
 800663c:	f023 0301 	bic.w	r3, r3, #1
 8006640:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006642:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006644:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006648:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800664c:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800664e:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8006650:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006652:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800665a:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 800665e:	60a3      	str	r3, [r4, #8]
}
 8006660:	e012      	b.n	8006688 <HAL_TIM_ConfigClockSource+0x110>
  switch (sClockSourceConfig->ClockSource)
 8006662:	3920      	subs	r1, #32
 8006664:	428b      	cmp	r3, r1
 8006666:	d0d6      	beq.n	8006616 <HAL_TIM_ConfigClockSource+0x9e>
 8006668:	d904      	bls.n	8006674 <HAL_TIM_ConfigClockSource+0xfc>
 800666a:	492f      	ldr	r1, [pc, #188]	@ (8006728 <HAL_TIM_ConfigClockSource+0x1b0>)
 800666c:	428b      	cmp	r3, r1
 800666e:	d0d2      	beq.n	8006616 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8006670:	2001      	movs	r0, #1
 8006672:	e7b8      	b.n	80065e6 <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 8006674:	f023 0110 	bic.w	r1, r3, #16
 8006678:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800667c:	d0cb      	beq.n	8006616 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 800667e:	2001      	movs	r0, #1
 8006680:	e7b1      	b.n	80065e6 <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 8006682:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006686:	d1ae      	bne.n	80065e6 <HAL_TIM_ConfigClockSource+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8006688:	2000      	movs	r0, #0
 800668a:	e7ac      	b.n	80065e6 <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 800668c:	d8ab      	bhi.n	80065e6 <HAL_TIM_ConfigClockSource+0x6e>
 800668e:	2b20      	cmp	r3, #32
 8006690:	d0c1      	beq.n	8006616 <HAL_TIM_ConfigClockSource+0x9e>
 8006692:	d903      	bls.n	800669c <HAL_TIM_ConfigClockSource+0x124>
 8006694:	2b30      	cmp	r3, #48	@ 0x30
 8006696:	d0be      	beq.n	8006616 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8006698:	2001      	movs	r0, #1
 800669a:	e7a4      	b.n	80065e6 <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 800669c:	f033 0110 	bics.w	r1, r3, #16
 80066a0:	d1a1      	bne.n	80065e6 <HAL_TIM_ConfigClockSource+0x6e>
 80066a2:	e7b8      	b.n	8006616 <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 80066a4:	2002      	movs	r0, #2
}
 80066a6:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 80066a8:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80066aa:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 80066ac:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066ae:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80066b2:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066b4:	6a23      	ldr	r3, [r4, #32]
 80066b6:	f023 0301 	bic.w	r3, r3, #1
 80066ba:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066bc:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066c2:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80066c6:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80066c8:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80066ca:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80066cc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80066d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066d4:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 80066d8:	60a3      	str	r3, [r4, #8]
}
 80066da:	e7d5      	b.n	8006688 <HAL_TIM_ConfigClockSource+0x110>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066dc:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80066e0:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066e2:	432b      	orrs	r3, r5
 80066e4:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066e6:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066ea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80066ee:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80066f0:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066f2:	68a3      	ldr	r3, [r4, #8]
 80066f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80066f8:	60a3      	str	r3, [r4, #8]
      break;
 80066fa:	e7c5      	b.n	8006688 <HAL_TIM_ConfigClockSource+0x110>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066fc:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8006700:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006702:	432b      	orrs	r3, r5
 8006704:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006706:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800670a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800670e:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8006710:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8006712:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006714:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8006718:	60a3      	str	r3, [r4, #8]
      break;
 800671a:	e7b5      	b.n	8006688 <HAL_TIM_ConfigClockSource+0x110>
 800671c:	ffce0088 	.word	0xffce0088
 8006720:	00100040 	.word	0x00100040
 8006724:	00100060 	.word	0x00100060
 8006728:	00100030 	.word	0x00100030

0800672c <TIM_DMACaptureCplt>:
{
 800672c:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800672e:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006730:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006732:	4283      	cmp	r3, r0
 8006734:	d01e      	beq.n	8006774 <TIM_DMACaptureCplt+0x48>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006736:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006738:	4283      	cmp	r3, r0
 800673a:	d00b      	beq.n	8006754 <TIM_DMACaptureCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800673c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800673e:	4283      	cmp	r3, r0
 8006740:	d027      	beq.n	8006792 <TIM_DMACaptureCplt+0x66>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006742:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006744:	4283      	cmp	r3, r0
 8006746:	d02f      	beq.n	80067a8 <TIM_DMACaptureCplt+0x7c>
  HAL_TIM_IC_CaptureCallback(htim);
 8006748:	4620      	mov	r0, r4
 800674a:	f7fa fa9d 	bl	8000c88 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800674e:	2300      	movs	r3, #0
 8006750:	7723      	strb	r3, [r4, #28]
}
 8006752:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006754:	2202      	movs	r2, #2
 8006756:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8006758:	69db      	ldr	r3, [r3, #28]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1f4      	bne.n	8006748 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800675e:	2301      	movs	r3, #1
 8006760:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  HAL_TIM_IC_CaptureCallback(htim);
 8006764:	4620      	mov	r0, r4
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006766:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  HAL_TIM_IC_CaptureCallback(htim);
 800676a:	f7fa fa8d 	bl	8000c88 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800676e:	2300      	movs	r3, #0
 8006770:	7723      	strb	r3, [r4, #28]
}
 8006772:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006774:	2201      	movs	r2, #1
 8006776:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8006778:	69db      	ldr	r3, [r3, #28]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1e4      	bne.n	8006748 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800677e:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
  HAL_TIM_IC_CaptureCallback(htim);
 8006782:	4620      	mov	r0, r4
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006784:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
  HAL_TIM_IC_CaptureCallback(htim);
 8006788:	f7fa fa7e 	bl	8000c88 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800678c:	2300      	movs	r3, #0
 800678e:	7723      	strb	r3, [r4, #28]
}
 8006790:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006792:	2204      	movs	r2, #4
 8006794:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8006796:	69db      	ldr	r3, [r3, #28]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1d5      	bne.n	8006748 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800679c:	2301      	movs	r3, #1
 800679e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80067a2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80067a6:	e7cf      	b.n	8006748 <TIM_DMACaptureCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067a8:	2208      	movs	r2, #8
 80067aa:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80067ac:	69db      	ldr	r3, [r3, #28]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1ca      	bne.n	8006748 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80067b2:	2301      	movs	r3, #1
 80067b4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80067b8:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
 80067bc:	e7c4      	b.n	8006748 <TIM_DMACaptureCplt+0x1c>
 80067be:	bf00      	nop

080067c0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop

080067c4 <TIM_DMACaptureHalfCplt>:
{
 80067c4:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067c6:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80067c8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80067ca:	4282      	cmp	r2, r0
 80067cc:	d019      	beq.n	8006802 <TIM_DMACaptureHalfCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80067ce:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80067d0:	4282      	cmp	r2, r0
 80067d2:	4603      	mov	r3, r0
 80067d4:	d00d      	beq.n	80067f2 <TIM_DMACaptureHalfCplt+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80067d6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80067d8:	4282      	cmp	r2, r0
 80067da:	d01a      	beq.n	8006812 <TIM_DMACaptureHalfCplt+0x4e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80067dc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80067de:	4282      	cmp	r2, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067e0:	bf04      	itt	eq
 80067e2:	2308      	moveq	r3, #8
 80067e4:	7723      	strbeq	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80067e6:	4620      	mov	r0, r4
 80067e8:	f7ff ffea 	bl	80067c0 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ec:	2300      	movs	r3, #0
 80067ee:	7723      	strb	r3, [r4, #28]
}
 80067f0:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067f2:	2302      	movs	r3, #2
 80067f4:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80067f6:	4620      	mov	r0, r4
 80067f8:	f7ff ffe2 	bl	80067c0 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067fc:	2300      	movs	r3, #0
 80067fe:	7723      	strb	r3, [r4, #28]
}
 8006800:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006802:	2301      	movs	r3, #1
 8006804:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8006806:	4620      	mov	r0, r4
 8006808:	f7ff ffda 	bl	80067c0 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800680c:	2300      	movs	r3, #0
 800680e:	7723      	strb	r3, [r4, #28]
}
 8006810:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006812:	2304      	movs	r3, #4
 8006814:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8006816:	4620      	mov	r0, r4
 8006818:	f7ff ffd2 	bl	80067c0 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800681c:	2300      	movs	r3, #0
 800681e:	7723      	strb	r3, [r4, #28]
}
 8006820:	bd10      	pop	{r4, pc}
 8006822:	bf00      	nop

08006824 <HAL_TIM_ErrorCallback>:
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop

08006828 <TIM_DMAError>:
{
 8006828:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800682a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800682c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800682e:	4283      	cmp	r3, r0
 8006830:	d01c      	beq.n	800686c <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006832:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006834:	4283      	cmp	r3, r0
 8006836:	d00e      	beq.n	8006856 <TIM_DMAError+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006838:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800683a:	4283      	cmp	r3, r0
 800683c:	d020      	beq.n	8006880 <TIM_DMAError+0x58>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800683e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006840:	4283      	cmp	r3, r0
 8006842:	d028      	beq.n	8006896 <TIM_DMAError+0x6e>
    htim->State = HAL_TIM_STATE_READY;
 8006844:	2301      	movs	r3, #1
 8006846:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  HAL_TIM_ErrorCallback(htim);
 800684a:	4620      	mov	r0, r4
 800684c:	f7ff ffea 	bl	8006824 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006850:	2300      	movs	r3, #0
 8006852:	7723      	strb	r3, [r4, #28]
}
 8006854:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006856:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006858:	2202      	movs	r2, #2
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800685a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800685e:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 8006860:	4620      	mov	r0, r4
 8006862:	f7ff ffdf 	bl	8006824 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006866:	2300      	movs	r3, #0
 8006868:	7723      	strb	r3, [r4, #28]
}
 800686a:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800686c:	2301      	movs	r3, #1
 800686e:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006870:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  HAL_TIM_ErrorCallback(htim);
 8006874:	4620      	mov	r0, r4
 8006876:	f7ff ffd5 	bl	8006824 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800687a:	2300      	movs	r3, #0
 800687c:	7723      	strb	r3, [r4, #28]
}
 800687e:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006880:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006882:	2204      	movs	r2, #4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006884:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006888:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 800688a:	4620      	mov	r0, r4
 800688c:	f7ff ffca 	bl	8006824 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006890:	2300      	movs	r3, #0
 8006892:	7723      	strb	r3, [r4, #28]
}
 8006894:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006896:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006898:	2208      	movs	r2, #8
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800689a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800689e:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 80068a0:	4620      	mov	r0, r4
 80068a2:	f7ff ffbf 	bl	8006824 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068a6:	2300      	movs	r3, #0
 80068a8:	7723      	strb	r3, [r4, #28]
}
 80068aa:	bd10      	pop	{r4, pc}

080068ac <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068ac:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d04e      	beq.n	8006952 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
{
 80068b4:	b430      	push	{r4, r5}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068b6:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068b8:	4d27      	ldr	r5, [pc, #156]	@ (8006958 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->State = HAL_TIM_STATE_BUSY;
 80068ba:	2302      	movs	r3, #2
 80068bc:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068c0:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 80068c2:	6853      	ldr	r3, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068c4:	680c      	ldr	r4, [r1, #0]
 80068c6:	4684      	mov	ip, r0
  tmpsmcr = htim->Instance->SMCR;
 80068c8:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068ca:	d02c      	beq.n	8006926 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80068cc:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80068d0:	42aa      	cmp	r2, r5
 80068d2:	d033      	beq.n	800693c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80068d4:	f505 55e0 	add.w	r5, r5, #7168	@ 0x1c00
 80068d8:	42aa      	cmp	r2, r5
 80068da:	d024      	beq.n	8006926 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
  tmpcr2 &= ~TIM_CR2_MMS;
 80068dc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80068e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068e4:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068e6:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 80068ea:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068ec:	d00e      	beq.n	800690c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80068ee:	4b1b      	ldr	r3, [pc, #108]	@ (800695c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d00b      	beq.n	800690c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80068f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d007      	beq.n	800690c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80068fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006900:	429a      	cmp	r2, r3
 8006902:	d003      	beq.n	800690c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006904:	f503 339a 	add.w	r3, r3, #78848	@ 0x13400
 8006908:	429a      	cmp	r2, r3
 800690a:	d104      	bne.n	8006916 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800690c:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800690e:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006912:	4318      	orrs	r0, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006914:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8006916:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006918:	2301      	movs	r3, #1
 800691a:	f88c 303d 	strb.w	r3, [ip, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800691e:	f88c 003c 	strb.w	r0, [ip, #60]	@ 0x3c

  return HAL_OK;
}
 8006922:	bc30      	pop	{r4, r5}
 8006924:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006926:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006928:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800692c:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 800692e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006936:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 8006938:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800693a:	e7e7      	b.n	800690c <HAL_TIMEx_MasterConfigSynchronization+0x60>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800693c:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800693e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006942:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8006944:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006948:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800694c:	431c      	orrs	r4, r3
  htim->Instance->CR2 = tmpcr2;
 800694e:	6054      	str	r4, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006950:	e7dc      	b.n	800690c <HAL_TIMEx_MasterConfigSynchronization+0x60>
  __HAL_LOCK(htim);
 8006952:	2002      	movs	r0, #2
}
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	40012c00 	.word	0x40012c00
 800695c:	40000400 	.word	0x40000400

08006960 <HAL_TIMEx_TISelection>:
  *         (**) Register not available in all devices.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_TIMEx_TISelection(TIM_HandleTypeDef *htim, uint32_t TISelection, uint32_t Channel)
{
 8006960:	4603      	mov	r3, r0

  /* Check parameters */
  assert_param(IS_TIM_TISEL_TIX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_TISEL(TISelection));

  __HAL_LOCK(htim);
 8006962:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 8006966:	2801      	cmp	r0, #1
 8006968:	d043      	beq.n	80069f2 <HAL_TIMEx_TISelection+0x92>
 800696a:	2001      	movs	r0, #1
 800696c:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  switch (Channel)
 8006970:	2a0c      	cmp	r2, #12
 8006972:	d808      	bhi.n	8006986 <HAL_TIMEx_TISelection+0x26>
 8006974:	e8df f002 	tbb	[pc, r2]
 8006978:	07070717 	.word	0x07070717
 800697c:	0707072f 	.word	0x0707072f
 8006980:	07070736 	.word	0x07070736
 8006984:	0c          	.byte	0x0c
 8006985:	00          	.byte	0x00
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 8006986:	2200      	movs	r2, #0
  switch (Channel)
 8006988:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800698a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
}
 800698e:	4770      	bx	lr
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI4SEL, TISelection);
 8006990:	6818      	ldr	r0, [r3, #0]
 8006992:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8006994:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006998:	430a      	orrs	r2, r1
 800699a:	65c2      	str	r2, [r0, #92]	@ 0x5c
  __HAL_UNLOCK(htim);
 800699c:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 800699e:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 80069a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80069a4:	4770      	bx	lr
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI1SEL, TISelection);
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	6dd0      	ldr	r0, [r2, #92]	@ 0x5c
{
 80069aa:	b410      	push	{r4}
      if (IS_TIM_HSE32_INSTANCE(htim->Instance))
 80069ac:	4c14      	ldr	r4, [pc, #80]	@ (8006a00 <HAL_TIMEx_TISelection+0xa0>)
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI1SEL, TISelection);
 80069ae:	f020 000f 	bic.w	r0, r0, #15
 80069b2:	4301      	orrs	r1, r0
      if (IS_TIM_HSE32_INSTANCE(htim->Instance))
 80069b4:	42a2      	cmp	r2, r4
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI1SEL, TISelection);
 80069b6:	65d1      	str	r1, [r2, #92]	@ 0x5c
      if (IS_TIM_HSE32_INSTANCE(htim->Instance))
 80069b8:	d01d      	beq.n	80069f6 <HAL_TIMEx_TISelection+0x96>
 80069ba:	4912      	ldr	r1, [pc, #72]	@ (8006a04 <HAL_TIMEx_TISelection+0xa4>)
 80069bc:	428a      	cmp	r2, r1
 80069be:	d01a      	beq.n	80069f6 <HAL_TIMEx_TISelection+0x96>
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 80069c0:	6e91      	ldr	r1, [r2, #104]	@ 0x68
 80069c2:	f021 0101 	bic.w	r1, r1, #1
 80069c6:	6691      	str	r1, [r2, #104]	@ 0x68
  __HAL_UNLOCK(htim);
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80069ce:	2000      	movs	r0, #0
}
 80069d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069d4:	4770      	bx	lr
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI2SEL, TISelection);
 80069d6:	6818      	ldr	r0, [r3, #0]
 80069d8:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80069da:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 80069de:	430a      	orrs	r2, r1
 80069e0:	65c2      	str	r2, [r0, #92]	@ 0x5c
      break;
 80069e2:	e7db      	b.n	800699c <HAL_TIMEx_TISelection+0x3c>
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI3SEL, TISelection);
 80069e4:	6818      	ldr	r0, [r3, #0]
 80069e6:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80069e8:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 80069ec:	430a      	orrs	r2, r1
 80069ee:	65c2      	str	r2, [r0, #92]	@ 0x5c
      break;
 80069f0:	e7d4      	b.n	800699c <HAL_TIMEx_TISelection+0x3c>
  __HAL_LOCK(htim);
 80069f2:	2002      	movs	r0, #2
 80069f4:	4770      	bx	lr
        SET_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 80069f6:	6e91      	ldr	r1, [r2, #104]	@ 0x68
 80069f8:	f041 0101 	orr.w	r1, r1, #1
 80069fc:	6691      	str	r1, [r2, #104]	@ 0x68
 80069fe:	e7e3      	b.n	80069c8 <HAL_TIMEx_TISelection+0x68>
 8006a00:	40014400 	.word	0x40014400
 8006a04:	40014800 	.word	0x40014800

08006a08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a0c:	4604      	mov	r4, r0
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a0e:	f8d0 0088 	ldr.w	r0, [r0, #136]	@ 0x88
 8006a12:	2820      	cmp	r0, #32
 8006a14:	d151      	bne.n	8006aba <HAL_UART_Transmit+0xb2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a16:	4688      	mov	r8, r1
 8006a18:	b109      	cbz	r1, 8006a1e <HAL_UART_Transmit+0x16>
 8006a1a:	4617      	mov	r7, r2
 8006a1c:	b912      	cbnz	r2, 8006a24 <HAL_UART_Transmit+0x1c>
    {
      return  HAL_ERROR;
 8006a1e:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 8006a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a24:	461d      	mov	r5, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a26:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a2a:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a2c:	f8c4 9090 	str.w	r9, [r4, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a30:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    tickstart = HAL_GetTick();
 8006a34:	f7fb fcb8 	bl	80023a8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a38:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8006a3a:	f8a4 7054 	strh.w	r7, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 8006a42:	f8a4 7056 	strh.w	r7, [r4, #86]	@ 0x56
    tickstart = HAL_GetTick();
 8006a46:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a48:	d046      	beq.n	8006ad8 <HAL_UART_Transmit+0xd0>
    while (huart->TxXferCount > 0U)
 8006a4a:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a4e:	6823      	ldr	r3, [r4, #0]
    while (huart->TxXferCount > 0U)
 8006a50:	b292      	uxth	r2, r2
 8006a52:	b1aa      	cbz	r2, 8006a80 <HAL_UART_Transmit+0x78>
 8006a54:	1c68      	adds	r0, r5, #1
 8006a56:	d125      	bne.n	8006aa4 <HAL_UART_Transmit+0x9c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a58:	69da      	ldr	r2, [r3, #28]
 8006a5a:	0612      	lsls	r2, r2, #24
 8006a5c:	d5fc      	bpl.n	8006a58 <HAL_UART_Transmit+0x50>
      if (pdata8bits == NULL)
 8006a5e:	f1b8 0f00 	cmp.w	r8, #0
 8006a62:	d025      	beq.n	8006ab0 <HAL_UART_Transmit+0xa8>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a64:	f818 2b01 	ldrb.w	r2, [r8], #1
 8006a68:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->TxXferCount--;
 8006a6a:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 8006a6e:	3a01      	subs	r2, #1
 8006a70:	b292      	uxth	r2, r2
 8006a72:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006a76:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 8006a7a:	b292      	uxth	r2, r2
 8006a7c:	2a00      	cmp	r2, #0
 8006a7e:	d1e9      	bne.n	8006a54 <HAL_UART_Transmit+0x4c>
 8006a80:	1c69      	adds	r1, r5, #1
 8006a82:	d125      	bne.n	8006ad0 <HAL_UART_Transmit+0xc8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a84:	69da      	ldr	r2, [r3, #28]
 8006a86:	0652      	lsls	r2, r2, #25
 8006a88:	d5fc      	bpl.n	8006a84 <HAL_UART_Transmit+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 8006a8a:	2320      	movs	r3, #32
 8006a8c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 8006a90:	2000      	movs	r0, #0
 8006a92:	e7c5      	b.n	8006a20 <HAL_UART_Transmit+0x18>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a94:	f7fb fc88 	bl	80023a8 <HAL_GetTick>
 8006a98:	1b80      	subs	r0, r0, r6
 8006a9a:	4285      	cmp	r5, r0
 8006a9c:	d322      	bcc.n	8006ae4 <HAL_UART_Transmit+0xdc>
 8006a9e:	b30d      	cbz	r5, 8006ae4 <HAL_UART_Transmit+0xdc>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006aa0:	6823      	ldr	r3, [r4, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aa4:	69da      	ldr	r2, [r3, #28]
 8006aa6:	0617      	lsls	r7, r2, #24
 8006aa8:	d5f4      	bpl.n	8006a94 <HAL_UART_Transmit+0x8c>
      if (pdata8bits == NULL)
 8006aaa:	f1b8 0f00 	cmp.w	r8, #0
 8006aae:	d1d9      	bne.n	8006a64 <HAL_UART_Transmit+0x5c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ab0:	f839 2b02 	ldrh.w	r2, [r9], #2
 8006ab4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ab8:	e7d6      	b.n	8006a68 <HAL_UART_Transmit+0x60>
    return HAL_BUSY;
 8006aba:	2002      	movs	r0, #2
}
 8006abc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ac0:	f7fb fc72 	bl	80023a8 <HAL_GetTick>
 8006ac4:	1b83      	subs	r3, r0, r6
 8006ac6:	429d      	cmp	r5, r3
 8006ac8:	d30c      	bcc.n	8006ae4 <HAL_UART_Transmit+0xdc>
 8006aca:	b15d      	cbz	r5, 8006ae4 <HAL_UART_Transmit+0xdc>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006acc:	6823      	ldr	r3, [r4, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	065b      	lsls	r3, r3, #25
 8006ad4:	d5f4      	bpl.n	8006ac0 <HAL_UART_Transmit+0xb8>
 8006ad6:	e7d8      	b.n	8006a8a <HAL_UART_Transmit+0x82>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ad8:	6923      	ldr	r3, [r4, #16]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1b5      	bne.n	8006a4a <HAL_UART_Transmit+0x42>
 8006ade:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8006ae0:	4698      	mov	r8, r3
 8006ae2:	e7b2      	b.n	8006a4a <HAL_UART_Transmit+0x42>
        huart->gState = HAL_UART_STATE_READY;
 8006ae4:	2320      	movs	r3, #32
 8006ae6:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        return HAL_TIMEOUT;
 8006aea:	2003      	movs	r0, #3
}
 8006aec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006af0 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop

08006af4 <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop

08006af8 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop

08006afc <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop

08006b00 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b00:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006b02:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006b04:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
{
 8006b08:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006b0a:	f8d0 408c 	ldr.w	r4, [r0, #140]	@ 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006b0e:	689a      	ldr	r2, [r3, #8]
 8006b10:	0612      	lsls	r2, r2, #24
 8006b12:	d501      	bpl.n	8006b18 <UART_DMAError+0x18>
 8006b14:	2921      	cmp	r1, #33	@ 0x21
 8006b16:	d00d      	beq.n	8006b34 <UART_DMAError+0x34>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006b18:	689a      	ldr	r2, [r3, #8]
 8006b1a:	0652      	lsls	r2, r2, #25
 8006b1c:	d501      	bpl.n	8006b22 <UART_DMAError+0x22>
 8006b1e:	2c22      	cmp	r4, #34	@ 0x22
 8006b20:	d023      	beq.n	8006b6a <UART_DMAError+0x6a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006b22:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 8006b26:	f043 0310 	orr.w	r3, r3, #16
 8006b2a:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b2e:	f7ff ffe5 	bl	8006afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b32:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 8006b34:	2200      	movs	r2, #0
 8006b36:	f8a0 2056 	strh.w	r2, [r0, #86]	@ 0x56
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006b3e:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b42:	e843 2100 	strex	r1, r2, [r3]
 8006b46:	2900      	cmp	r1, #0
 8006b48:	d1f7      	bne.n	8006b3a <UART_DMAError+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4a:	f103 0208 	add.w	r2, r3, #8
 8006b4e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006b52:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b56:	f103 0c08 	add.w	ip, r3, #8
 8006b5a:	e84c 2100 	strex	r1, r2, [ip]
 8006b5e:	2900      	cmp	r1, #0
 8006b60:	d1f3      	bne.n	8006b4a <UART_DMAError+0x4a>
  huart->gState = HAL_UART_STATE_READY;
 8006b62:	2220      	movs	r2, #32
 8006b64:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
}
 8006b68:	e7d6      	b.n	8006b18 <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b70:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b74:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b78:	e843 2100 	strex	r1, r2, [r3]
 8006b7c:	2900      	cmp	r1, #0
 8006b7e:	d1f7      	bne.n	8006b70 <UART_DMAError+0x70>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b80:	4c13      	ldr	r4, [pc, #76]	@ (8006bd0 <UART_DMAError+0xd0>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b82:	f103 0208 	add.w	r2, r3, #8
 8006b86:	e852 2f00 	ldrex	r2, [r2]
 8006b8a:	4022      	ands	r2, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8c:	f103 0c08 	add.w	ip, r3, #8
 8006b90:	e84c 2100 	strex	r1, r2, [ip]
 8006b94:	2900      	cmp	r1, #0
 8006b96:	d1f4      	bne.n	8006b82 <UART_DMAError+0x82>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b98:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 8006b9a:	2a01      	cmp	r2, #1
 8006b9c:	d006      	beq.n	8006bac <UART_DMAError+0xac>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b9e:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
  huart->RxISR = NULL;
 8006ba6:	6743      	str	r3, [r0, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ba8:	66c3      	str	r3, [r0, #108]	@ 0x6c
}
 8006baa:	e7ba      	b.n	8006b22 <UART_DMAError+0x22>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bac:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bb0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb4:	e843 2100 	strex	r1, r2, [r3]
 8006bb8:	2900      	cmp	r1, #0
 8006bba:	d0f0      	beq.n	8006b9e <UART_DMAError+0x9e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbc:	e853 2f00 	ldrex	r2, [r3]
 8006bc0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc4:	e843 2100 	strex	r1, r2, [r3]
 8006bc8:	2900      	cmp	r1, #0
 8006bca:	d1ef      	bne.n	8006bac <UART_DMAError+0xac>
 8006bcc:	e7e7      	b.n	8006b9e <UART_DMAError+0x9e>
 8006bce:	bf00      	nop
 8006bd0:	effffffe 	.word	0xeffffffe

08006bd4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bd4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bd6:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006bde:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006be2:	f7ff ff8b 	bl	8006afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006be6:	bd08      	pop	{r3, pc}

08006be8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006be8:	6803      	ldr	r3, [r0, #0]
 8006bea:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bec:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006bee:	f640 0c0f 	movw	ip, #2063	@ 0x80f
  if (errorflags == 0U)
 8006bf2:	ea12 0f0c 	tst.w	r2, ip
{
 8006bf6:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bf8:	689d      	ldr	r5, [r3, #8]
{
 8006bfa:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8006bfc:	d145      	bne.n	8006c8a <HAL_UART_IRQHandler+0xa2>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006bfe:	0696      	lsls	r6, r2, #26
 8006c00:	d507      	bpl.n	8006c12 <HAL_UART_IRQHandler+0x2a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c02:	f001 0c20 	and.w	ip, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c06:	f005 5e80 	and.w	lr, r5, #268435456	@ 0x10000000
 8006c0a:	ea5c 0c0e 	orrs.w	ip, ip, lr
 8006c0e:	f040 8106 	bne.w	8006e1e <HAL_UART_IRQHandler+0x236>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c12:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8006c14:	2801      	cmp	r0, #1
 8006c16:	f000 80d3 	beq.w	8006dc0 <HAL_UART_IRQHandler+0x1d8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006c1a:	02d6      	lsls	r6, r2, #11
 8006c1c:	d41d      	bmi.n	8006c5a <HAL_UART_IRQHandler+0x72>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006c1e:	0616      	lsls	r6, r2, #24
 8006c20:	d506      	bpl.n	8006c30 <HAL_UART_IRQHandler+0x48>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006c22:	f405 0500 	and.w	r5, r5, #8388608	@ 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006c26:	f001 0080 	and.w	r0, r1, #128	@ 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006c2a:	4328      	orrs	r0, r5
 8006c2c:	f040 80fe 	bne.w	8006e2c <HAL_UART_IRQHandler+0x244>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c30:	0650      	lsls	r0, r2, #25
 8006c32:	d51c      	bpl.n	8006c6e <HAL_UART_IRQHandler+0x86>
 8006c34:	064e      	lsls	r6, r1, #25
 8006c36:	d51a      	bpl.n	8006c6e <HAL_UART_IRQHandler+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c38:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c40:	e843 2100 	strex	r1, r2, [r3]
 8006c44:	2900      	cmp	r1, #0
 8006c46:	d1f7      	bne.n	8006c38 <HAL_UART_IRQHandler+0x50>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c48:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c4a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8006c4c:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->TxISR = NULL;
 8006c50:	67a3      	str	r3, [r4, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c52:	4620      	mov	r0, r4
 8006c54:	f7ff ff4c 	bl	8006af0 <HAL_UART_TxCpltCallback>
}
 8006c58:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006c5a:	0268      	lsls	r0, r5, #9
 8006c5c:	d5df      	bpl.n	8006c1e <HAL_UART_IRQHandler+0x36>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c5e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8006c62:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c64:	621a      	str	r2, [r3, #32]
}
 8006c66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8006c6a:	f000 bd4d 	b.w	8007708 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006c6e:	0215      	lsls	r5, r2, #8
 8006c70:	d502      	bpl.n	8006c78 <HAL_UART_IRQHandler+0x90>
 8006c72:	0048      	lsls	r0, r1, #1
 8006c74:	f100 80ff 	bmi.w	8006e76 <HAL_UART_IRQHandler+0x28e>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006c78:	01d3      	lsls	r3, r2, #7
 8006c7a:	d5ed      	bpl.n	8006c58 <HAL_UART_IRQHandler+0x70>
 8006c7c:	2900      	cmp	r1, #0
 8006c7e:	daeb      	bge.n	8006c58 <HAL_UART_IRQHandler+0x70>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006c80:	4620      	mov	r0, r4
}
 8006c82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006c86:	f000 bd41 	b.w	800770c <HAL_UARTEx_RxFifoFullCallback>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006c8a:	48b7      	ldr	r0, [pc, #732]	@ (8006f68 <HAL_UART_IRQHandler+0x380>)
 8006c8c:	ea05 0c00 	and.w	ip, r5, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006c90:	48b6      	ldr	r0, [pc, #728]	@ (8006f6c <HAL_UART_IRQHandler+0x384>)
 8006c92:	4008      	ands	r0, r1
 8006c94:	ea50 000c 	orrs.w	r0, r0, ip
 8006c98:	d0bb      	beq.n	8006c12 <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c9a:	07d6      	lsls	r6, r2, #31
 8006c9c:	d509      	bpl.n	8006cb2 <HAL_UART_IRQHandler+0xca>
 8006c9e:	05c8      	lsls	r0, r1, #23
 8006ca0:	d507      	bpl.n	8006cb2 <HAL_UART_IRQHandler+0xca>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ca2:	2001      	movs	r0, #1
 8006ca4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ca6:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8006caa:	f040 0001 	orr.w	r0, r0, #1
 8006cae:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cb2:	0796      	lsls	r6, r2, #30
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cb4:	f002 0004 	and.w	r0, r2, #4
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cb8:	f140 80aa 	bpl.w	8006e10 <HAL_UART_IRQHandler+0x228>
 8006cbc:	07ee      	lsls	r6, r5, #31
 8006cbe:	d510      	bpl.n	8006ce2 <HAL_UART_IRQHandler+0xfa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006cc0:	2602      	movs	r6, #2
 8006cc2:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cc4:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 8006cc8:	f046 0604 	orr.w	r6, r6, #4
 8006ccc:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cd0:	b138      	cbz	r0, 8006ce2 <HAL_UART_IRQHandler+0xfa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006cd2:	2004      	movs	r0, #4
 8006cd4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cd6:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8006cda:	f040 0002 	orr.w	r0, r0, #2
 8006cde:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ce2:	0710      	lsls	r0, r2, #28
 8006ce4:	d50c      	bpl.n	8006d00 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006ce6:	f001 0020 	and.w	r0, r1, #32
 8006cea:	ea50 000c 	orrs.w	r0, r0, ip
 8006cee:	d007      	beq.n	8006d00 <HAL_UART_IRQHandler+0x118>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006cf0:	2008      	movs	r0, #8
 8006cf2:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006cf4:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8006cf8:	f040 0008 	orr.w	r0, r0, #8
 8006cfc:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d00:	0516      	lsls	r6, r2, #20
 8006d02:	d50a      	bpl.n	8006d1a <HAL_UART_IRQHandler+0x132>
 8006d04:	0148      	lsls	r0, r1, #5
 8006d06:	d508      	bpl.n	8006d1a <HAL_UART_IRQHandler+0x132>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d08:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8006d0c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d0e:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8006d12:	f040 0020 	orr.w	r0, r0, #32
 8006d16:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d1a:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	d09a      	beq.n	8006c58 <HAL_UART_IRQHandler+0x70>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006d22:	0696      	lsls	r6, r2, #26
 8006d24:	d506      	bpl.n	8006d34 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006d26:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d2a:	f005 5580 	and.w	r5, r5, #268435456	@ 0x10000000
 8006d2e:	4329      	orrs	r1, r5
 8006d30:	f040 8095 	bne.w	8006e5e <HAL_UART_IRQHandler+0x276>
      errorcode = huart->ErrorCode;
 8006d34:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d38:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d3a:	f001 0128 	and.w	r1, r1, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d3e:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8006d42:	ea52 0501 	orrs.w	r5, r2, r1
 8006d46:	f000 80cc 	beq.w	8006ee2 <HAL_UART_IRQHandler+0x2fa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d4e:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d52:	e843 2100 	strex	r1, r2, [r3]
 8006d56:	2900      	cmp	r1, #0
 8006d58:	d1f7      	bne.n	8006d4a <HAL_UART_IRQHandler+0x162>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d5a:	4885      	ldr	r0, [pc, #532]	@ (8006f70 <HAL_UART_IRQHandler+0x388>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5c:	f103 0208 	add.w	r2, r3, #8
 8006d60:	e852 2f00 	ldrex	r2, [r2]
 8006d64:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d66:	f103 0508 	add.w	r5, r3, #8
 8006d6a:	e845 2100 	strex	r1, r2, [r5]
 8006d6e:	2900      	cmp	r1, #0
 8006d70:	d1f4      	bne.n	8006d5c <HAL_UART_IRQHandler+0x174>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d72:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8006d74:	2a01      	cmp	r2, #1
 8006d76:	d061      	beq.n	8006e3c <HAL_UART_IRQHandler+0x254>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d78:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006d7a:	2120      	movs	r1, #32
 8006d7c:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d80:	66e2      	str	r2, [r4, #108]	@ 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d82:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 8006d84:	6762      	str	r2, [r4, #116]	@ 0x74
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d86:	064d      	lsls	r5, r1, #25
 8006d88:	d571      	bpl.n	8006e6e <HAL_UART_IRQHandler+0x286>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8a:	f103 0208 	add.w	r2, r3, #8
 8006d8e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d96:	f103 0008 	add.w	r0, r3, #8
 8006d9a:	e840 2100 	strex	r1, r2, [r0]
 8006d9e:	2900      	cmp	r1, #0
 8006da0:	d1f3      	bne.n	8006d8a <HAL_UART_IRQHandler+0x1a2>
          if (huart->hdmarx != NULL)
 8006da2:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8006da6:	2800      	cmp	r0, #0
 8006da8:	d061      	beq.n	8006e6e <HAL_UART_IRQHandler+0x286>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006daa:	4b72      	ldr	r3, [pc, #456]	@ (8006f74 <HAL_UART_IRQHandler+0x38c>)
 8006dac:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006dae:	f7fc ff7d 	bl	8003cac <HAL_DMA_Abort_IT>
 8006db2:	2800      	cmp	r0, #0
 8006db4:	f43f af50 	beq.w	8006c58 <HAL_UART_IRQHandler+0x70>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006db8:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8006dbc:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8006dbe:	e032      	b.n	8006e26 <HAL_UART_IRQHandler+0x23e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006dc0:	06d0      	lsls	r0, r2, #27
 8006dc2:	f57f af2a 	bpl.w	8006c1a <HAL_UART_IRQHandler+0x32>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006dc6:	06ce      	lsls	r6, r1, #27
 8006dc8:	f57f af27 	bpl.w	8006c1a <HAL_UART_IRQHandler+0x32>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dcc:	2210      	movs	r2, #16
 8006dce:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd0:	6899      	ldr	r1, [r3, #8]
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006dd2:	f8b4 205c 	ldrh.w	r2, [r4, #92]	@ 0x5c
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd6:	0648      	lsls	r0, r1, #25
 8006dd8:	f140 8089 	bpl.w	8006eee <HAL_UART_IRQHandler+0x306>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ddc:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8006de0:	6805      	ldr	r5, [r0, #0]
 8006de2:	6869      	ldr	r1, [r5, #4]
 8006de4:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 8006de6:	2900      	cmp	r1, #0
 8006de8:	f000 80b6 	beq.w	8006f58 <HAL_UART_IRQHandler+0x370>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006dec:	4291      	cmp	r1, r2
 8006dee:	f080 80b3 	bcs.w	8006f58 <HAL_UART_IRQHandler+0x370>
        huart->RxXferCount = nb_remaining_rx_data;
 8006df2:	f8a4 105e 	strh.w	r1, [r4, #94]	@ 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006df6:	6829      	ldr	r1, [r5, #0]
 8006df8:	0689      	lsls	r1, r1, #26
 8006dfa:	d541      	bpl.n	8006e80 <HAL_UART_IRQHandler+0x298>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e00:	f8b4 105e 	ldrh.w	r1, [r4, #94]	@ 0x5e
 8006e04:	1a51      	subs	r1, r2, r1
 8006e06:	4620      	mov	r0, r4
 8006e08:	b289      	uxth	r1, r1
 8006e0a:	f7fa ff4b 	bl	8001ca4 <HAL_UARTEx_RxEventCallback>
}
 8006e0e:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e10:	2800      	cmp	r0, #0
 8006e12:	f43f af66 	beq.w	8006ce2 <HAL_UART_IRQHandler+0xfa>
 8006e16:	07ee      	lsls	r6, r5, #31
 8006e18:	f53f af5b 	bmi.w	8006cd2 <HAL_UART_IRQHandler+0xea>
 8006e1c:	e761      	b.n	8006ce2 <HAL_UART_IRQHandler+0xfa>
      if (huart->RxISR != NULL)
 8006e1e:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f43f af19 	beq.w	8006c58 <HAL_UART_IRQHandler+0x70>
}
 8006e26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e2a:	4718      	bx	r3
    if (huart->TxISR != NULL)
 8006e2c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f43f af12 	beq.w	8006c58 <HAL_UART_IRQHandler+0x70>
      huart->TxISR(huart);
 8006e34:	4620      	mov	r0, r4
}
 8006e36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8006e3a:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e40:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e44:	e843 2100 	strex	r1, r2, [r3]
 8006e48:	2900      	cmp	r1, #0
 8006e4a:	d095      	beq.n	8006d78 <HAL_UART_IRQHandler+0x190>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	e853 2f00 	ldrex	r2, [r3]
 8006e50:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e54:	e843 2100 	strex	r1, r2, [r3]
 8006e58:	2900      	cmp	r1, #0
 8006e5a:	d1ef      	bne.n	8006e3c <HAL_UART_IRQHandler+0x254>
 8006e5c:	e78c      	b.n	8006d78 <HAL_UART_IRQHandler+0x190>
        if (huart->RxISR != NULL)
 8006e5e:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8006e60:	2a00      	cmp	r2, #0
 8006e62:	f43f af67 	beq.w	8006d34 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8006e66:	4620      	mov	r0, r4
 8006e68:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e6a:	6823      	ldr	r3, [r4, #0]
 8006e6c:	e762      	b.n	8006d34 <HAL_UART_IRQHandler+0x14c>
            HAL_UART_ErrorCallback(huart);
 8006e6e:	4620      	mov	r0, r4
 8006e70:	f7ff fe44 	bl	8006afc <HAL_UART_ErrorCallback>
}
 8006e74:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006e76:	4620      	mov	r0, r4
}
 8006e78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006e7c:	f000 bc48 	b.w	8007710 <HAL_UARTEx_TxFifoEmptyCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e80:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e88:	e843 2100 	strex	r1, r2, [r3]
 8006e8c:	2900      	cmp	r1, #0
 8006e8e:	d1f7      	bne.n	8006e80 <HAL_UART_IRQHandler+0x298>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e90:	f103 0208 	add.w	r2, r3, #8
 8006e94:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e98:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9c:	f103 0508 	add.w	r5, r3, #8
 8006ea0:	e845 2100 	strex	r1, r2, [r5]
 8006ea4:	2900      	cmp	r1, #0
 8006ea6:	d1f3      	bne.n	8006e90 <HAL_UART_IRQHandler+0x2a8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea8:	f103 0208 	add.w	r2, r3, #8
 8006eac:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb4:	f103 0508 	add.w	r5, r3, #8
 8006eb8:	e845 2100 	strex	r1, r2, [r5]
 8006ebc:	2900      	cmp	r1, #0
 8006ebe:	d1f3      	bne.n	8006ea8 <HAL_UART_IRQHandler+0x2c0>
          huart->RxState = HAL_UART_STATE_READY;
 8006ec0:	2220      	movs	r2, #32
 8006ec2:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec6:	66e1      	str	r1, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec8:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ecc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed0:	e843 2100 	strex	r1, r2, [r3]
 8006ed4:	2900      	cmp	r1, #0
 8006ed6:	d1f7      	bne.n	8006ec8 <HAL_UART_IRQHandler+0x2e0>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ed8:	f7fc feae 	bl	8003c38 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006edc:	f8b4 205c 	ldrh.w	r2, [r4, #92]	@ 0x5c
 8006ee0:	e78c      	b.n	8006dfc <HAL_UART_IRQHandler+0x214>
        HAL_UART_ErrorCallback(huart);
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	f7ff fe0a 	bl	8006afc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ee8:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
}
 8006eec:	bd70      	pop	{r4, r5, r6, pc}
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006eee:	f8b4 005e 	ldrh.w	r0, [r4, #94]	@ 0x5e
      if ((huart->RxXferCount > 0U)
 8006ef2:	f8b4 105e 	ldrh.w	r1, [r4, #94]	@ 0x5e
 8006ef6:	b289      	uxth	r1, r1
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ef8:	b280      	uxth	r0, r0
      if ((huart->RxXferCount > 0U)
 8006efa:	2900      	cmp	r1, #0
 8006efc:	f43f aeac 	beq.w	8006c58 <HAL_UART_IRQHandler+0x70>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f00:	1a12      	subs	r2, r2, r0
 8006f02:	b291      	uxth	r1, r2
          && (nb_rx_data > 0U))
 8006f04:	2900      	cmp	r1, #0
 8006f06:	f43f aea7 	beq.w	8006c58 <HAL_UART_IRQHandler+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f0e:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f12:	e843 2000 	strex	r0, r2, [r3]
 8006f16:	2800      	cmp	r0, #0
 8006f18:	d1f7      	bne.n	8006f0a <HAL_UART_IRQHandler+0x322>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f1a:	4d15      	ldr	r5, [pc, #84]	@ (8006f70 <HAL_UART_IRQHandler+0x388>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1c:	f103 0208 	add.w	r2, r3, #8
 8006f20:	e852 2f00 	ldrex	r2, [r2]
 8006f24:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f26:	f103 0608 	add.w	r6, r3, #8
 8006f2a:	e846 2000 	strex	r0, r2, [r6]
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	d1f4      	bne.n	8006f1c <HAL_UART_IRQHandler+0x334>
        huart->RxState = HAL_UART_STATE_READY;
 8006f32:	2220      	movs	r2, #32
 8006f34:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 8006f38:	6760      	str	r0, [r4, #116]	@ 0x74
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f3a:	66e0      	str	r0, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f40:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f44:	e843 2000 	strex	r0, r2, [r3]
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	d1f7      	bne.n	8006f3c <HAL_UART_IRQHandler+0x354>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f50:	4620      	mov	r0, r4
 8006f52:	f7fa fea7 	bl	8001ca4 <HAL_UARTEx_RxEventCallback>
}
 8006f56:	bd70      	pop	{r4, r5, r6, pc}
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006f58:	4291      	cmp	r1, r2
 8006f5a:	f47f ae7d 	bne.w	8006c58 <HAL_UART_IRQHandler+0x70>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006f5e:	682b      	ldr	r3, [r5, #0]
 8006f60:	069b      	lsls	r3, r3, #26
 8006f62:	d4f3      	bmi.n	8006f4c <HAL_UART_IRQHandler+0x364>
}
 8006f64:	bd70      	pop	{r4, r5, r6, pc}
 8006f66:	bf00      	nop
 8006f68:	10000001 	.word	0x10000001
 8006f6c:	04000120 	.word	0x04000120
 8006f70:	effffffe 	.word	0xeffffffe
 8006f74:	08006bd5 	.word	0x08006bd5

08006f78 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f78:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8006f7a:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	6703      	str	r3, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f80:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d002      	beq.n	8006f8c <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 8006f86:	f7ff fdb7 	bl	8006af8 <HAL_UART_RxHalfCpltCallback>
}
 8006f8a:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006f8c:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8006f90:	0849      	lsrs	r1, r1, #1
 8006f92:	f7fa fe87 	bl	8001ca4 <HAL_UARTEx_RxEventCallback>
}
 8006f96:	bd08      	pop	{r3, pc}

08006f98 <UART_DMAReceiveCplt>:
{
 8006f98:	b508      	push	{r3, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006f9a:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f9c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	f012 0220 	ands.w	r2, r2, #32
 8006fa4:	d128      	bne.n	8006ff8 <UART_DMAReceiveCplt+0x60>
    huart->RxXferCount = 0U;
 8006fa6:	6803      	ldr	r3, [r0, #0]
 8006fa8:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fac:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb4:	e843 2100 	strex	r1, r2, [r3]
 8006fb8:	2900      	cmp	r1, #0
 8006fba:	d1f7      	bne.n	8006fac <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbc:	f103 0208 	add.w	r2, r3, #8
 8006fc0:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fc4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc8:	f103 0c08 	add.w	ip, r3, #8
 8006fcc:	e84c 2100 	strex	r1, r2, [ip]
 8006fd0:	2900      	cmp	r1, #0
 8006fd2:	d1f3      	bne.n	8006fbc <UART_DMAReceiveCplt+0x24>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd4:	f103 0208 	add.w	r2, r3, #8
 8006fd8:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fdc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe0:	f103 0c08 	add.w	ip, r3, #8
 8006fe4:	e84c 2100 	strex	r1, r2, [ip]
 8006fe8:	2900      	cmp	r1, #0
 8006fea:	d1f3      	bne.n	8006fd4 <UART_DMAReceiveCplt+0x3c>
    huart->RxState = HAL_UART_STATE_READY;
 8006fec:	2220      	movs	r2, #32
 8006fee:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ff2:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 8006ff4:	2a01      	cmp	r2, #1
 8006ff6:	d007      	beq.n	8007008 <UART_DMAReceiveCplt+0x70>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	6703      	str	r3, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ffc:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d013      	beq.n	800702a <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 8007002:	f7ff fd77 	bl	8006af4 <HAL_UART_RxCpltCallback>
}
 8007006:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007008:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800700c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007010:	e843 2100 	strex	r1, r2, [r3]
 8007014:	2900      	cmp	r1, #0
 8007016:	d0ef      	beq.n	8006ff8 <UART_DMAReceiveCplt+0x60>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007018:	e853 2f00 	ldrex	r2, [r3]
 800701c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007020:	e843 2100 	strex	r1, r2, [r3]
 8007024:	2900      	cmp	r1, #0
 8007026:	d1ef      	bne.n	8007008 <UART_DMAReceiveCplt+0x70>
 8007028:	e7e6      	b.n	8006ff8 <UART_DMAReceiveCplt+0x60>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800702a:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 800702e:	f7fa fe39 	bl	8001ca4 <HAL_UARTEx_RxEventCallback>
}
 8007032:	bd08      	pop	{r3, pc}

08007034 <UART_SetConfig>:
{
 8007034:	b570      	push	{r4, r5, r6, lr}
 8007036:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8007038:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800703a:	6882      	ldr	r2, [r0, #8]
 800703c:	6900      	ldr	r0, [r0, #16]
 800703e:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007040:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007042:	4302      	orrs	r2, r0
 8007044:	430a      	orrs	r2, r1
 8007046:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007048:	49a0      	ldr	r1, [pc, #640]	@ (80072cc <UART_SetConfig+0x298>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800704a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800704c:	4029      	ands	r1, r5
 800704e:	430a      	orrs	r2, r1
 8007050:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007052:	685a      	ldr	r2, [r3, #4]
 8007054:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007056:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007058:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800705c:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800705e:	499c      	ldr	r1, [pc, #624]	@ (80072d0 <UART_SetConfig+0x29c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007060:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007062:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007064:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007066:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007068:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 800706c:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007070:	f000 80d1 	beq.w	8007216 <UART_SetConfig+0x1e2>
    tmpreg |= huart->Init.OneBitSampling;
 8007074:	6a26      	ldr	r6, [r4, #32]
 8007076:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007078:	430a      	orrs	r2, r1
 800707a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800707c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800707e:	f022 020f 	bic.w	r2, r2, #15
 8007082:	432a      	orrs	r2, r5
 8007084:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007086:	4a93      	ldr	r2, [pc, #588]	@ (80072d4 <UART_SetConfig+0x2a0>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d039      	beq.n	8007100 <UART_SetConfig+0xcc>
 800708c:	4a92      	ldr	r2, [pc, #584]	@ (80072d8 <UART_SetConfig+0x2a4>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d012      	beq.n	80070b8 <UART_SetConfig+0x84>
 8007092:	4a92      	ldr	r2, [pc, #584]	@ (80072dc <UART_SetConfig+0x2a8>)
 8007094:	4293      	cmp	r3, r2
 8007096:	f000 80a6 	beq.w	80071e6 <UART_SetConfig+0x1b2>
 800709a:	4a91      	ldr	r2, [pc, #580]	@ (80072e0 <UART_SetConfig+0x2ac>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d043      	beq.n	8007128 <UART_SetConfig+0xf4>
 80070a0:	4a90      	ldr	r2, [pc, #576]	@ (80072e4 <UART_SetConfig+0x2b0>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	f000 808f 	beq.w	80071c6 <UART_SetConfig+0x192>
        ret = HAL_ERROR;
 80070a8:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80070aa:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 80070ac:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->TxISR = NULL;
 80070b0:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 80070b4:	66a2      	str	r2, [r4, #104]	@ 0x68
}
 80070b6:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070b8:	4b8b      	ldr	r3, [pc, #556]	@ (80072e8 <UART_SetConfig+0x2b4>)
 80070ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070be:	f003 030c 	and.w	r3, r3, #12
 80070c2:	2b0c      	cmp	r3, #12
 80070c4:	d8f0      	bhi.n	80070a8 <UART_SetConfig+0x74>
 80070c6:	a201      	add	r2, pc, #4	@ (adr r2, 80070cc <UART_SetConfig+0x98>)
 80070c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070cc:	080071db 	.word	0x080071db
 80070d0:	080070a9 	.word	0x080070a9
 80070d4:	080070a9 	.word	0x080070a9
 80070d8:	080070a9 	.word	0x080070a9
 80070dc:	08007141 	.word	0x08007141
 80070e0:	080070a9 	.word	0x080070a9
 80070e4:	080070a9 	.word	0x080070a9
 80070e8:	080070a9 	.word	0x080070a9
 80070ec:	08007189 	.word	0x08007189
 80070f0:	080070a9 	.word	0x080070a9
 80070f4:	080070a9 	.word	0x080070a9
 80070f8:	080070a9 	.word	0x080070a9
 80070fc:	08007159 	.word	0x08007159
 8007100:	4b79      	ldr	r3, [pc, #484]	@ (80072e8 <UART_SetConfig+0x2b4>)
 8007102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007106:	f003 0303 	and.w	r3, r3, #3
 800710a:	2b02      	cmp	r3, #2
 800710c:	d03c      	beq.n	8007188 <UART_SetConfig+0x154>
 800710e:	2b03      	cmp	r3, #3
 8007110:	d022      	beq.n	8007158 <UART_SetConfig+0x124>
 8007112:	2b01      	cmp	r3, #1
 8007114:	d014      	beq.n	8007140 <UART_SetConfig+0x10c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007116:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800711a:	f000 80ce 	beq.w	80072ba <UART_SetConfig+0x286>
        pclk = HAL_RCC_GetPCLK2Freq();
 800711e:	f7fe f969 	bl	80053f4 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8007122:	b9a8      	cbnz	r0, 8007150 <UART_SetConfig+0x11c>
        ret = HAL_ERROR;
 8007124:	2000      	movs	r0, #0
 8007126:	e7c0      	b.n	80070aa <UART_SetConfig+0x76>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007128:	4b6f      	ldr	r3, [pc, #444]	@ (80072e8 <UART_SetConfig+0x2b4>)
 800712a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800712e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007132:	2b80      	cmp	r3, #128	@ 0x80
 8007134:	d028      	beq.n	8007188 <UART_SetConfig+0x154>
 8007136:	d863      	bhi.n	8007200 <UART_SetConfig+0x1cc>
 8007138:	2b00      	cmp	r3, #0
 800713a:	d04e      	beq.n	80071da <UART_SetConfig+0x1a6>
 800713c:	2b40      	cmp	r3, #64	@ 0x40
 800713e:	d1b3      	bne.n	80070a8 <UART_SetConfig+0x74>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007140:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007144:	f000 80be 	beq.w	80072c4 <UART_SetConfig+0x290>
        pclk = HAL_RCC_GetSysClockFreq();
 8007148:	f7fe f800 	bl	800514c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800714c:	2800      	cmp	r0, #0
 800714e:	d0e9      	beq.n	8007124 <UART_SetConfig+0xf0>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007150:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8007152:	e006      	b.n	8007162 <UART_SetConfig+0x12e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007154:	2b30      	cmp	r3, #48	@ 0x30
 8007156:	d1a7      	bne.n	80070a8 <UART_SetConfig+0x74>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007158:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800715c:	d018      	beq.n	8007190 <UART_SetConfig+0x15c>
        pclk = (uint32_t) LSE_VALUE;
 800715e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007162:	6863      	ldr	r3, [r4, #4]
 8007164:	4a61      	ldr	r2, [pc, #388]	@ (80072ec <UART_SetConfig+0x2b8>)
 8007166:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
 800716a:	fbb0 f0f1 	udiv	r0, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800716e:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007172:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8007176:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800717a:	f1a0 0310 	sub.w	r3, r0, #16
 800717e:	4293      	cmp	r3, r2
 8007180:	d892      	bhi.n	80070a8 <UART_SetConfig+0x74>
          huart->Instance->BRR = usartdiv;
 8007182:	6823      	ldr	r3, [r4, #0]
 8007184:	60d8      	str	r0, [r3, #12]
 8007186:	e7cd      	b.n	8007124 <UART_SetConfig+0xf0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007188:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 800718c:	4858      	ldr	r0, [pc, #352]	@ (80072f0 <UART_SetConfig+0x2bc>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800718e:	d1e8      	bne.n	8007162 <UART_SetConfig+0x12e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007190:	6862      	ldr	r2, [r4, #4]
 8007192:	4b56      	ldr	r3, [pc, #344]	@ (80072ec <UART_SetConfig+0x2b8>)
 8007194:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 8007198:	fbb0 f0f1 	udiv	r0, r0, r1
 800719c:	0853      	lsrs	r3, r2, #1
 800719e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071a2:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071a6:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071aa:	f1a3 0210 	sub.w	r2, r3, #16
 80071ae:	428a      	cmp	r2, r1
 80071b0:	f63f af7a 	bhi.w	80070a8 <UART_SetConfig+0x74>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071b4:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 80071b8:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071ba:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071bc:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80071c0:	4313      	orrs	r3, r2
 80071c2:	60cb      	str	r3, [r1, #12]
 80071c4:	e7ae      	b.n	8007124 <UART_SetConfig+0xf0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071c6:	4b48      	ldr	r3, [pc, #288]	@ (80072e8 <UART_SetConfig+0x2b4>)
 80071c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071d4:	d0d8      	beq.n	8007188 <UART_SetConfig+0x154>
 80071d6:	d81a      	bhi.n	800720e <UART_SetConfig+0x1da>
 80071d8:	b9ab      	cbnz	r3, 8007206 <UART_SetConfig+0x1d2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071da:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80071de:	d065      	beq.n	80072ac <UART_SetConfig+0x278>
        pclk = HAL_RCC_GetPCLK1Freq();
 80071e0:	f7fe f8f6 	bl	80053d0 <HAL_RCC_GetPCLK1Freq>
        break;
 80071e4:	e79d      	b.n	8007122 <UART_SetConfig+0xee>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071e6:	4b40      	ldr	r3, [pc, #256]	@ (80072e8 <UART_SetConfig+0x2b4>)
 80071e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071ec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80071f0:	2b20      	cmp	r3, #32
 80071f2:	d0c9      	beq.n	8007188 <UART_SetConfig+0x154>
 80071f4:	d8ae      	bhi.n	8007154 <UART_SetConfig+0x120>
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d0ef      	beq.n	80071da <UART_SetConfig+0x1a6>
 80071fa:	2b10      	cmp	r3, #16
 80071fc:	d0a0      	beq.n	8007140 <UART_SetConfig+0x10c>
 80071fe:	e753      	b.n	80070a8 <UART_SetConfig+0x74>
 8007200:	2bc0      	cmp	r3, #192	@ 0xc0
 8007202:	d0a9      	beq.n	8007158 <UART_SetConfig+0x124>
 8007204:	e750      	b.n	80070a8 <UART_SetConfig+0x74>
 8007206:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800720a:	d099      	beq.n	8007140 <UART_SetConfig+0x10c>
 800720c:	e74c      	b.n	80070a8 <UART_SetConfig+0x74>
 800720e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007212:	d0a1      	beq.n	8007158 <UART_SetConfig+0x124>
 8007214:	e748      	b.n	80070a8 <UART_SetConfig+0x74>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007216:	4311      	orrs	r1, r2
 8007218:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800721a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800721c:	4932      	ldr	r1, [pc, #200]	@ (80072e8 <UART_SetConfig+0x2b4>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800721e:	f022 020f 	bic.w	r2, r2, #15
 8007222:	432a      	orrs	r2, r5
 8007224:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007226:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 800722a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800722e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007232:	d045      	beq.n	80072c0 <UART_SetConfig+0x28c>
 8007234:	d833      	bhi.n	800729e <UART_SetConfig+0x26a>
 8007236:	b37b      	cbz	r3, 8007298 <UART_SetConfig+0x264>
 8007238:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800723c:	f47f af34 	bne.w	80070a8 <UART_SetConfig+0x74>
        pclk = HAL_RCC_GetSysClockFreq();
 8007240:	f7fd ff84 	bl	800514c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8007244:	2800      	cmp	r0, #0
 8007246:	f43f af6d 	beq.w	8007124 <UART_SetConfig+0xf0>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800724a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800724c:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800724e:	4b27      	ldr	r3, [pc, #156]	@ (80072ec <UART_SetConfig+0x2b8>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007250:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007254:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 8007258:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800725c:	4299      	cmp	r1, r3
 800725e:	f63f af23 	bhi.w	80070a8 <UART_SetConfig+0x74>
 8007262:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 8007266:	f63f af1f 	bhi.w	80070a8 <UART_SetConfig+0x74>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800726a:	2300      	movs	r3, #0
 800726c:	4619      	mov	r1, r3
 800726e:	f7f9 fae1 	bl	8000834 <__aeabi_uldivmod>
 8007272:	0872      	lsrs	r2, r6, #1
 8007274:	0203      	lsls	r3, r0, #8
 8007276:	0209      	lsls	r1, r1, #8
 8007278:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800727c:	1898      	adds	r0, r3, r2
 800727e:	f141 0100 	adc.w	r1, r1, #0
 8007282:	4632      	mov	r2, r6
 8007284:	2300      	movs	r3, #0
 8007286:	f7f9 fad5 	bl	8000834 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800728a:	4b1a      	ldr	r3, [pc, #104]	@ (80072f4 <UART_SetConfig+0x2c0>)
 800728c:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8007290:	429a      	cmp	r2, r3
 8007292:	f63f af09 	bhi.w	80070a8 <UART_SetConfig+0x74>
 8007296:	e774      	b.n	8007182 <UART_SetConfig+0x14e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007298:	f7fe f89a 	bl	80053d0 <HAL_RCC_GetPCLK1Freq>
        break;
 800729c:	e7d2      	b.n	8007244 <UART_SetConfig+0x210>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800729e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80072a2:	f47f af01 	bne.w	80070a8 <UART_SetConfig+0x74>
        pclk = (uint32_t) LSE_VALUE;
 80072a6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80072aa:	e7cf      	b.n	800724c <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetPCLK1Freq();
 80072ac:	f7fe f890 	bl	80053d0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80072b0:	2800      	cmp	r0, #0
 80072b2:	f43f af37 	beq.w	8007124 <UART_SetConfig+0xf0>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072b6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80072b8:	e76a      	b.n	8007190 <UART_SetConfig+0x15c>
        pclk = HAL_RCC_GetPCLK2Freq();
 80072ba:	f7fe f89b 	bl	80053f4 <HAL_RCC_GetPCLK2Freq>
        break;
 80072be:	e7f7      	b.n	80072b0 <UART_SetConfig+0x27c>
        pclk = (uint32_t) HSI_VALUE;
 80072c0:	480b      	ldr	r0, [pc, #44]	@ (80072f0 <UART_SetConfig+0x2bc>)
 80072c2:	e7c3      	b.n	800724c <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetSysClockFreq();
 80072c4:	f7fd ff42 	bl	800514c <HAL_RCC_GetSysClockFreq>
        break;
 80072c8:	e7f2      	b.n	80072b0 <UART_SetConfig+0x27c>
 80072ca:	bf00      	nop
 80072cc:	cfff69f3 	.word	0xcfff69f3
 80072d0:	40008000 	.word	0x40008000
 80072d4:	40013800 	.word	0x40013800
 80072d8:	40004400 	.word	0x40004400
 80072dc:	40004800 	.word	0x40004800
 80072e0:	40004c00 	.word	0x40004c00
 80072e4:	40005000 	.word	0x40005000
 80072e8:	40021000 	.word	0x40021000
 80072ec:	08007e98 	.word	0x08007e98
 80072f0:	00f42400 	.word	0x00f42400
 80072f4:	000ffcff 	.word	0x000ffcff

080072f8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072f8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80072fa:	071a      	lsls	r2, r3, #28
{
 80072fc:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072fe:	d506      	bpl.n	800730e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007300:	6801      	ldr	r1, [r0, #0]
 8007302:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8007304:	684a      	ldr	r2, [r1, #4]
 8007306:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800730a:	4322      	orrs	r2, r4
 800730c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800730e:	07dc      	lsls	r4, r3, #31
 8007310:	d506      	bpl.n	8007320 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007312:	6801      	ldr	r1, [r0, #0]
 8007314:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8007316:	684a      	ldr	r2, [r1, #4]
 8007318:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800731c:	4322      	orrs	r2, r4
 800731e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007320:	0799      	lsls	r1, r3, #30
 8007322:	d506      	bpl.n	8007332 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007324:	6801      	ldr	r1, [r0, #0]
 8007326:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8007328:	684a      	ldr	r2, [r1, #4]
 800732a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800732e:	4322      	orrs	r2, r4
 8007330:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007332:	075a      	lsls	r2, r3, #29
 8007334:	d506      	bpl.n	8007344 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007336:	6801      	ldr	r1, [r0, #0]
 8007338:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800733a:	684a      	ldr	r2, [r1, #4]
 800733c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007340:	4322      	orrs	r2, r4
 8007342:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007344:	06dc      	lsls	r4, r3, #27
 8007346:	d506      	bpl.n	8007356 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007348:	6801      	ldr	r1, [r0, #0]
 800734a:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800734c:	688a      	ldr	r2, [r1, #8]
 800734e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007352:	4322      	orrs	r2, r4
 8007354:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007356:	0699      	lsls	r1, r3, #26
 8007358:	d506      	bpl.n	8007368 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800735a:	6801      	ldr	r1, [r0, #0]
 800735c:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800735e:	688a      	ldr	r2, [r1, #8]
 8007360:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007364:	4322      	orrs	r2, r4
 8007366:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007368:	065a      	lsls	r2, r3, #25
 800736a:	d509      	bpl.n	8007380 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800736c:	6801      	ldr	r1, [r0, #0]
 800736e:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8007370:	684a      	ldr	r2, [r1, #4]
 8007372:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8007376:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007378:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800737c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800737e:	d00b      	beq.n	8007398 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007380:	061b      	lsls	r3, r3, #24
 8007382:	d506      	bpl.n	8007392 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007384:	6802      	ldr	r2, [r0, #0]
 8007386:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8007388:	6853      	ldr	r3, [r2, #4]
 800738a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800738e:	430b      	orrs	r3, r1
 8007390:	6053      	str	r3, [r2, #4]
}
 8007392:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007396:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007398:	684a      	ldr	r2, [r1, #4]
 800739a:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800739c:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 80073a0:	4322      	orrs	r2, r4
 80073a2:	604a      	str	r2, [r1, #4]
 80073a4:	e7ec      	b.n	8007380 <UART_AdvFeatureConfig+0x88>
 80073a6:	bf00      	nop

080073a8 <UART_CheckIdleState>:
{
 80073a8:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073aa:	2300      	movs	r3, #0
{
 80073ac:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ae:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 80073b2:	f7fa fff9 	bl	80023a8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073b6:	6822      	ldr	r2, [r4, #0]
 80073b8:	6813      	ldr	r3, [r2, #0]
 80073ba:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 80073bc:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073be:	d40f      	bmi.n	80073e0 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073c0:	6813      	ldr	r3, [r2, #0]
 80073c2:	0759      	lsls	r1, r3, #29
 80073c4:	d431      	bmi.n	800742a <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073c6:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80073c8:	2220      	movs	r2, #32
 80073ca:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  return HAL_OK;
 80073ce:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 80073d0:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073d4:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073d6:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 80073d8:	2300      	movs	r3, #0
 80073da:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 80073de:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073e0:	69d3      	ldr	r3, [r2, #28]
 80073e2:	0298      	lsls	r0, r3, #10
 80073e4:	d4ec      	bmi.n	80073c0 <UART_CheckIdleState+0x18>
 80073e6:	e00c      	b.n	8007402 <UART_CheckIdleState+0x5a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80073e8:	6819      	ldr	r1, [r3, #0]
 80073ea:	0749      	lsls	r1, r1, #29
 80073ec:	461a      	mov	r2, r3
 80073ee:	d505      	bpl.n	80073fc <UART_CheckIdleState+0x54>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80073f0:	69d9      	ldr	r1, [r3, #28]
 80073f2:	0708      	lsls	r0, r1, #28
 80073f4:	d44a      	bmi.n	800748c <UART_CheckIdleState+0xe4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073f6:	69d9      	ldr	r1, [r3, #28]
 80073f8:	0509      	lsls	r1, r1, #20
 80073fa:	d475      	bmi.n	80074e8 <UART_CheckIdleState+0x140>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073fc:	69db      	ldr	r3, [r3, #28]
 80073fe:	0298      	lsls	r0, r3, #10
 8007400:	d4de      	bmi.n	80073c0 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007402:	f7fa ffd1 	bl	80023a8 <HAL_GetTick>
 8007406:	1b43      	subs	r3, r0, r5
 8007408:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800740c:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800740e:	d3eb      	bcc.n	80073e8 <UART_CheckIdleState+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007410:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007414:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007418:	e843 2100 	strex	r1, r2, [r3]
 800741c:	2900      	cmp	r1, #0
 800741e:	d1f7      	bne.n	8007410 <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 8007420:	2320      	movs	r3, #32
 8007422:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8007426:	2003      	movs	r0, #3
 8007428:	e7d6      	b.n	80073d8 <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800742a:	69d3      	ldr	r3, [r2, #28]
 800742c:	025b      	lsls	r3, r3, #9
 800742e:	d4ca      	bmi.n	80073c6 <UART_CheckIdleState+0x1e>
 8007430:	e00d      	b.n	800744e <UART_CheckIdleState+0xa6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	0750      	lsls	r0, r2, #29
 8007436:	d507      	bpl.n	8007448 <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007438:	69da      	ldr	r2, [r3, #28]
 800743a:	0711      	lsls	r1, r2, #28
 800743c:	f100 8082 	bmi.w	8007544 <UART_CheckIdleState+0x19c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007440:	69da      	ldr	r2, [r3, #28]
 8007442:	0512      	lsls	r2, r2, #20
 8007444:	f100 80ac 	bmi.w	80075a0 <UART_CheckIdleState+0x1f8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007448:	69db      	ldr	r3, [r3, #28]
 800744a:	025b      	lsls	r3, r3, #9
 800744c:	d4bb      	bmi.n	80073c6 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800744e:	f7fa ffab 	bl	80023a8 <HAL_GetTick>
 8007452:	1b43      	subs	r3, r0, r5
 8007454:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007458:	6823      	ldr	r3, [r4, #0]
 800745a:	d3ea      	bcc.n	8007432 <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745c:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007460:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007464:	e843 2100 	strex	r1, r2, [r3]
 8007468:	2900      	cmp	r1, #0
 800746a:	d1f7      	bne.n	800745c <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746c:	f103 0208 	add.w	r2, r3, #8
 8007470:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007474:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007478:	f103 0008 	add.w	r0, r3, #8
 800747c:	e840 2100 	strex	r1, r2, [r0]
 8007480:	2900      	cmp	r1, #0
 8007482:	d1f3      	bne.n	800746c <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 8007484:	2320      	movs	r3, #32
 8007486:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 800748a:	e7cc      	b.n	8007426 <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800748c:	2208      	movs	r2, #8
 800748e:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007490:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007494:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007498:	e843 2100 	strex	r1, r2, [r3]
 800749c:	2900      	cmp	r1, #0
 800749e:	d1f7      	bne.n	8007490 <UART_CheckIdleState+0xe8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80074a0:	4856      	ldr	r0, [pc, #344]	@ (80075fc <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a2:	f103 0208 	add.w	r2, r3, #8
 80074a6:	e852 2f00 	ldrex	r2, [r2]
 80074aa:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ac:	f103 0508 	add.w	r5, r3, #8
 80074b0:	e845 2100 	strex	r1, r2, [r5]
 80074b4:	2900      	cmp	r1, #0
 80074b6:	d1f4      	bne.n	80074a2 <UART_CheckIdleState+0xfa>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074b8:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80074ba:	2a01      	cmp	r2, #1
 80074bc:	d00b      	beq.n	80074d6 <UART_CheckIdleState+0x12e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074be:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80074c0:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80074c2:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80074c4:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 80074c8:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ca:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 80074cc:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80074d0:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 80074d4:	e79c      	b.n	8007410 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d6:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074da:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074de:	e843 2100 	strex	r1, r2, [r3]
 80074e2:	2900      	cmp	r1, #0
 80074e4:	d1f7      	bne.n	80074d6 <UART_CheckIdleState+0x12e>
 80074e6:	e7ea      	b.n	80074be <UART_CheckIdleState+0x116>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80074ec:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ee:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074f2:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f6:	e843 2100 	strex	r1, r2, [r3]
 80074fa:	2900      	cmp	r1, #0
 80074fc:	d1f7      	bne.n	80074ee <UART_CheckIdleState+0x146>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80074fe:	483f      	ldr	r0, [pc, #252]	@ (80075fc <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007500:	f103 0208 	add.w	r2, r3, #8
 8007504:	e852 2f00 	ldrex	r2, [r2]
 8007508:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750a:	f103 0508 	add.w	r5, r3, #8
 800750e:	e845 2100 	strex	r1, r2, [r5]
 8007512:	2900      	cmp	r1, #0
 8007514:	d1f4      	bne.n	8007500 <UART_CheckIdleState+0x158>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007516:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8007518:	2a01      	cmp	r2, #1
 800751a:	d00a      	beq.n	8007532 <UART_CheckIdleState+0x18a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800751c:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800751e:	2120      	movs	r1, #32
 8007520:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8007524:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007526:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8007528:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800752c:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8007530:	e76e      	b.n	8007410 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007532:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007536:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753a:	e843 2100 	strex	r1, r2, [r3]
 800753e:	2900      	cmp	r1, #0
 8007540:	d1f7      	bne.n	8007532 <UART_CheckIdleState+0x18a>
 8007542:	e7eb      	b.n	800751c <UART_CheckIdleState+0x174>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007544:	2208      	movs	r2, #8
 8007546:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007548:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800754c:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007550:	e843 2100 	strex	r1, r2, [r3]
 8007554:	2900      	cmp	r1, #0
 8007556:	d1f7      	bne.n	8007548 <UART_CheckIdleState+0x1a0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007558:	4828      	ldr	r0, [pc, #160]	@ (80075fc <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755a:	f103 0208 	add.w	r2, r3, #8
 800755e:	e852 2f00 	ldrex	r2, [r2]
 8007562:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007564:	f103 0508 	add.w	r5, r3, #8
 8007568:	e845 2100 	strex	r1, r2, [r5]
 800756c:	2900      	cmp	r1, #0
 800756e:	d1f4      	bne.n	800755a <UART_CheckIdleState+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007570:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8007572:	2a01      	cmp	r2, #1
 8007574:	d00b      	beq.n	800758e <UART_CheckIdleState+0x1e6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007576:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007578:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800757a:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800757c:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8007580:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007582:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8007584:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007588:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 800758c:	e766      	b.n	800745c <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007592:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007596:	e843 2100 	strex	r1, r2, [r3]
 800759a:	2900      	cmp	r1, #0
 800759c:	d1f7      	bne.n	800758e <UART_CheckIdleState+0x1e6>
 800759e:	e7ea      	b.n	8007576 <UART_CheckIdleState+0x1ce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80075a4:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a6:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075aa:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ae:	e843 2100 	strex	r1, r2, [r3]
 80075b2:	2900      	cmp	r1, #0
 80075b4:	d1f7      	bne.n	80075a6 <UART_CheckIdleState+0x1fe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075b6:	4811      	ldr	r0, [pc, #68]	@ (80075fc <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b8:	f103 0208 	add.w	r2, r3, #8
 80075bc:	e852 2f00 	ldrex	r2, [r2]
 80075c0:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c2:	f103 0508 	add.w	r5, r3, #8
 80075c6:	e845 2100 	strex	r1, r2, [r5]
 80075ca:	2900      	cmp	r1, #0
 80075cc:	d1f4      	bne.n	80075b8 <UART_CheckIdleState+0x210>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075ce:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80075d0:	2a01      	cmp	r2, #1
 80075d2:	d00a      	beq.n	80075ea <UART_CheckIdleState+0x242>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d4:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80075d6:	2120      	movs	r1, #32
 80075d8:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 80075dc:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075de:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 80075e0:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075e4:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 80075e8:	e738      	b.n	800745c <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ea:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075ee:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f2:	e843 2100 	strex	r1, r2, [r3]
 80075f6:	2900      	cmp	r1, #0
 80075f8:	d1f7      	bne.n	80075ea <UART_CheckIdleState+0x242>
 80075fa:	e7eb      	b.n	80075d4 <UART_CheckIdleState+0x22c>
 80075fc:	effffffe 	.word	0xeffffffe

08007600 <HAL_UART_Init>:
  if (huart == NULL)
 8007600:	b380      	cbz	r0, 8007664 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8007602:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 8007606:	b510      	push	{r4, lr}
 8007608:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800760a:	b333      	cbz	r3, 800765a <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 800760c:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800760e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  huart->gState = HAL_UART_STATE_BUSY;
 8007610:	2324      	movs	r3, #36	@ 0x24
 8007612:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8007616:	6813      	ldr	r3, [r2, #0]
 8007618:	f023 0301 	bic.w	r3, r3, #1
 800761c:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800761e:	b9c1      	cbnz	r1, 8007652 <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007620:	4620      	mov	r0, r4
 8007622:	f7ff fd07 	bl	8007034 <UART_SetConfig>
 8007626:	2801      	cmp	r0, #1
 8007628:	d011      	beq.n	800764e <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800762a:	6823      	ldr	r3, [r4, #0]
 800762c:	685a      	ldr	r2, [r3, #4]
 800762e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007632:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007634:	689a      	ldr	r2, [r3, #8]
 8007636:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800763a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8007642:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8007644:	601a      	str	r2, [r3, #0]
}
 8007646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800764a:	f7ff bead 	b.w	80073a8 <UART_CheckIdleState>
}
 800764e:	2001      	movs	r0, #1
 8007650:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8007652:	4620      	mov	r0, r4
 8007654:	f7ff fe50 	bl	80072f8 <UART_AdvFeatureConfig>
 8007658:	e7e2      	b.n	8007620 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 800765a:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 800765e:	f7fa f907 	bl	8001870 <HAL_UART_MspInit>
 8007662:	e7d3      	b.n	800760c <HAL_UART_Init+0xc>
}
 8007664:	2001      	movs	r0, #1
 8007666:	4770      	bx	lr

08007668 <UART_Start_Receive_DMA>:
{
 8007668:	b538      	push	{r3, r4, r5, lr}
 800766a:	4605      	mov	r5, r0
 800766c:	4613      	mov	r3, r2
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800766e:	2022      	movs	r0, #34	@ 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007670:	2200      	movs	r2, #0
 8007672:	f8c5 2090 	str.w	r2, [r5, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007676:	f8c5 008c 	str.w	r0, [r5, #140]	@ 0x8c
  if (huart->hdmarx != NULL)
 800767a:	f8d5 0080 	ldr.w	r0, [r5, #128]	@ 0x80
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800767e:	682c      	ldr	r4, [r5, #0]
  huart->pRxBuffPtr = pData;
 8007680:	65a9      	str	r1, [r5, #88]	@ 0x58
  huart->RxXferSize = Size;
 8007682:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
  if (huart->hdmarx != NULL)
 8007686:	b168      	cbz	r0, 80076a4 <UART_Start_Receive_DMA+0x3c>
    huart->hdmarx->XferAbortCallback = NULL;
 8007688:	6382      	str	r2, [r0, #56]	@ 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800768a:	460a      	mov	r2, r1
 800768c:	f104 0124 	add.w	r1, r4, #36	@ 0x24
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007690:	4c1a      	ldr	r4, [pc, #104]	@ (80076fc <UART_Start_Receive_DMA+0x94>)
 8007692:	62c4      	str	r4, [r0, #44]	@ 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007694:	4c1a      	ldr	r4, [pc, #104]	@ (8007700 <UART_Start_Receive_DMA+0x98>)
 8007696:	6304      	str	r4, [r0, #48]	@ 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007698:	4c1a      	ldr	r4, [pc, #104]	@ (8007704 <UART_Start_Receive_DMA+0x9c>)
 800769a:	6344      	str	r4, [r0, #52]	@ 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800769c:	f7fc fa74 	bl	8003b88 <HAL_DMA_Start_IT>
 80076a0:	bb18      	cbnz	r0, 80076ea <UART_Start_Receive_DMA+0x82>
 80076a2:	682c      	ldr	r4, [r5, #0]
  if (huart->Init.Parity != UART_PARITY_NONE)
 80076a4:	692b      	ldr	r3, [r5, #16]
 80076a6:	b13b      	cbz	r3, 80076b8 <UART_Start_Receive_DMA+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a8:	e854 3f00 	ldrex	r3, [r4]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b0:	e844 3200 	strex	r2, r3, [r4]
 80076b4:	2a00      	cmp	r2, #0
 80076b6:	d1f7      	bne.n	80076a8 <UART_Start_Receive_DMA+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b8:	f104 0308 	add.w	r3, r4, #8
 80076bc:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076c0:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c4:	f104 0108 	add.w	r1, r4, #8
 80076c8:	e841 3200 	strex	r2, r3, [r1]
 80076cc:	2a00      	cmp	r2, #0
 80076ce:	d1f3      	bne.n	80076b8 <UART_Start_Receive_DMA+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d0:	f104 0308 	add.w	r3, r4, #8
 80076d4:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076dc:	f104 0208 	add.w	r2, r4, #8
 80076e0:	e842 3000 	strex	r0, r3, [r2]
 80076e4:	2800      	cmp	r0, #0
 80076e6:	d1f3      	bne.n	80076d0 <UART_Start_Receive_DMA+0x68>
}
 80076e8:	bd38      	pop	{r3, r4, r5, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80076ea:	2210      	movs	r2, #16
      huart->RxState = HAL_UART_STATE_READY;
 80076ec:	2320      	movs	r3, #32
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80076ee:	f8c5 2090 	str.w	r2, [r5, #144]	@ 0x90
      return HAL_ERROR;
 80076f2:	2001      	movs	r0, #1
      huart->RxState = HAL_UART_STATE_READY;
 80076f4:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
}
 80076f8:	bd38      	pop	{r3, r4, r5, pc}
 80076fa:	bf00      	nop
 80076fc:	08006f99 	.word	0x08006f99
 8007700:	08006f79 	.word	0x08006f79
 8007704:	08006b01 	.word	0x08006b01

08007708 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop

0800770c <HAL_UARTEx_RxFifoFullCallback>:
/**
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop

08007710 <HAL_UARTEx_TxFifoEmptyCallback>:
/**
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop

08007714 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007714:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8007718:	2b01      	cmp	r3, #1
 800771a:	d017      	beq.n	800774c <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800771c:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800771e:	2324      	movs	r3, #36	@ 0x24
{
 8007720:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 8007722:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007726:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007728:	6814      	ldr	r4, [r2, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800772a:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 800772c:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007730:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 8007734:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007736:	6643      	str	r3, [r0, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007738:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800773a:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 800773e:	2220      	movs	r2, #32
 8007740:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88

  return HAL_OK;
}
 8007744:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8007748:	4618      	mov	r0, r3
}
 800774a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800774c:	2002      	movs	r0, #2
}
 800774e:	4770      	bx	lr

08007750 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007750:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8007754:	2a01      	cmp	r2, #1
 8007756:	d037      	beq.n	80077c8 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 8007758:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800775a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800775c:	2024      	movs	r0, #36	@ 0x24
{
 800775e:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8007760:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007764:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007766:	6810      	ldr	r0, [r2, #0]
 8007768:	f020 0001 	bic.w	r0, r0, #1
 800776c:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800776e:	6890      	ldr	r0, [r2, #8]
 8007770:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 8007774:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007776:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007778:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800777a:	b310      	cbz	r0, 80077c2 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800777c:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800777e:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 8007780:	4d12      	ldr	r5, [pc, #72]	@ (80077cc <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007782:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007786:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800778a:	4911      	ldr	r1, [pc, #68]	@ (80077d0 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 800778c:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007790:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007794:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8007798:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800779c:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800779e:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077a0:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077a4:	fbb1 f1f5 	udiv	r1, r1, r5
 80077a8:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 80077ac:	2100      	movs	r1, #0
 80077ae:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 80077b2:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077b4:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80077b6:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 80077ba:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80077bc:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 80077c0:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 80077c2:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80077c4:	4608      	mov	r0, r1
 80077c6:	e7ef      	b.n	80077a8 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 80077c8:	2002      	movs	r0, #2
}
 80077ca:	4770      	bx	lr
 80077cc:	08007eb0 	.word	0x08007eb0
 80077d0:	08007eb8 	.word	0x08007eb8

080077d4 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 80077d4:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 80077d8:	2a01      	cmp	r2, #1
 80077da:	d037      	beq.n	800784c <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 80077dc:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077de:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80077e0:	2024      	movs	r0, #36	@ 0x24
{
 80077e2:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80077e4:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077e8:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80077ea:	6810      	ldr	r0, [r2, #0]
 80077ec:	f020 0001 	bic.w	r0, r0, #1
 80077f0:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80077f2:	6890      	ldr	r0, [r2, #8]
 80077f4:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 80077f8:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80077fa:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80077fc:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80077fe:	b310      	cbz	r0, 8007846 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007800:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007802:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007804:	4d12      	ldr	r5, [pc, #72]	@ (8007850 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007806:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800780a:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800780e:	4911      	ldr	r1, [pc, #68]	@ (8007854 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007810:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007814:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007818:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800781c:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007820:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007822:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007824:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007828:	fbb1 f1f5 	udiv	r1, r1, r5
 800782c:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8007830:	2100      	movs	r1, #0
 8007832:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8007836:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007838:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800783a:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 800783e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8007840:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 8007844:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8007846:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8007848:	4608      	mov	r0, r1
 800784a:	e7ef      	b.n	800782c <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800784c:	2002      	movs	r0, #2
}
 800784e:	4770      	bx	lr
 8007850:	08007eb0 	.word	0x08007eb0
 8007854:	08007eb8 	.word	0x08007eb8

08007858 <HAL_UARTEx_ReceiveToIdle_DMA>:
{
 8007858:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800785a:	f8d0 608c 	ldr.w	r6, [r0, #140]	@ 0x8c
 800785e:	2e20      	cmp	r6, #32
 8007860:	d103      	bne.n	800786a <HAL_UARTEx_ReceiveToIdle_DMA+0x12>
    if ((pData == NULL) || (Size == 0U))
 8007862:	b101      	cbz	r1, 8007866 <HAL_UARTEx_ReceiveToIdle_DMA+0xe>
 8007864:	b91a      	cbnz	r2, 800786e <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
      return HAL_ERROR;
 8007866:	2001      	movs	r0, #1
}
 8007868:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800786a:	2002      	movs	r0, #2
}
 800786c:	bd70      	pop	{r4, r5, r6, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800786e:	2301      	movs	r3, #1
 8007870:	66c3      	str	r3, [r0, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007872:	2300      	movs	r3, #0
 8007874:	6703      	str	r3, [r0, #112]	@ 0x70
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007876:	4604      	mov	r4, r0
 8007878:	f7ff fef6 	bl	8007668 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 800787c:	2800      	cmp	r0, #0
 800787e:	d1f3      	bne.n	8007868 <HAL_UARTEx_ReceiveToIdle_DMA+0x10>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007880:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8007882:	2b01      	cmp	r3, #1
 8007884:	d1ef      	bne.n	8007866 <HAL_UARTEx_ReceiveToIdle_DMA+0xe>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007886:	6822      	ldr	r2, [r4, #0]
 8007888:	2310      	movs	r3, #16
 800788a:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788c:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007890:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007894:	e842 3100 	strex	r1, r3, [r2]
 8007898:	2900      	cmp	r1, #0
 800789a:	d1f7      	bne.n	800788c <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
}
 800789c:	bd70      	pop	{r4, r5, r6, pc}
 800789e:	bf00      	nop

080078a0 <_ZdlPvj>:
 80078a0:	f000 b8fa 	b.w	8007a98 <_ZdlPv>

080078a4 <_Znwj>:
 80078a4:	2801      	cmp	r0, #1
 80078a6:	bf38      	it	cc
 80078a8:	2001      	movcc	r0, #1
 80078aa:	b510      	push	{r4, lr}
 80078ac:	4604      	mov	r4, r0
 80078ae:	4620      	mov	r0, r4
 80078b0:	f000 f904 	bl	8007abc <malloc>
 80078b4:	b100      	cbz	r0, 80078b8 <_Znwj+0x14>
 80078b6:	bd10      	pop	{r4, pc}
 80078b8:	f000 f8f0 	bl	8007a9c <_ZSt15get_new_handlerv>
 80078bc:	b908      	cbnz	r0, 80078c2 <_Znwj+0x1e>
 80078be:	f000 f8f5 	bl	8007aac <abort>
 80078c2:	4780      	blx	r0
 80078c4:	e7f3      	b.n	80078ae <_Znwj+0xa>

080078c6 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 80078c6:	68c3      	ldr	r3, [r0, #12]
 80078c8:	689a      	ldr	r2, [r3, #8]
 80078ca:	60c2      	str	r2, [r0, #12]
 80078cc:	b510      	push	{r4, lr}
 80078ce:	b102      	cbz	r2, 80078d2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 80078d0:	6050      	str	r0, [r2, #4]
 80078d2:	6842      	ldr	r2, [r0, #4]
 80078d4:	605a      	str	r2, [r3, #4]
 80078d6:	680c      	ldr	r4, [r1, #0]
 80078d8:	4284      	cmp	r4, r0
 80078da:	d103      	bne.n	80078e4 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 80078dc:	600b      	str	r3, [r1, #0]
 80078de:	6098      	str	r0, [r3, #8]
 80078e0:	6043      	str	r3, [r0, #4]
 80078e2:	bd10      	pop	{r4, pc}
 80078e4:	6891      	ldr	r1, [r2, #8]
 80078e6:	4281      	cmp	r1, r0
 80078e8:	bf0c      	ite	eq
 80078ea:	6093      	streq	r3, [r2, #8]
 80078ec:	60d3      	strne	r3, [r2, #12]
 80078ee:	e7f6      	b.n	80078de <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

080078f0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 80078f0:	6883      	ldr	r3, [r0, #8]
 80078f2:	68da      	ldr	r2, [r3, #12]
 80078f4:	6082      	str	r2, [r0, #8]
 80078f6:	b510      	push	{r4, lr}
 80078f8:	b102      	cbz	r2, 80078fc <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 80078fa:	6050      	str	r0, [r2, #4]
 80078fc:	6842      	ldr	r2, [r0, #4]
 80078fe:	605a      	str	r2, [r3, #4]
 8007900:	680c      	ldr	r4, [r1, #0]
 8007902:	4284      	cmp	r4, r0
 8007904:	d103      	bne.n	800790e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8007906:	600b      	str	r3, [r1, #0]
 8007908:	60d8      	str	r0, [r3, #12]
 800790a:	6043      	str	r3, [r0, #4]
 800790c:	bd10      	pop	{r4, pc}
 800790e:	68d1      	ldr	r1, [r2, #12]
 8007910:	4281      	cmp	r1, r0
 8007912:	bf0c      	ite	eq
 8007914:	60d3      	streq	r3, [r2, #12]
 8007916:	6093      	strne	r3, [r2, #8]
 8007918:	e7f6      	b.n	8007908 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

0800791a <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 800791a:	68c3      	ldr	r3, [r0, #12]
 800791c:	b123      	cbz	r3, 8007928 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 800791e:	4618      	mov	r0, r3
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1fb      	bne.n	800791e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 8007926:	4770      	bx	lr
 8007928:	6843      	ldr	r3, [r0, #4]
 800792a:	68da      	ldr	r2, [r3, #12]
 800792c:	4282      	cmp	r2, r0
 800792e:	d004      	beq.n	800793a <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x20>
 8007930:	68c2      	ldr	r2, [r0, #12]
 8007932:	4293      	cmp	r3, r2
 8007934:	bf18      	it	ne
 8007936:	4618      	movne	r0, r3
 8007938:	4770      	bx	lr
 800793a:	4618      	mov	r0, r3
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	e7f4      	b.n	800792a <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>

08007940 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8007940:	7802      	ldrb	r2, [r0, #0]
 8007942:	4603      	mov	r3, r0
 8007944:	b92a      	cbnz	r2, 8007952 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8007946:	6842      	ldr	r2, [r0, #4]
 8007948:	6852      	ldr	r2, [r2, #4]
 800794a:	4282      	cmp	r2, r0
 800794c:	d101      	bne.n	8007952 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 800794e:	68d0      	ldr	r0, [r2, #12]
 8007950:	4770      	bx	lr
 8007952:	689a      	ldr	r2, [r3, #8]
 8007954:	b122      	cbz	r2, 8007960 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8007956:	4610      	mov	r0, r2
 8007958:	68d2      	ldr	r2, [r2, #12]
 800795a:	2a00      	cmp	r2, #0
 800795c:	d1fb      	bne.n	8007956 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 800795e:	4770      	bx	lr
 8007960:	6858      	ldr	r0, [r3, #4]
 8007962:	6882      	ldr	r2, [r0, #8]
 8007964:	429a      	cmp	r2, r3
 8007966:	d000      	beq.n	800796a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 8007968:	4770      	bx	lr
 800796a:	4603      	mov	r3, r0
 800796c:	6840      	ldr	r0, [r0, #4]
 800796e:	e7f8      	b.n	8007962 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

08007970 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8007970:	f7ff bfd3 	b.w	800791a <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

08007974 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8007974:	f7ff bfe4 	b.w	8007940 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08007978 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8007978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800797c:	461d      	mov	r5, r3
 800797e:	1d1f      	adds	r7, r3, #4
 8007980:	2300      	movs	r3, #0
 8007982:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8007986:	460c      	mov	r4, r1
 8007988:	604a      	str	r2, [r1, #4]
 800798a:	700b      	strb	r3, [r1, #0]
 800798c:	b1a0      	cbz	r0, 80079b8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
 800798e:	4295      	cmp	r5, r2
 8007990:	6091      	str	r1, [r2, #8]
 8007992:	d102      	bne.n	800799a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8007994:	6069      	str	r1, [r5, #4]
 8007996:	60ec      	str	r4, [r5, #12]
 8007998:	e003      	b.n	80079a2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 800799a:	68ab      	ldr	r3, [r5, #8]
 800799c:	4293      	cmp	r3, r2
 800799e:	bf08      	it	eq
 80079a0:	60a9      	streq	r1, [r5, #8]
 80079a2:	f04f 0900 	mov.w	r9, #0
 80079a6:	f04f 0801 	mov.w	r8, #1
 80079aa:	686b      	ldr	r3, [r5, #4]
 80079ac:	42a3      	cmp	r3, r4
 80079ae:	d132      	bne.n	8007a16 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9e>
 80079b0:	2201      	movs	r2, #1
 80079b2:	701a      	strb	r2, [r3, #0]
 80079b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079b8:	60d1      	str	r1, [r2, #12]
 80079ba:	68eb      	ldr	r3, [r5, #12]
 80079bc:	4293      	cmp	r3, r2
 80079be:	d1f0      	bne.n	80079a2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 80079c0:	e7e9      	b.n	8007996 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x1e>
 80079c2:	68c3      	ldr	r3, [r0, #12]
 80079c4:	42a3      	cmp	r3, r4
 80079c6:	d103      	bne.n	80079d0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
 80079c8:	4639      	mov	r1, r7
 80079ca:	f7ff ff7c 	bl	80078c6 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 80079ce:	4604      	mov	r4, r0
 80079d0:	6863      	ldr	r3, [r4, #4]
 80079d2:	4639      	mov	r1, r7
 80079d4:	f883 8000 	strb.w	r8, [r3]
 80079d8:	4630      	mov	r0, r6
 80079da:	f886 9000 	strb.w	r9, [r6]
 80079de:	f7ff ff87 	bl	80078f0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80079e2:	e7e2      	b.n	80079aa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 80079e4:	b133      	cbz	r3, 80079f4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 80079e6:	781a      	ldrb	r2, [r3, #0]
 80079e8:	b922      	cbnz	r2, 80079f4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 80079ea:	f880 8000 	strb.w	r8, [r0]
 80079ee:	f883 8000 	strb.w	r8, [r3]
 80079f2:	e021      	b.n	8007a38 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xc0>
 80079f4:	6883      	ldr	r3, [r0, #8]
 80079f6:	42a3      	cmp	r3, r4
 80079f8:	d103      	bne.n	8007a02 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8a>
 80079fa:	4639      	mov	r1, r7
 80079fc:	f7ff ff78 	bl	80078f0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8007a00:	4604      	mov	r4, r0
 8007a02:	6863      	ldr	r3, [r4, #4]
 8007a04:	4639      	mov	r1, r7
 8007a06:	f883 8000 	strb.w	r8, [r3]
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	f886 9000 	strb.w	r9, [r6]
 8007a10:	f7ff ff59 	bl	80078c6 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8007a14:	e7c9      	b.n	80079aa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 8007a16:	6860      	ldr	r0, [r4, #4]
 8007a18:	7802      	ldrb	r2, [r0, #0]
 8007a1a:	2a00      	cmp	r2, #0
 8007a1c:	d1c8      	bne.n	80079b0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x38>
 8007a1e:	6846      	ldr	r6, [r0, #4]
 8007a20:	68b3      	ldr	r3, [r6, #8]
 8007a22:	4283      	cmp	r3, r0
 8007a24:	d1de      	bne.n	80079e4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
 8007a26:	68f2      	ldr	r2, [r6, #12]
 8007a28:	2a00      	cmp	r2, #0
 8007a2a:	d0ca      	beq.n	80079c2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 8007a2c:	7811      	ldrb	r1, [r2, #0]
 8007a2e:	2900      	cmp	r1, #0
 8007a30:	d1c7      	bne.n	80079c2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 8007a32:	2101      	movs	r1, #1
 8007a34:	7019      	strb	r1, [r3, #0]
 8007a36:	7011      	strb	r1, [r2, #0]
 8007a38:	f886 9000 	strb.w	r9, [r6]
 8007a3c:	4634      	mov	r4, r6
 8007a3e:	e7b4      	b.n	80079aa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>

08007a40 <_ZSt17__throw_bad_allocv>:
 8007a40:	b508      	push	{r3, lr}
 8007a42:	f000 f833 	bl	8007aac <abort>

08007a46 <_ZSt19__throw_logic_errorPKc>:
 8007a46:	b508      	push	{r3, lr}
 8007a48:	f000 f830 	bl	8007aac <abort>

08007a4c <_ZSt20__throw_length_errorPKc>:
 8007a4c:	b508      	push	{r3, lr}
 8007a4e:	f000 f82d 	bl	8007aac <abort>
	...

08007a54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8007a54:	b508      	push	{r3, lr}
 8007a56:	680b      	ldr	r3, [r1, #0]
 8007a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a5c:	d302      	bcc.n	8007a64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8007a5e:	480d      	ldr	r0, [pc, #52]	@ (8007a94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8007a60:	f7ff fff4 	bl	8007a4c <_ZSt20__throw_length_errorPKc>
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d90b      	bls.n	8007a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8007a68:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8007a6c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8007a70:	d206      	bcs.n	8007a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8007a72:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8007a76:	bf2a      	itet	cs
 8007a78:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8007a7c:	6008      	strcc	r0, [r1, #0]
 8007a7e:	600b      	strcs	r3, [r1, #0]
 8007a80:	6808      	ldr	r0, [r1, #0]
 8007a82:	3001      	adds	r0, #1
 8007a84:	d501      	bpl.n	8007a8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8007a86:	f7ff ffdb 	bl	8007a40 <_ZSt17__throw_bad_allocv>
 8007a8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007a8e:	f7ff bf09 	b.w	80078a4 <_Znwj>
 8007a92:	bf00      	nop
 8007a94:	08007ec0 	.word	0x08007ec0

08007a98 <_ZdlPv>:
 8007a98:	f000 b818 	b.w	8007acc <free>

08007a9c <_ZSt15get_new_handlerv>:
 8007a9c:	4b02      	ldr	r3, [pc, #8]	@ (8007aa8 <_ZSt15get_new_handlerv+0xc>)
 8007a9e:	6818      	ldr	r0, [r3, #0]
 8007aa0:	f3bf 8f5b 	dmb	ish
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	20000edc 	.word	0x20000edc

08007aac <abort>:
 8007aac:	b508      	push	{r3, lr}
 8007aae:	2006      	movs	r0, #6
 8007ab0:	f000 f902 	bl	8007cb8 <raise>
 8007ab4:	2001      	movs	r0, #1
 8007ab6:	f7f9 ff7b 	bl	80019b0 <_exit>
	...

08007abc <malloc>:
 8007abc:	4b02      	ldr	r3, [pc, #8]	@ (8007ac8 <malloc+0xc>)
 8007abe:	4601      	mov	r1, r0
 8007ac0:	6818      	ldr	r0, [r3, #0]
 8007ac2:	f000 b82d 	b.w	8007b20 <_malloc_r>
 8007ac6:	bf00      	nop
 8007ac8:	2000001c 	.word	0x2000001c

08007acc <free>:
 8007acc:	4b02      	ldr	r3, [pc, #8]	@ (8007ad8 <free+0xc>)
 8007ace:	4601      	mov	r1, r0
 8007ad0:	6818      	ldr	r0, [r3, #0]
 8007ad2:	f000 b957 	b.w	8007d84 <_free_r>
 8007ad6:	bf00      	nop
 8007ad8:	2000001c 	.word	0x2000001c

08007adc <sbrk_aligned>:
 8007adc:	b570      	push	{r4, r5, r6, lr}
 8007ade:	4e0f      	ldr	r6, [pc, #60]	@ (8007b1c <sbrk_aligned+0x40>)
 8007ae0:	460c      	mov	r4, r1
 8007ae2:	6831      	ldr	r1, [r6, #0]
 8007ae4:	4605      	mov	r5, r0
 8007ae6:	b911      	cbnz	r1, 8007aee <sbrk_aligned+0x12>
 8007ae8:	f000 f902 	bl	8007cf0 <_sbrk_r>
 8007aec:	6030      	str	r0, [r6, #0]
 8007aee:	4621      	mov	r1, r4
 8007af0:	4628      	mov	r0, r5
 8007af2:	f000 f8fd 	bl	8007cf0 <_sbrk_r>
 8007af6:	1c43      	adds	r3, r0, #1
 8007af8:	d103      	bne.n	8007b02 <sbrk_aligned+0x26>
 8007afa:	f04f 34ff 	mov.w	r4, #4294967295
 8007afe:	4620      	mov	r0, r4
 8007b00:	bd70      	pop	{r4, r5, r6, pc}
 8007b02:	1cc4      	adds	r4, r0, #3
 8007b04:	f024 0403 	bic.w	r4, r4, #3
 8007b08:	42a0      	cmp	r0, r4
 8007b0a:	d0f8      	beq.n	8007afe <sbrk_aligned+0x22>
 8007b0c:	1a21      	subs	r1, r4, r0
 8007b0e:	4628      	mov	r0, r5
 8007b10:	f000 f8ee 	bl	8007cf0 <_sbrk_r>
 8007b14:	3001      	adds	r0, #1
 8007b16:	d1f2      	bne.n	8007afe <sbrk_aligned+0x22>
 8007b18:	e7ef      	b.n	8007afa <sbrk_aligned+0x1e>
 8007b1a:	bf00      	nop
 8007b1c:	20000ee0 	.word	0x20000ee0

08007b20 <_malloc_r>:
 8007b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b24:	1ccd      	adds	r5, r1, #3
 8007b26:	f025 0503 	bic.w	r5, r5, #3
 8007b2a:	3508      	adds	r5, #8
 8007b2c:	2d0c      	cmp	r5, #12
 8007b2e:	bf38      	it	cc
 8007b30:	250c      	movcc	r5, #12
 8007b32:	2d00      	cmp	r5, #0
 8007b34:	4606      	mov	r6, r0
 8007b36:	db01      	blt.n	8007b3c <_malloc_r+0x1c>
 8007b38:	42a9      	cmp	r1, r5
 8007b3a:	d904      	bls.n	8007b46 <_malloc_r+0x26>
 8007b3c:	230c      	movs	r3, #12
 8007b3e:	6033      	str	r3, [r6, #0]
 8007b40:	2000      	movs	r0, #0
 8007b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c1c <_malloc_r+0xfc>
 8007b4a:	f000 f869 	bl	8007c20 <__malloc_lock>
 8007b4e:	f8d8 3000 	ldr.w	r3, [r8]
 8007b52:	461c      	mov	r4, r3
 8007b54:	bb44      	cbnz	r4, 8007ba8 <_malloc_r+0x88>
 8007b56:	4629      	mov	r1, r5
 8007b58:	4630      	mov	r0, r6
 8007b5a:	f7ff ffbf 	bl	8007adc <sbrk_aligned>
 8007b5e:	1c43      	adds	r3, r0, #1
 8007b60:	4604      	mov	r4, r0
 8007b62:	d158      	bne.n	8007c16 <_malloc_r+0xf6>
 8007b64:	f8d8 4000 	ldr.w	r4, [r8]
 8007b68:	4627      	mov	r7, r4
 8007b6a:	2f00      	cmp	r7, #0
 8007b6c:	d143      	bne.n	8007bf6 <_malloc_r+0xd6>
 8007b6e:	2c00      	cmp	r4, #0
 8007b70:	d04b      	beq.n	8007c0a <_malloc_r+0xea>
 8007b72:	6823      	ldr	r3, [r4, #0]
 8007b74:	4639      	mov	r1, r7
 8007b76:	4630      	mov	r0, r6
 8007b78:	eb04 0903 	add.w	r9, r4, r3
 8007b7c:	f000 f8b8 	bl	8007cf0 <_sbrk_r>
 8007b80:	4581      	cmp	r9, r0
 8007b82:	d142      	bne.n	8007c0a <_malloc_r+0xea>
 8007b84:	6821      	ldr	r1, [r4, #0]
 8007b86:	1a6d      	subs	r5, r5, r1
 8007b88:	4629      	mov	r1, r5
 8007b8a:	4630      	mov	r0, r6
 8007b8c:	f7ff ffa6 	bl	8007adc <sbrk_aligned>
 8007b90:	3001      	adds	r0, #1
 8007b92:	d03a      	beq.n	8007c0a <_malloc_r+0xea>
 8007b94:	6823      	ldr	r3, [r4, #0]
 8007b96:	442b      	add	r3, r5
 8007b98:	6023      	str	r3, [r4, #0]
 8007b9a:	f8d8 3000 	ldr.w	r3, [r8]
 8007b9e:	685a      	ldr	r2, [r3, #4]
 8007ba0:	bb62      	cbnz	r2, 8007bfc <_malloc_r+0xdc>
 8007ba2:	f8c8 7000 	str.w	r7, [r8]
 8007ba6:	e00f      	b.n	8007bc8 <_malloc_r+0xa8>
 8007ba8:	6822      	ldr	r2, [r4, #0]
 8007baa:	1b52      	subs	r2, r2, r5
 8007bac:	d420      	bmi.n	8007bf0 <_malloc_r+0xd0>
 8007bae:	2a0b      	cmp	r2, #11
 8007bb0:	d917      	bls.n	8007be2 <_malloc_r+0xc2>
 8007bb2:	1961      	adds	r1, r4, r5
 8007bb4:	42a3      	cmp	r3, r4
 8007bb6:	6025      	str	r5, [r4, #0]
 8007bb8:	bf18      	it	ne
 8007bba:	6059      	strne	r1, [r3, #4]
 8007bbc:	6863      	ldr	r3, [r4, #4]
 8007bbe:	bf08      	it	eq
 8007bc0:	f8c8 1000 	streq.w	r1, [r8]
 8007bc4:	5162      	str	r2, [r4, r5]
 8007bc6:	604b      	str	r3, [r1, #4]
 8007bc8:	4630      	mov	r0, r6
 8007bca:	f000 f82f 	bl	8007c2c <__malloc_unlock>
 8007bce:	f104 000b 	add.w	r0, r4, #11
 8007bd2:	1d23      	adds	r3, r4, #4
 8007bd4:	f020 0007 	bic.w	r0, r0, #7
 8007bd8:	1ac2      	subs	r2, r0, r3
 8007bda:	bf1c      	itt	ne
 8007bdc:	1a1b      	subne	r3, r3, r0
 8007bde:	50a3      	strne	r3, [r4, r2]
 8007be0:	e7af      	b.n	8007b42 <_malloc_r+0x22>
 8007be2:	6862      	ldr	r2, [r4, #4]
 8007be4:	42a3      	cmp	r3, r4
 8007be6:	bf0c      	ite	eq
 8007be8:	f8c8 2000 	streq.w	r2, [r8]
 8007bec:	605a      	strne	r2, [r3, #4]
 8007bee:	e7eb      	b.n	8007bc8 <_malloc_r+0xa8>
 8007bf0:	4623      	mov	r3, r4
 8007bf2:	6864      	ldr	r4, [r4, #4]
 8007bf4:	e7ae      	b.n	8007b54 <_malloc_r+0x34>
 8007bf6:	463c      	mov	r4, r7
 8007bf8:	687f      	ldr	r7, [r7, #4]
 8007bfa:	e7b6      	b.n	8007b6a <_malloc_r+0x4a>
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	42a3      	cmp	r3, r4
 8007c02:	d1fb      	bne.n	8007bfc <_malloc_r+0xdc>
 8007c04:	2300      	movs	r3, #0
 8007c06:	6053      	str	r3, [r2, #4]
 8007c08:	e7de      	b.n	8007bc8 <_malloc_r+0xa8>
 8007c0a:	230c      	movs	r3, #12
 8007c0c:	6033      	str	r3, [r6, #0]
 8007c0e:	4630      	mov	r0, r6
 8007c10:	f000 f80c 	bl	8007c2c <__malloc_unlock>
 8007c14:	e794      	b.n	8007b40 <_malloc_r+0x20>
 8007c16:	6005      	str	r5, [r0, #0]
 8007c18:	e7d6      	b.n	8007bc8 <_malloc_r+0xa8>
 8007c1a:	bf00      	nop
 8007c1c:	20000ee4 	.word	0x20000ee4

08007c20 <__malloc_lock>:
 8007c20:	4801      	ldr	r0, [pc, #4]	@ (8007c28 <__malloc_lock+0x8>)
 8007c22:	f000 b89f 	b.w	8007d64 <__retarget_lock_acquire_recursive>
 8007c26:	bf00      	nop
 8007c28:	20001024 	.word	0x20001024

08007c2c <__malloc_unlock>:
 8007c2c:	4801      	ldr	r0, [pc, #4]	@ (8007c34 <__malloc_unlock+0x8>)
 8007c2e:	f000 b89a 	b.w	8007d66 <__retarget_lock_release_recursive>
 8007c32:	bf00      	nop
 8007c34:	20001024 	.word	0x20001024

08007c38 <memcmp>:
 8007c38:	b510      	push	{r4, lr}
 8007c3a:	3901      	subs	r1, #1
 8007c3c:	4402      	add	r2, r0
 8007c3e:	4290      	cmp	r0, r2
 8007c40:	d101      	bne.n	8007c46 <memcmp+0xe>
 8007c42:	2000      	movs	r0, #0
 8007c44:	e005      	b.n	8007c52 <memcmp+0x1a>
 8007c46:	7803      	ldrb	r3, [r0, #0]
 8007c48:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007c4c:	42a3      	cmp	r3, r4
 8007c4e:	d001      	beq.n	8007c54 <memcmp+0x1c>
 8007c50:	1b18      	subs	r0, r3, r4
 8007c52:	bd10      	pop	{r4, pc}
 8007c54:	3001      	adds	r0, #1
 8007c56:	e7f2      	b.n	8007c3e <memcmp+0x6>

08007c58 <memset>:
 8007c58:	4402      	add	r2, r0
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d100      	bne.n	8007c62 <memset+0xa>
 8007c60:	4770      	bx	lr
 8007c62:	f803 1b01 	strb.w	r1, [r3], #1
 8007c66:	e7f9      	b.n	8007c5c <memset+0x4>

08007c68 <_raise_r>:
 8007c68:	291f      	cmp	r1, #31
 8007c6a:	b538      	push	{r3, r4, r5, lr}
 8007c6c:	4605      	mov	r5, r0
 8007c6e:	460c      	mov	r4, r1
 8007c70:	d904      	bls.n	8007c7c <_raise_r+0x14>
 8007c72:	2316      	movs	r3, #22
 8007c74:	6003      	str	r3, [r0, #0]
 8007c76:	f04f 30ff 	mov.w	r0, #4294967295
 8007c7a:	bd38      	pop	{r3, r4, r5, pc}
 8007c7c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007c7e:	b112      	cbz	r2, 8007c86 <_raise_r+0x1e>
 8007c80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c84:	b94b      	cbnz	r3, 8007c9a <_raise_r+0x32>
 8007c86:	4628      	mov	r0, r5
 8007c88:	f000 f830 	bl	8007cec <_getpid_r>
 8007c8c:	4622      	mov	r2, r4
 8007c8e:	4601      	mov	r1, r0
 8007c90:	4628      	mov	r0, r5
 8007c92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c96:	f000 b817 	b.w	8007cc8 <_kill_r>
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d00a      	beq.n	8007cb4 <_raise_r+0x4c>
 8007c9e:	1c59      	adds	r1, r3, #1
 8007ca0:	d103      	bne.n	8007caa <_raise_r+0x42>
 8007ca2:	2316      	movs	r3, #22
 8007ca4:	6003      	str	r3, [r0, #0]
 8007ca6:	2001      	movs	r0, #1
 8007ca8:	e7e7      	b.n	8007c7a <_raise_r+0x12>
 8007caa:	2100      	movs	r1, #0
 8007cac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	4798      	blx	r3
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	e7e0      	b.n	8007c7a <_raise_r+0x12>

08007cb8 <raise>:
 8007cb8:	4b02      	ldr	r3, [pc, #8]	@ (8007cc4 <raise+0xc>)
 8007cba:	4601      	mov	r1, r0
 8007cbc:	6818      	ldr	r0, [r3, #0]
 8007cbe:	f7ff bfd3 	b.w	8007c68 <_raise_r>
 8007cc2:	bf00      	nop
 8007cc4:	2000001c 	.word	0x2000001c

08007cc8 <_kill_r>:
 8007cc8:	b538      	push	{r3, r4, r5, lr}
 8007cca:	4d07      	ldr	r5, [pc, #28]	@ (8007ce8 <_kill_r+0x20>)
 8007ccc:	2300      	movs	r3, #0
 8007cce:	4604      	mov	r4, r0
 8007cd0:	4608      	mov	r0, r1
 8007cd2:	4611      	mov	r1, r2
 8007cd4:	602b      	str	r3, [r5, #0]
 8007cd6:	f7f9 fe63 	bl	80019a0 <_kill>
 8007cda:	1c43      	adds	r3, r0, #1
 8007cdc:	d102      	bne.n	8007ce4 <_kill_r+0x1c>
 8007cde:	682b      	ldr	r3, [r5, #0]
 8007ce0:	b103      	cbz	r3, 8007ce4 <_kill_r+0x1c>
 8007ce2:	6023      	str	r3, [r4, #0]
 8007ce4:	bd38      	pop	{r3, r4, r5, pc}
 8007ce6:	bf00      	nop
 8007ce8:	20001020 	.word	0x20001020

08007cec <_getpid_r>:
 8007cec:	f7f9 be56 	b.w	800199c <_getpid>

08007cf0 <_sbrk_r>:
 8007cf0:	b538      	push	{r3, r4, r5, lr}
 8007cf2:	4d06      	ldr	r5, [pc, #24]	@ (8007d0c <_sbrk_r+0x1c>)
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	4604      	mov	r4, r0
 8007cf8:	4608      	mov	r0, r1
 8007cfa:	602b      	str	r3, [r5, #0]
 8007cfc:	f7f9 fe5e 	bl	80019bc <_sbrk>
 8007d00:	1c43      	adds	r3, r0, #1
 8007d02:	d102      	bne.n	8007d0a <_sbrk_r+0x1a>
 8007d04:	682b      	ldr	r3, [r5, #0]
 8007d06:	b103      	cbz	r3, 8007d0a <_sbrk_r+0x1a>
 8007d08:	6023      	str	r3, [r4, #0]
 8007d0a:	bd38      	pop	{r3, r4, r5, pc}
 8007d0c:	20001020 	.word	0x20001020

08007d10 <__errno>:
 8007d10:	4b01      	ldr	r3, [pc, #4]	@ (8007d18 <__errno+0x8>)
 8007d12:	6818      	ldr	r0, [r3, #0]
 8007d14:	4770      	bx	lr
 8007d16:	bf00      	nop
 8007d18:	2000001c 	.word	0x2000001c

08007d1c <__libc_init_array>:
 8007d1c:	b570      	push	{r4, r5, r6, lr}
 8007d1e:	4d0d      	ldr	r5, [pc, #52]	@ (8007d54 <__libc_init_array+0x38>)
 8007d20:	4c0d      	ldr	r4, [pc, #52]	@ (8007d58 <__libc_init_array+0x3c>)
 8007d22:	1b64      	subs	r4, r4, r5
 8007d24:	10a4      	asrs	r4, r4, #2
 8007d26:	2600      	movs	r6, #0
 8007d28:	42a6      	cmp	r6, r4
 8007d2a:	d109      	bne.n	8007d40 <__libc_init_array+0x24>
 8007d2c:	4d0b      	ldr	r5, [pc, #44]	@ (8007d5c <__libc_init_array+0x40>)
 8007d2e:	4c0c      	ldr	r4, [pc, #48]	@ (8007d60 <__libc_init_array+0x44>)
 8007d30:	f000 f872 	bl	8007e18 <_init>
 8007d34:	1b64      	subs	r4, r4, r5
 8007d36:	10a4      	asrs	r4, r4, #2
 8007d38:	2600      	movs	r6, #0
 8007d3a:	42a6      	cmp	r6, r4
 8007d3c:	d105      	bne.n	8007d4a <__libc_init_array+0x2e>
 8007d3e:	bd70      	pop	{r4, r5, r6, pc}
 8007d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d44:	4798      	blx	r3
 8007d46:	3601      	adds	r6, #1
 8007d48:	e7ee      	b.n	8007d28 <__libc_init_array+0xc>
 8007d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d4e:	4798      	blx	r3
 8007d50:	3601      	adds	r6, #1
 8007d52:	e7f2      	b.n	8007d3a <__libc_init_array+0x1e>
 8007d54:	08007ee0 	.word	0x08007ee0
 8007d58:	08007ee0 	.word	0x08007ee0
 8007d5c:	08007ee0 	.word	0x08007ee0
 8007d60:	08007ee8 	.word	0x08007ee8

08007d64 <__retarget_lock_acquire_recursive>:
 8007d64:	4770      	bx	lr

08007d66 <__retarget_lock_release_recursive>:
 8007d66:	4770      	bx	lr

08007d68 <memcpy>:
 8007d68:	440a      	add	r2, r1
 8007d6a:	4291      	cmp	r1, r2
 8007d6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d70:	d100      	bne.n	8007d74 <memcpy+0xc>
 8007d72:	4770      	bx	lr
 8007d74:	b510      	push	{r4, lr}
 8007d76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d7e:	4291      	cmp	r1, r2
 8007d80:	d1f9      	bne.n	8007d76 <memcpy+0xe>
 8007d82:	bd10      	pop	{r4, pc}

08007d84 <_free_r>:
 8007d84:	b538      	push	{r3, r4, r5, lr}
 8007d86:	4605      	mov	r5, r0
 8007d88:	2900      	cmp	r1, #0
 8007d8a:	d041      	beq.n	8007e10 <_free_r+0x8c>
 8007d8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d90:	1f0c      	subs	r4, r1, #4
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	bfb8      	it	lt
 8007d96:	18e4      	addlt	r4, r4, r3
 8007d98:	f7ff ff42 	bl	8007c20 <__malloc_lock>
 8007d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8007e14 <_free_r+0x90>)
 8007d9e:	6813      	ldr	r3, [r2, #0]
 8007da0:	b933      	cbnz	r3, 8007db0 <_free_r+0x2c>
 8007da2:	6063      	str	r3, [r4, #4]
 8007da4:	6014      	str	r4, [r2, #0]
 8007da6:	4628      	mov	r0, r5
 8007da8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dac:	f7ff bf3e 	b.w	8007c2c <__malloc_unlock>
 8007db0:	42a3      	cmp	r3, r4
 8007db2:	d908      	bls.n	8007dc6 <_free_r+0x42>
 8007db4:	6820      	ldr	r0, [r4, #0]
 8007db6:	1821      	adds	r1, r4, r0
 8007db8:	428b      	cmp	r3, r1
 8007dba:	bf01      	itttt	eq
 8007dbc:	6819      	ldreq	r1, [r3, #0]
 8007dbe:	685b      	ldreq	r3, [r3, #4]
 8007dc0:	1809      	addeq	r1, r1, r0
 8007dc2:	6021      	streq	r1, [r4, #0]
 8007dc4:	e7ed      	b.n	8007da2 <_free_r+0x1e>
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	b10b      	cbz	r3, 8007dd0 <_free_r+0x4c>
 8007dcc:	42a3      	cmp	r3, r4
 8007dce:	d9fa      	bls.n	8007dc6 <_free_r+0x42>
 8007dd0:	6811      	ldr	r1, [r2, #0]
 8007dd2:	1850      	adds	r0, r2, r1
 8007dd4:	42a0      	cmp	r0, r4
 8007dd6:	d10b      	bne.n	8007df0 <_free_r+0x6c>
 8007dd8:	6820      	ldr	r0, [r4, #0]
 8007dda:	4401      	add	r1, r0
 8007ddc:	1850      	adds	r0, r2, r1
 8007dde:	4283      	cmp	r3, r0
 8007de0:	6011      	str	r1, [r2, #0]
 8007de2:	d1e0      	bne.n	8007da6 <_free_r+0x22>
 8007de4:	6818      	ldr	r0, [r3, #0]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	6053      	str	r3, [r2, #4]
 8007dea:	4408      	add	r0, r1
 8007dec:	6010      	str	r0, [r2, #0]
 8007dee:	e7da      	b.n	8007da6 <_free_r+0x22>
 8007df0:	d902      	bls.n	8007df8 <_free_r+0x74>
 8007df2:	230c      	movs	r3, #12
 8007df4:	602b      	str	r3, [r5, #0]
 8007df6:	e7d6      	b.n	8007da6 <_free_r+0x22>
 8007df8:	6820      	ldr	r0, [r4, #0]
 8007dfa:	1821      	adds	r1, r4, r0
 8007dfc:	428b      	cmp	r3, r1
 8007dfe:	bf04      	itt	eq
 8007e00:	6819      	ldreq	r1, [r3, #0]
 8007e02:	685b      	ldreq	r3, [r3, #4]
 8007e04:	6063      	str	r3, [r4, #4]
 8007e06:	bf04      	itt	eq
 8007e08:	1809      	addeq	r1, r1, r0
 8007e0a:	6021      	streq	r1, [r4, #0]
 8007e0c:	6054      	str	r4, [r2, #4]
 8007e0e:	e7ca      	b.n	8007da6 <_free_r+0x22>
 8007e10:	bd38      	pop	{r3, r4, r5, pc}
 8007e12:	bf00      	nop
 8007e14:	20000ee4 	.word	0x20000ee4

08007e18 <_init>:
 8007e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e1a:	bf00      	nop
 8007e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e1e:	bc08      	pop	{r3}
 8007e20:	469e      	mov	lr, r3
 8007e22:	4770      	bx	lr

08007e24 <_fini>:
 8007e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e26:	bf00      	nop
 8007e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e2a:	bc08      	pop	{r3}
 8007e2c:	469e      	mov	lr, r3
 8007e2e:	4770      	bx	lr
