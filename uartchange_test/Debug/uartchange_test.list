
uartchange_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000626c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08006444  08006444  00007444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064dc  080064dc  00008064  2**0
                  CONTENTS
  4 .ARM          00000008  080064dc  080064dc  000074dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064e4  080064e4  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080064e4  080064e4  000074e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  080064ec  080064ec  000074ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080064f4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a8  20000064  08006558  00008064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  08006558  0000850c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c1f5  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030b5  00000000  00000000  00024289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  00027340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bcb  00000000  00000000  00028290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029743  00000000  00000000  00028e5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113d5  00000000  00000000  0005259e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001071bc  00000000  00000000  00063973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016ab2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059b8  00000000  00000000  0016ab74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0017052c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000064 	.word	0x20000064
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800642c 	.word	0x0800642c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000068 	.word	0x20000068
 8000214:	0800642c 	.word	0x0800642c

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295
 8000238:	f04f 30ff 	movne.w	r0, #4294967295
 800023c:	f000 b96a 	b.w	8000514 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9d08      	ldr	r5, [sp, #32]
 800025e:	460c      	mov	r4, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14e      	bne.n	8000302 <__udivmoddi4+0xaa>
 8000264:	4694      	mov	ip, r2
 8000266:	458c      	cmp	ip, r1
 8000268:	4686      	mov	lr, r0
 800026a:	fab2 f282 	clz	r2, r2
 800026e:	d962      	bls.n	8000336 <__udivmoddi4+0xde>
 8000270:	b14a      	cbz	r2, 8000286 <__udivmoddi4+0x2e>
 8000272:	f1c2 0320 	rsb	r3, r2, #32
 8000276:	4091      	lsls	r1, r2
 8000278:	fa20 f303 	lsr.w	r3, r0, r3
 800027c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000280:	4319      	orrs	r1, r3
 8000282:	fa00 fe02 	lsl.w	lr, r0, r2
 8000286:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800028a:	fa1f f68c 	uxth.w	r6, ip
 800028e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000292:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000296:	fb07 1114 	mls	r1, r7, r4, r1
 800029a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800029e:	fb04 f106 	mul.w	r1, r4, r6
 80002a2:	4299      	cmp	r1, r3
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x64>
 80002a6:	eb1c 0303 	adds.w	r3, ip, r3
 80002aa:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ae:	f080 8112 	bcs.w	80004d6 <__udivmoddi4+0x27e>
 80002b2:	4299      	cmp	r1, r3
 80002b4:	f240 810f 	bls.w	80004d6 <__udivmoddi4+0x27e>
 80002b8:	3c02      	subs	r4, #2
 80002ba:	4463      	add	r3, ip
 80002bc:	1a59      	subs	r1, r3, r1
 80002be:	fa1f f38e 	uxth.w	r3, lr
 80002c2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002c6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ce:	fb00 f606 	mul.w	r6, r0, r6
 80002d2:	429e      	cmp	r6, r3
 80002d4:	d90a      	bls.n	80002ec <__udivmoddi4+0x94>
 80002d6:	eb1c 0303 	adds.w	r3, ip, r3
 80002da:	f100 31ff 	add.w	r1, r0, #4294967295
 80002de:	f080 80fc 	bcs.w	80004da <__udivmoddi4+0x282>
 80002e2:	429e      	cmp	r6, r3
 80002e4:	f240 80f9 	bls.w	80004da <__udivmoddi4+0x282>
 80002e8:	4463      	add	r3, ip
 80002ea:	3802      	subs	r0, #2
 80002ec:	1b9b      	subs	r3, r3, r6
 80002ee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002f2:	2100      	movs	r1, #0
 80002f4:	b11d      	cbz	r5, 80002fe <__udivmoddi4+0xa6>
 80002f6:	40d3      	lsrs	r3, r2
 80002f8:	2200      	movs	r2, #0
 80002fa:	e9c5 3200 	strd	r3, r2, [r5]
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d905      	bls.n	8000312 <__udivmoddi4+0xba>
 8000306:	b10d      	cbz	r5, 800030c <__udivmoddi4+0xb4>
 8000308:	e9c5 0100 	strd	r0, r1, [r5]
 800030c:	2100      	movs	r1, #0
 800030e:	4608      	mov	r0, r1
 8000310:	e7f5      	b.n	80002fe <__udivmoddi4+0xa6>
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d146      	bne.n	80003a8 <__udivmoddi4+0x150>
 800031a:	42a3      	cmp	r3, r4
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xcc>
 800031e:	4290      	cmp	r0, r2
 8000320:	f0c0 80f0 	bcc.w	8000504 <__udivmoddi4+0x2ac>
 8000324:	1a86      	subs	r6, r0, r2
 8000326:	eb64 0303 	sbc.w	r3, r4, r3
 800032a:	2001      	movs	r0, #1
 800032c:	2d00      	cmp	r5, #0
 800032e:	d0e6      	beq.n	80002fe <__udivmoddi4+0xa6>
 8000330:	e9c5 6300 	strd	r6, r3, [r5]
 8000334:	e7e3      	b.n	80002fe <__udivmoddi4+0xa6>
 8000336:	2a00      	cmp	r2, #0
 8000338:	f040 8090 	bne.w	800045c <__udivmoddi4+0x204>
 800033c:	eba1 040c 	sub.w	r4, r1, ip
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	fa1f f78c 	uxth.w	r7, ip
 8000348:	2101      	movs	r1, #1
 800034a:	fbb4 f6f8 	udiv	r6, r4, r8
 800034e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000352:	fb08 4416 	mls	r4, r8, r6, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb07 f006 	mul.w	r0, r7, r6
 800035e:	4298      	cmp	r0, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x11c>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f106 34ff 	add.w	r4, r6, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x11a>
 800036c:	4298      	cmp	r0, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2b4>
 8000372:	4626      	mov	r6, r4
 8000374:	1a1c      	subs	r4, r3, r0
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb4 f0f8 	udiv	r0, r4, r8
 800037e:	fb08 4410 	mls	r4, r8, r0, r4
 8000382:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000386:	fb00 f707 	mul.w	r7, r0, r7
 800038a:	429f      	cmp	r7, r3
 800038c:	d908      	bls.n	80003a0 <__udivmoddi4+0x148>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 34ff 	add.w	r4, r0, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x146>
 8000398:	429f      	cmp	r7, r3
 800039a:	f200 80b0 	bhi.w	80004fe <__udivmoddi4+0x2a6>
 800039e:	4620      	mov	r0, r4
 80003a0:	1bdb      	subs	r3, r3, r7
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	e7a5      	b.n	80002f4 <__udivmoddi4+0x9c>
 80003a8:	f1c1 0620 	rsb	r6, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 f706 	lsr.w	r7, r2, r6
 80003b2:	431f      	orrs	r7, r3
 80003b4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b8:	fa04 f301 	lsl.w	r3, r4, r1
 80003bc:	ea43 030c 	orr.w	r3, r3, ip
 80003c0:	40f4      	lsrs	r4, r6
 80003c2:	fa00 f801 	lsl.w	r8, r0, r1
 80003c6:	0c38      	lsrs	r0, r7, #16
 80003c8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003cc:	fbb4 fef0 	udiv	lr, r4, r0
 80003d0:	fa1f fc87 	uxth.w	ip, r7
 80003d4:	fb00 441e 	mls	r4, r0, lr, r4
 80003d8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003dc:	fb0e f90c 	mul.w	r9, lr, ip
 80003e0:	45a1      	cmp	r9, r4
 80003e2:	fa02 f201 	lsl.w	r2, r2, r1
 80003e6:	d90a      	bls.n	80003fe <__udivmoddi4+0x1a6>
 80003e8:	193c      	adds	r4, r7, r4
 80003ea:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ee:	f080 8084 	bcs.w	80004fa <__udivmoddi4+0x2a2>
 80003f2:	45a1      	cmp	r9, r4
 80003f4:	f240 8081 	bls.w	80004fa <__udivmoddi4+0x2a2>
 80003f8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	eba4 0409 	sub.w	r4, r4, r9
 8000402:	fa1f f983 	uxth.w	r9, r3
 8000406:	fbb4 f3f0 	udiv	r3, r4, r0
 800040a:	fb00 4413 	mls	r4, r0, r3, r4
 800040e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000412:	fb03 fc0c 	mul.w	ip, r3, ip
 8000416:	45a4      	cmp	ip, r4
 8000418:	d907      	bls.n	800042a <__udivmoddi4+0x1d2>
 800041a:	193c      	adds	r4, r7, r4
 800041c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000420:	d267      	bcs.n	80004f2 <__udivmoddi4+0x29a>
 8000422:	45a4      	cmp	ip, r4
 8000424:	d965      	bls.n	80004f2 <__udivmoddi4+0x29a>
 8000426:	3b02      	subs	r3, #2
 8000428:	443c      	add	r4, r7
 800042a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800042e:	fba0 9302 	umull	r9, r3, r0, r2
 8000432:	eba4 040c 	sub.w	r4, r4, ip
 8000436:	429c      	cmp	r4, r3
 8000438:	46ce      	mov	lr, r9
 800043a:	469c      	mov	ip, r3
 800043c:	d351      	bcc.n	80004e2 <__udivmoddi4+0x28a>
 800043e:	d04e      	beq.n	80004de <__udivmoddi4+0x286>
 8000440:	b155      	cbz	r5, 8000458 <__udivmoddi4+0x200>
 8000442:	ebb8 030e 	subs.w	r3, r8, lr
 8000446:	eb64 040c 	sbc.w	r4, r4, ip
 800044a:	fa04 f606 	lsl.w	r6, r4, r6
 800044e:	40cb      	lsrs	r3, r1
 8000450:	431e      	orrs	r6, r3
 8000452:	40cc      	lsrs	r4, r1
 8000454:	e9c5 6400 	strd	r6, r4, [r5]
 8000458:	2100      	movs	r1, #0
 800045a:	e750      	b.n	80002fe <__udivmoddi4+0xa6>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f103 	lsr.w	r1, r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa24 f303 	lsr.w	r3, r4, r3
 800046c:	4094      	lsls	r4, r2
 800046e:	430c      	orrs	r4, r1
 8000470:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000474:	fa00 fe02 	lsl.w	lr, r0, r2
 8000478:	fa1f f78c 	uxth.w	r7, ip
 800047c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000480:	fb08 3110 	mls	r1, r8, r0, r3
 8000484:	0c23      	lsrs	r3, r4, #16
 8000486:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048a:	fb00 f107 	mul.w	r1, r0, r7
 800048e:	4299      	cmp	r1, r3
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x24c>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 36ff 	add.w	r6, r0, #4294967295
 800049a:	d22c      	bcs.n	80004f6 <__udivmoddi4+0x29e>
 800049c:	4299      	cmp	r1, r3
 800049e:	d92a      	bls.n	80004f6 <__udivmoddi4+0x29e>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b2a4      	uxth	r4, r4
 80004a8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004ac:	fb08 3311 	mls	r3, r8, r1, r3
 80004b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004b4:	fb01 f307 	mul.w	r3, r1, r7
 80004b8:	42a3      	cmp	r3, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x276>
 80004bc:	eb1c 0404 	adds.w	r4, ip, r4
 80004c0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004c4:	d213      	bcs.n	80004ee <__udivmoddi4+0x296>
 80004c6:	42a3      	cmp	r3, r4
 80004c8:	d911      	bls.n	80004ee <__udivmoddi4+0x296>
 80004ca:	3902      	subs	r1, #2
 80004cc:	4464      	add	r4, ip
 80004ce:	1ae4      	subs	r4, r4, r3
 80004d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004d4:	e739      	b.n	800034a <__udivmoddi4+0xf2>
 80004d6:	4604      	mov	r4, r0
 80004d8:	e6f0      	b.n	80002bc <__udivmoddi4+0x64>
 80004da:	4608      	mov	r0, r1
 80004dc:	e706      	b.n	80002ec <__udivmoddi4+0x94>
 80004de:	45c8      	cmp	r8, r9
 80004e0:	d2ae      	bcs.n	8000440 <__udivmoddi4+0x1e8>
 80004e2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004e6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7a8      	b.n	8000440 <__udivmoddi4+0x1e8>
 80004ee:	4631      	mov	r1, r6
 80004f0:	e7ed      	b.n	80004ce <__udivmoddi4+0x276>
 80004f2:	4603      	mov	r3, r0
 80004f4:	e799      	b.n	800042a <__udivmoddi4+0x1d2>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e7d4      	b.n	80004a4 <__udivmoddi4+0x24c>
 80004fa:	46d6      	mov	lr, sl
 80004fc:	e77f      	b.n	80003fe <__udivmoddi4+0x1a6>
 80004fe:	4463      	add	r3, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e74d      	b.n	80003a0 <__udivmoddi4+0x148>
 8000504:	4606      	mov	r6, r0
 8000506:	4623      	mov	r3, r4
 8000508:	4608      	mov	r0, r1
 800050a:	e70f      	b.n	800032c <__udivmoddi4+0xd4>
 800050c:	3e02      	subs	r6, #2
 800050e:	4463      	add	r3, ip
 8000510:	e730      	b.n	8000374 <__udivmoddi4+0x11c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f001 fee3 	bl	80022e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f80c 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 f8ec 	bl	8000700 <MX_GPIO_Init>
  MX_DMA_Init();
 8000528:	f000 f8c0 	bl	80006ac <MX_DMA_Init>
  MX_CRC_Init();
 800052c:	f000 f846 	bl	80005bc <MX_CRC_Init>
  MX_USART2_UART_Init();
 8000530:	f000 f870 	bl	8000614 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uart_init();
 8000534:	f000 fadc 	bl	8000af0 <uart_init>
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <main+0x20>

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	@ 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0318 	add.w	r3, r7, #24
 8000546:	2238      	movs	r2, #56	@ 0x38
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f005 fe8e 	bl	800626c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000562:	f002 fefb 	bl	800335c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000566:	2302      	movs	r3, #2
 8000568:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800056e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000570:	2340      	movs	r3, #64	@ 0x40
 8000572:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000574:	2300      	movs	r3, #0
 8000576:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000578:	f107 0318 	add.w	r3, r7, #24
 800057c:	4618      	mov	r0, r3
 800057e:	f002 ffa1 	bl	80034c4 <HAL_RCC_OscConfig>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000588:	f000 f8ea 	bl	8000760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058c:	230f      	movs	r3, #15
 800058e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000590:	2301      	movs	r3, #1
 8000592:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2100      	movs	r1, #0
 80005a4:	4618      	mov	r0, r3
 80005a6:	f003 fa9f 	bl	8003ae8 <HAL_RCC_ClockConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005b0:	f000 f8d6 	bl	8000760 <Error_Handler>
  }
}
 80005b4:	bf00      	nop
 80005b6:	3750      	adds	r7, #80	@ 0x50
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005c0:	4b12      	ldr	r3, [pc, #72]	@ (800060c <MX_CRC_Init+0x50>)
 80005c2:	4a13      	ldr	r2, [pc, #76]	@ (8000610 <MX_CRC_Init+0x54>)
 80005c4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80005c6:	4b11      	ldr	r3, [pc, #68]	@ (800060c <MX_CRC_Init+0x50>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <MX_CRC_Init+0x50>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 4129;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	@ (800060c <MX_CRC_Init+0x50>)
 80005d4:	f241 0221 	movw	r2, #4129	@ 0x1021
 80005d8:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 80005da:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <MX_CRC_Init+0x50>)
 80005dc:	2208      	movs	r2, #8
 80005de:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 80005e0:	4b0a      	ldr	r3, [pc, #40]	@ (800060c <MX_CRC_Init+0x50>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80005e6:	4b09      	ldr	r3, [pc, #36]	@ (800060c <MX_CRC_Init+0x50>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80005ec:	4b07      	ldr	r3, [pc, #28]	@ (800060c <MX_CRC_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80005f2:	4b06      	ldr	r3, [pc, #24]	@ (800060c <MX_CRC_Init+0x50>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80005f8:	4804      	ldr	r0, [pc, #16]	@ (800060c <MX_CRC_Init+0x50>)
 80005fa:	f001 fff5 	bl	80025e8 <HAL_CRC_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 8000604:	f000 f8ac 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000080 	.word	0x20000080
 8000610:	40023000 	.word	0x40023000

08000614 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000618:	4b22      	ldr	r3, [pc, #136]	@ (80006a4 <MX_USART2_UART_Init+0x90>)
 800061a:	4a23      	ldr	r2, [pc, #140]	@ (80006a8 <MX_USART2_UART_Init+0x94>)
 800061c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800061e:	4b21      	ldr	r3, [pc, #132]	@ (80006a4 <MX_USART2_UART_Init+0x90>)
 8000620:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000624:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000626:	4b1f      	ldr	r3, [pc, #124]	@ (80006a4 <MX_USART2_UART_Init+0x90>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800062c:	4b1d      	ldr	r3, [pc, #116]	@ (80006a4 <MX_USART2_UART_Init+0x90>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000632:	4b1c      	ldr	r3, [pc, #112]	@ (80006a4 <MX_USART2_UART_Init+0x90>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000638:	4b1a      	ldr	r3, [pc, #104]	@ (80006a4 <MX_USART2_UART_Init+0x90>)
 800063a:	220c      	movs	r2, #12
 800063c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063e:	4b19      	ldr	r3, [pc, #100]	@ (80006a4 <MX_USART2_UART_Init+0x90>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000644:	4b17      	ldr	r3, [pc, #92]	@ (80006a4 <MX_USART2_UART_Init+0x90>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800064a:	4b16      	ldr	r3, [pc, #88]	@ (80006a4 <MX_USART2_UART_Init+0x90>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000650:	4b14      	ldr	r3, [pc, #80]	@ (80006a4 <MX_USART2_UART_Init+0x90>)
 8000652:	2200      	movs	r2, #0
 8000654:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000656:	4b13      	ldr	r3, [pc, #76]	@ (80006a4 <MX_USART2_UART_Init+0x90>)
 8000658:	2200      	movs	r2, #0
 800065a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800065c:	4811      	ldr	r0, [pc, #68]	@ (80006a4 <MX_USART2_UART_Init+0x90>)
 800065e:	f003 fead 	bl	80043bc <HAL_UART_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000668:	f000 f87a 	bl	8000760 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800066c:	2100      	movs	r1, #0
 800066e:	480d      	ldr	r0, [pc, #52]	@ (80006a4 <MX_USART2_UART_Init+0x90>)
 8000670:	f005 fa5e 	bl	8005b30 <HAL_UARTEx_SetTxFifoThreshold>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800067a:	f000 f871 	bl	8000760 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800067e:	2100      	movs	r1, #0
 8000680:	4808      	ldr	r0, [pc, #32]	@ (80006a4 <MX_USART2_UART_Init+0x90>)
 8000682:	f005 fa93 	bl	8005bac <HAL_UARTEx_SetRxFifoThreshold>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800068c:	f000 f868 	bl	8000760 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000690:	4804      	ldr	r0, [pc, #16]	@ (80006a4 <MX_USART2_UART_Init+0x90>)
 8000692:	f005 fa14 	bl	8005abe <HAL_UARTEx_DisableFifoMode>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800069c:	f000 f860 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	200000a4 	.word	0x200000a4
 80006a8:	40004400 	.word	0x40004400

080006ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80006b2:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <MX_DMA_Init+0x50>)
 80006b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006b6:	4a11      	ldr	r2, [pc, #68]	@ (80006fc <MX_DMA_Init+0x50>)
 80006b8:	f043 0304 	orr.w	r3, r3, #4
 80006bc:	6493      	str	r3, [r2, #72]	@ 0x48
 80006be:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <MX_DMA_Init+0x50>)
 80006c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006c2:	f003 0304 	and.w	r3, r3, #4
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006ca:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <MX_DMA_Init+0x50>)
 80006cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006ce:	4a0b      	ldr	r2, [pc, #44]	@ (80006fc <MX_DMA_Init+0x50>)
 80006d0:	f043 0302 	orr.w	r3, r3, #2
 80006d4:	6493      	str	r3, [r2, #72]	@ 0x48
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <MX_DMA_Init+0x50>)
 80006d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA2_Channel8_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel8_IRQn, 0, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2100      	movs	r1, #0
 80006e6:	2063      	movs	r0, #99	@ 0x63
 80006e8:	f001 ff49 	bl	800257e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel8_IRQn);
 80006ec:	2063      	movs	r0, #99	@ 0x63
 80006ee:	f001 ff60 	bl	80025b2 <HAL_NVIC_EnableIRQ>

}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40021000 	.word	0x40021000

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000706:	4b15      	ldr	r3, [pc, #84]	@ (800075c <MX_GPIO_Init+0x5c>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070a:	4a14      	ldr	r2, [pc, #80]	@ (800075c <MX_GPIO_Init+0x5c>)
 800070c:	f043 0320 	orr.w	r3, r3, #32
 8000710:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000712:	4b12      	ldr	r3, [pc, #72]	@ (800075c <MX_GPIO_Init+0x5c>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000716:	f003 0320 	and.w	r3, r3, #32
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <MX_GPIO_Init+0x5c>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000722:	4a0e      	ldr	r2, [pc, #56]	@ (800075c <MX_GPIO_Init+0x5c>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072a:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <MX_GPIO_Init+0x5c>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	4b09      	ldr	r3, [pc, #36]	@ (800075c <MX_GPIO_Init+0x5c>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073a:	4a08      	ldr	r2, [pc, #32]	@ (800075c <MX_GPIO_Init+0x5c>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <MX_GPIO_Init+0x5c>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800074e:	bf00      	nop
 8000750:	3714      	adds	r7, #20
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40021000 	.word	0x40021000

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000764:	b672      	cpsid	i
}
 8000766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000768:	bf00      	nop
 800076a:	e7fd      	b.n	8000768 <Error_Handler+0x8>

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <HAL_MspInit+0x44>)
 8000774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000776:	4a0e      	ldr	r2, [pc, #56]	@ (80007b0 <HAL_MspInit+0x44>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6613      	str	r3, [r2, #96]	@ 0x60
 800077e:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <HAL_MspInit+0x44>)
 8000780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <HAL_MspInit+0x44>)
 800078c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800078e:	4a08      	ldr	r2, [pc, #32]	@ (80007b0 <HAL_MspInit+0x44>)
 8000790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000794:	6593      	str	r3, [r2, #88]	@ 0x58
 8000796:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <HAL_MspInit+0x44>)
 8000798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800079a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80007a2:	f002 fe7f 	bl	80034a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40021000 	.word	0x40021000

080007b4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a0a      	ldr	r2, [pc, #40]	@ (80007ec <HAL_CRC_MspInit+0x38>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d10b      	bne.n	80007de <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007c6:	4b0a      	ldr	r3, [pc, #40]	@ (80007f0 <HAL_CRC_MspInit+0x3c>)
 80007c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007ca:	4a09      	ldr	r2, [pc, #36]	@ (80007f0 <HAL_CRC_MspInit+0x3c>)
 80007cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80007d2:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <HAL_CRC_MspInit+0x3c>)
 80007d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80007de:	bf00      	nop
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40023000 	.word	0x40023000
 80007f0:	40021000 	.word	0x40021000

080007f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b09e      	sub	sp, #120	@ 0x78
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800080c:	f107 0310 	add.w	r3, r7, #16
 8000810:	2254      	movs	r2, #84	@ 0x54
 8000812:	2100      	movs	r1, #0
 8000814:	4618      	mov	r0, r3
 8000816:	f005 fd29 	bl	800626c <memset>
  if(huart->Instance==USART2)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a37      	ldr	r2, [pc, #220]	@ (80008fc <HAL_UART_MspInit+0x108>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d167      	bne.n	80008f4 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000824:	2302      	movs	r3, #2
 8000826:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000828:	2304      	movs	r3, #4
 800082a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800082c:	f107 0310 	add.w	r3, r7, #16
 8000830:	4618      	mov	r0, r3
 8000832:	f003 fb75 	bl	8003f20 <HAL_RCCEx_PeriphCLKConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800083c:	f7ff ff90 	bl	8000760 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000840:	4b2f      	ldr	r3, [pc, #188]	@ (8000900 <HAL_UART_MspInit+0x10c>)
 8000842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000844:	4a2e      	ldr	r2, [pc, #184]	@ (8000900 <HAL_UART_MspInit+0x10c>)
 8000846:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800084a:	6593      	str	r3, [r2, #88]	@ 0x58
 800084c:	4b2c      	ldr	r3, [pc, #176]	@ (8000900 <HAL_UART_MspInit+0x10c>)
 800084e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000858:	4b29      	ldr	r3, [pc, #164]	@ (8000900 <HAL_UART_MspInit+0x10c>)
 800085a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085c:	4a28      	ldr	r2, [pc, #160]	@ (8000900 <HAL_UART_MspInit+0x10c>)
 800085e:	f043 0302 	orr.w	r3, r3, #2
 8000862:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000864:	4b26      	ldr	r3, [pc, #152]	@ (8000900 <HAL_UART_MspInit+0x10c>)
 8000866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000868:	f003 0302 	and.w	r3, r3, #2
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000870:	2318      	movs	r3, #24
 8000872:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000874:	2302      	movs	r3, #2
 8000876:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000880:	2307      	movs	r3, #7
 8000882:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000884:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000888:	4619      	mov	r1, r3
 800088a:	481e      	ldr	r0, [pc, #120]	@ (8000904 <HAL_UART_MspInit+0x110>)
 800088c:	f002 fbe4 	bl	8003058 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Channel8;
 8000890:	4b1d      	ldr	r3, [pc, #116]	@ (8000908 <HAL_UART_MspInit+0x114>)
 8000892:	4a1e      	ldr	r2, [pc, #120]	@ (800090c <HAL_UART_MspInit+0x118>)
 8000894:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000896:	4b1c      	ldr	r3, [pc, #112]	@ (8000908 <HAL_UART_MspInit+0x114>)
 8000898:	221a      	movs	r2, #26
 800089a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800089c:	4b1a      	ldr	r3, [pc, #104]	@ (8000908 <HAL_UART_MspInit+0x114>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008a2:	4b19      	ldr	r3, [pc, #100]	@ (8000908 <HAL_UART_MspInit+0x114>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008a8:	4b17      	ldr	r3, [pc, #92]	@ (8000908 <HAL_UART_MspInit+0x114>)
 80008aa:	2280      	movs	r2, #128	@ 0x80
 80008ac:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008ae:	4b16      	ldr	r3, [pc, #88]	@ (8000908 <HAL_UART_MspInit+0x114>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008b4:	4b14      	ldr	r3, [pc, #80]	@ (8000908 <HAL_UART_MspInit+0x114>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80008ba:	4b13      	ldr	r3, [pc, #76]	@ (8000908 <HAL_UART_MspInit+0x114>)
 80008bc:	2200      	movs	r2, #0
 80008be:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008c0:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <HAL_UART_MspInit+0x114>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80008c6:	4810      	ldr	r0, [pc, #64]	@ (8000908 <HAL_UART_MspInit+0x114>)
 80008c8:	f002 f894 	bl	80029f4 <HAL_DMA_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 80008d2:	f7ff ff45 	bl	8000760 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000908 <HAL_UART_MspInit+0x114>)
 80008da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80008de:	4a0a      	ldr	r2, [pc, #40]	@ (8000908 <HAL_UART_MspInit+0x114>)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2100      	movs	r1, #0
 80008e8:	2026      	movs	r0, #38	@ 0x26
 80008ea:	f001 fe48 	bl	800257e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008ee:	2026      	movs	r0, #38	@ 0x26
 80008f0:	f001 fe5f 	bl	80025b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008f4:	bf00      	nop
 80008f6:	3778      	adds	r7, #120	@ 0x78
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40004400 	.word	0x40004400
 8000900:	40021000 	.word	0x40021000
 8000904:	48000400 	.word	0x48000400
 8000908:	20000138 	.word	0x20000138
 800090c:	40020494 	.word	0x40020494

08000910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <NMI_Handler+0x4>

08000918 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <HardFault_Handler+0x4>

08000920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <MemManage_Handler+0x4>

08000928 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <BusFault_Handler+0x4>

08000930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <UsageFault_Handler+0x4>

08000938 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000966:	f001 fd11 	bl	800238c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000974:	4802      	ldr	r0, [pc, #8]	@ (8000980 <USART2_IRQHandler+0x10>)
 8000976:	f003 fdff 	bl	8004578 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200000a4 	.word	0x200000a4

08000984 <DMA2_Channel8_IRQHandler>:

/**
  * @brief This function handles DMA2 channel8 global interrupt.
  */
void DMA2_Channel8_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel8_IRQn 0 */

  /* USER CODE END DMA2_Channel8_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000988:	4802      	ldr	r0, [pc, #8]	@ (8000994 <DMA2_Channel8_IRQHandler+0x10>)
 800098a:	f002 fa16 	bl	8002dba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel8_IRQn 1 */

  /* USER CODE END DMA2_Channel8_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000138 	.word	0x20000138

08000998 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return 1;
 800099c:	2301      	movs	r3, #1
}
 800099e:	4618      	mov	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <_kill>:

int _kill(int pid, int sig)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80009b2:	f005 fcb7 	bl	8006324 <__errno>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2216      	movs	r2, #22
 80009ba:	601a      	str	r2, [r3, #0]
  return -1;
 80009bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <_exit>:

void _exit (int status)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80009d0:	f04f 31ff 	mov.w	r1, #4294967295
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff ffe7 	bl	80009a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80009da:	bf00      	nop
 80009dc:	e7fd      	b.n	80009da <_exit+0x12>
	...

080009e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e8:	4a14      	ldr	r2, [pc, #80]	@ (8000a3c <_sbrk+0x5c>)
 80009ea:	4b15      	ldr	r3, [pc, #84]	@ (8000a40 <_sbrk+0x60>)
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f4:	4b13      	ldr	r3, [pc, #76]	@ (8000a44 <_sbrk+0x64>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d102      	bne.n	8000a02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009fc:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <_sbrk+0x64>)
 80009fe:	4a12      	ldr	r2, [pc, #72]	@ (8000a48 <_sbrk+0x68>)
 8000a00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a02:	4b10      	ldr	r3, [pc, #64]	@ (8000a44 <_sbrk+0x64>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d207      	bcs.n	8000a20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a10:	f005 fc88 	bl	8006324 <__errno>
 8000a14:	4603      	mov	r3, r0
 8000a16:	220c      	movs	r2, #12
 8000a18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1e:	e009      	b.n	8000a34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a20:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <_sbrk+0x64>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a26:	4b07      	ldr	r3, [pc, #28]	@ (8000a44 <_sbrk+0x64>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4a05      	ldr	r2, [pc, #20]	@ (8000a44 <_sbrk+0x64>)
 8000a30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a32:	68fb      	ldr	r3, [r7, #12]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20020000 	.word	0x20020000
 8000a40:	00000400 	.word	0x00000400
 8000a44:	20000198 	.word	0x20000198
 8000a48:	20000510 	.word	0x20000510

08000a4c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <SystemInit+0x20>)
 8000a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a56:	4a05      	ldr	r2, [pc, #20]	@ (8000a6c <SystemInit+0x20>)
 8000a58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <_ZNSt11char_traitsIcE6assignERcRKc>:
#if __cpp_lib_three_way_comparison
      using comparison_category = strong_ordering;
#endif

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
#if __cpp_constexpr_dynamic_alloc
	if (std::__is_constant_evaluated())
	  std::construct_at(__builtin_addressof(__c1), __c2);
	else
#endif
	__c1 = __c2;
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	781a      	ldrb	r2, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	701a      	strb	r2, [r3, #0]
      }
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	6039      	str	r1, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b082      	sub	sp, #8
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f000 f805 	bl	8000ac4 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
    }
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <uart_init>:
static void reg_write_handler(uint8_t* data, size_t size);

static uint8_t rx_buf[520];

void uart_init()
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  uart_register_handler("RDR", reg_read_handler);
 8000af4:	4905      	ldr	r1, [pc, #20]	@ (8000b0c <uart_init+0x1c>)
 8000af6:	4806      	ldr	r0, [pc, #24]	@ (8000b10 <uart_init+0x20>)
 8000af8:	f000 f878 	bl	8000bec <uart_register_handler>
  uart_register_handler("WRR", reg_write_handler);
 8000afc:	4905      	ldr	r1, [pc, #20]	@ (8000b14 <uart_init+0x24>)
 8000afe:	4806      	ldr	r0, [pc, #24]	@ (8000b18 <uart_init+0x28>)
 8000b00:	f000 f874 	bl	8000bec <uart_register_handler>

  uart_receive_start();
 8000b04:	f000 f98e 	bl	8000e24 <_ZL18uart_receive_startv>
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	08000e5d 	.word	0x08000e5d
 8000b10:	08006444 	.word	0x08006444
 8000b14:	08000e93 	.word	0x08000e93
 8000b18:	08006448 	.word	0x08006448

08000b1c <uart_transmit>:

void uart_transmit(const uint8_t* data, size_t size)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
  uint8_t tx_buf[4] = {0x55, 0xA5,
 8000b26:	2300      	movs	r3, #0
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	2355      	movs	r3, #85	@ 0x55
 8000b2c:	723b      	strb	r3, [r7, #8]
 8000b2e:	23a5      	movs	r3, #165	@ 0xa5
 8000b30:	727b      	strb	r3, [r7, #9]
      (uint8_t)(size & 0xFF), (uint8_t)(size >> 8)};
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	72bb      	strb	r3, [r7, #10]
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	0a1b      	lsrs	r3, r3, #8
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	72fb      	strb	r3, [r7, #11]
  HAL_UART_Transmit(huart_reg, tx_buf, 4, 10);
 8000b40:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <uart_transmit+0x7c>)
 8000b42:	6818      	ldr	r0, [r3, #0]
 8000b44:	f107 0108 	add.w	r1, r7, #8
 8000b48:	230a      	movs	r3, #10
 8000b4a:	2204      	movs	r2, #4
 8000b4c:	f003 fc86 	bl	800445c <HAL_UART_Transmit>
  uint16_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t*)data, size);
 8000b50:	683a      	ldr	r2, [r7, #0]
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	4811      	ldr	r0, [pc, #68]	@ (8000b9c <uart_transmit+0x80>)
 8000b56:	f001 fdab 	bl	80026b0 <HAL_CRC_Calculate>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	81fb      	strh	r3, [r7, #14]
  HAL_UART_Transmit(huart_reg, data, size, size+1);
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b98 <uart_transmit+0x7c>)
 8000b60:	6818      	ldr	r0, [r3, #0]
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	6879      	ldr	r1, [r7, #4]
 8000b6c:	f003 fc76 	bl	800445c <HAL_UART_Transmit>
  tx_buf[0] = crc & 0xFF;
 8000b70:	89fb      	ldrh	r3, [r7, #14]
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	723b      	strb	r3, [r7, #8]
  tx_buf[1] = crc >> 8;
 8000b76:	89fb      	ldrh	r3, [r7, #14]
 8000b78:	0a1b      	lsrs	r3, r3, #8
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	727b      	strb	r3, [r7, #9]
  HAL_UART_Transmit(huart_reg, tx_buf, 2, 10);
 8000b80:	4b05      	ldr	r3, [pc, #20]	@ (8000b98 <uart_transmit+0x7c>)
 8000b82:	6818      	ldr	r0, [r3, #0]
 8000b84:	f107 0108 	add.w	r1, r7, #8
 8000b88:	230a      	movs	r3, #10
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	f003 fc66 	bl	800445c <HAL_UART_Transmit>
}
 8000b90:	bf00      	nop
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000004 	.word	0x20000004
 8000b9c:	20000080 	.word	0x20000080

08000ba0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f000 f9aa 	bl	8000f02 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEED1Ev>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f988 	bl	8000ed8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EEC1Ev>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ffeb 	bl	8000bb8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EEC1Ev>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4618      	mov	r0, r3
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <uart_register_handler>:

static std::map<std::string, void(*)(uint8_t*, size_t)> handler_map;

void uart_register_handler(const char* cmd, void(*cb)(uint8_t*, size_t))
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	@ 0x28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
  handler_map[cmd] = cb;
 8000bf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f005 f8c9 	bl	8005d92 <_ZNSaIcEC1Ev>
 8000c00:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000c04:	f107 030c 	add.w	r3, r7, #12
 8000c08:	6879      	ldr	r1, [r7, #4]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f005 fa36 	bl	800607c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000c10:	f107 030c 	add.w	r3, r7, #12
 8000c14:	4619      	mov	r1, r3
 8000c16:	480a      	ldr	r0, [pc, #40]	@ (8000c40 <uart_register_handler+0x54>)
 8000c18:	f000 f994 	bl	8000f44 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEEixEOS5_>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	6013      	str	r3, [r2, #0]
 8000c22:	f107 030c 	add.w	r3, r7, #12
 8000c26:	4618      	mov	r0, r3
 8000c28:	f005 f9f7 	bl	800601a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000c2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c30:	4618      	mov	r0, r3
 8000c32:	f005 f8af 	bl	8005d94 <_ZNSaIcED1Ev>
}
 8000c36:	bf00      	nop
 8000c38:	3728      	adds	r7, #40	@ 0x28
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200003a4 	.word	0x200003a4

08000c44 <_ZL12uart_managerPhS_>:

static int uart_manager(uint8_t* begin, uint8_t* end)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b090      	sub	sp, #64	@ 0x40
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
  if (end - begin < 8)
 8000c4e:	683a      	ldr	r2, [r7, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	2b07      	cmp	r3, #7
 8000c56:	dc02      	bgt.n	8000c5e <_ZL12uart_managerPhS_+0x1a>
    return -1;
 8000c58:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5c:	e0aa      	b.n	8000db4 <_ZL12uart_managerPhS_+0x170>

  if (*begin++ != 0x55)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	1c5a      	adds	r2, r3, #1
 8000c62:	607a      	str	r2, [r7, #4]
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b55      	cmp	r3, #85	@ 0x55
 8000c68:	bf14      	ite	ne
 8000c6a:	2301      	movne	r3, #1
 8000c6c:	2300      	moveq	r3, #0
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d002      	beq.n	8000c7a <_ZL12uart_managerPhS_+0x36>
    return -1;
 8000c74:	f04f 33ff 	mov.w	r3, #4294967295
 8000c78:	e09c      	b.n	8000db4 <_ZL12uart_managerPhS_+0x170>
  if (*begin++ != 0xA5)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	1c5a      	adds	r2, r3, #1
 8000c7e:	607a      	str	r2, [r7, #4]
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2ba5      	cmp	r3, #165	@ 0xa5
 8000c84:	bf14      	ite	ne
 8000c86:	2301      	movne	r3, #1
 8000c88:	2300      	moveq	r3, #0
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d002      	beq.n	8000c96 <_ZL12uart_managerPhS_+0x52>
    return -1;
 8000c90:	f04f 33ff 	mov.w	r3, #4294967295
 8000c94:	e08e      	b.n	8000db4 <_ZL12uart_managerPhS_+0x170>

  int size = *begin++;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	1c5a      	adds	r2, r3, #1
 8000c9a:	607a      	str	r2, [r7, #4]
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  size += *begin++ << 8;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	1c5a      	adds	r2, r3, #1
 8000ca4:	607a      	str	r2, [r7, #4]
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	021b      	lsls	r3, r3, #8
 8000caa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000cac:	4413      	add	r3, r2
 8000cae:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (size > end - begin + 2 || size < 2)
 8000cb0:	683a      	ldr	r2, [r7, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	3302      	adds	r3, #2
 8000cb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	dc02      	bgt.n	8000cc4 <_ZL12uart_managerPhS_+0x80>
 8000cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	dc02      	bgt.n	8000cca <_ZL12uart_managerPhS_+0x86>
    return -1;
 8000cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc8:	e074      	b.n	8000db4 <_ZL12uart_managerPhS_+0x170>

  int crc = begin[size] + (begin[size+1] << 8);
 8000cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	4413      	add	r3, r2
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	4413      	add	r3, r2
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	021b      	lsls	r3, r3, #8
 8000ce0:	440b      	add	r3, r1
 8000ce2:	637b      	str	r3, [r7, #52]	@ 0x34
  int calc = HAL_CRC_Calculate(&hcrc, (uint32_t*)begin, size);
 8000ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	6879      	ldr	r1, [r7, #4]
 8000cea:	4834      	ldr	r0, [pc, #208]	@ (8000dbc <_ZL12uart_managerPhS_+0x178>)
 8000cec:	f001 fce0 	bl	80026b0 <HAL_CRC_Calculate>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (calc != crc)
 8000cf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d002      	beq.n	8000d02 <_ZL12uart_managerPhS_+0xbe>
    return -1;
 8000cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000d00:	e058      	b.n	8000db4 <_ZL12uart_managerPhS_+0x170>

  end = begin + size;
 8000d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	4413      	add	r3, r2
 8000d08:	603b      	str	r3, [r7, #0]
  auto p = begin;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  for (; p != end; ++p)
 8000d0e:	e006      	b.n	8000d1e <_ZL12uart_managerPhS_+0xda>
  {
    if (*p == ':')
 8000d10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b3a      	cmp	r3, #58	@ 0x3a
 8000d16:	d007      	beq.n	8000d28 <_ZL12uart_managerPhS_+0xe4>
  for (; p != end; ++p)
 8000d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000d1e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d1f4      	bne.n	8000d10 <_ZL12uart_managerPhS_+0xcc>
 8000d26:	e000      	b.n	8000d2a <_ZL12uart_managerPhS_+0xe6>
      break;
 8000d28:	bf00      	nop
  }

  if (p != end)
 8000d2a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d03e      	beq.n	8000db0 <_ZL12uart_managerPhS_+0x16c>
  {
    std::string cmd(begin, p);
 8000d32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d36:	4618      	mov	r0, r3
 8000d38:	f005 f82b 	bl	8005d92 <_ZNSaIcEC1Ev>
 8000d3c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d40:	f107 0010 	add.w	r0, r7, #16
 8000d44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	f000 f95c 	bl	8001004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPhvEET_S7_RKS3_>
 8000d4c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d50:	4618      	mov	r0, r3
 8000d52:	f005 f81f 	bl	8005d94 <_ZNSaIcED1Ev>
    auto it = handler_map.find(cmd);
 8000d56:	f107 0310 	add.w	r3, r7, #16
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4818      	ldr	r0, [pc, #96]	@ (8000dc0 <_ZL12uart_managerPhS_+0x17c>)
 8000d5e:	f000 f976 	bl	800104e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE4findERSC_>
 8000d62:	4603      	mov	r3, r0
 8000d64:	60fb      	str	r3, [r7, #12]
    if (it != handler_map.end())
 8000d66:	4816      	ldr	r0, [pc, #88]	@ (8000dc0 <_ZL12uart_managerPhS_+0x17c>)
 8000d68:	f000 f980 	bl	800106c <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE3endEv>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d70:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	4611      	mov	r1, r2
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 f983 	bl	8001086 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d00f      	beq.n	8000da6 <_ZL12uart_managerPhS_+0x162>
    {
      ++p;
 8000d86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d88:	3301      	adds	r3, #1
 8000d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      it->second(p, end-p);
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	4618      	mov	r0, r3
 8000d92:	f000 f98c 	bl	80010ae <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEptEv>
 8000d96:	4603      	mov	r3, r0
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	6839      	ldr	r1, [r7, #0]
 8000d9c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000d9e:	1a8a      	subs	r2, r1, r2
 8000da0:	4611      	mov	r1, r2
 8000da2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000da4:	4798      	blx	r3
    }
  }
 8000da6:	f107 0310 	add.w	r3, r7, #16
 8000daa:	4618      	mov	r0, r3
 8000dac:	f005 f935 	bl	800601a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

  return size + 6;
 8000db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000db2:	3306      	adds	r3, #6
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3740      	adds	r7, #64	@ 0x40
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000080 	.word	0x20000080
 8000dc0:	200003a4 	.word	0x200003a4

08000dc4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	807b      	strh	r3, [r7, #2]
  if (huart != huart_reg)
 8000dd0:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <HAL_UARTEx_RxEventCallback+0x58>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d11b      	bne.n	8000e12 <HAL_UARTEx_RxEventCallback+0x4e>
    return;

  auto end = rx_buf + Size;
 8000dda:	887b      	ldrh	r3, [r7, #2]
 8000ddc:	4a10      	ldr	r2, [pc, #64]	@ (8000e20 <HAL_UARTEx_RxEventCallback+0x5c>)
 8000dde:	4413      	add	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
  for (auto* p = rx_buf; p < end; )
 8000de2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e20 <HAL_UARTEx_RxEventCallback+0x5c>)
 8000de4:	617b      	str	r3, [r7, #20]
 8000de6:	e00b      	b.n	8000e00 <HAL_UARTEx_RxEventCallback+0x3c>
  {
    int res = uart_manager(p, end);
 8000de8:	6939      	ldr	r1, [r7, #16]
 8000dea:	6978      	ldr	r0, [r7, #20]
 8000dec:	f7ff ff2a 	bl	8000c44 <_ZL12uart_managerPhS_>
 8000df0:	60f8      	str	r0, [r7, #12]
    if (res < 0)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	db08      	blt.n	8000e0a <HAL_UARTEx_RxEventCallback+0x46>
      break;
    p += res;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	697a      	ldr	r2, [r7, #20]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	617b      	str	r3, [r7, #20]
  for (auto* p = rx_buf; p < end; )
 8000e00:	697a      	ldr	r2, [r7, #20]
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d3ef      	bcc.n	8000de8 <HAL_UARTEx_RxEventCallback+0x24>
 8000e08:	e000      	b.n	8000e0c <HAL_UARTEx_RxEventCallback+0x48>
      break;
 8000e0a:	bf00      	nop
  }

  uart_receive_start();
 8000e0c:	f000 f80a 	bl	8000e24 <_ZL18uart_receive_startv>
 8000e10:	e000      	b.n	8000e14 <HAL_UARTEx_RxEventCallback+0x50>
    return;
 8000e12:	bf00      	nop
}
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000004 	.word	0x20000004
 8000e20:	2000019c 	.word	0x2000019c

08000e24 <_ZL18uart_receive_startv>:

static void uart_receive_start()
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  HAL_UARTEx_ReceiveToIdle_DMA(huart_reg, rx_buf, sizeof(rx_buf)/sizeof(*rx_buf));
 8000e28:	4b09      	ldr	r3, [pc, #36]	@ (8000e50 <_ZL18uart_receive_startv+0x2c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f44f 7202 	mov.w	r2, #520	@ 0x208
 8000e30:	4908      	ldr	r1, [pc, #32]	@ (8000e54 <_ZL18uart_receive_startv+0x30>)
 8000e32:	4618      	mov	r0, r3
 8000e34:	f004 fef8 	bl	8005c28 <HAL_UARTEx_ReceiveToIdle_DMA>
  hdma_rx->Instance->CCR &= ~DMA_CCR_HTIE;
 8000e38:	4b07      	ldr	r3, [pc, #28]	@ (8000e58 <_ZL18uart_receive_startv+0x34>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	4b05      	ldr	r3, [pc, #20]	@ (8000e58 <_ZL18uart_receive_startv+0x34>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f022 0204 	bic.w	r2, r2, #4
 8000e4a:	601a      	str	r2, [r3, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000004 	.word	0x20000004
 8000e54:	2000019c 	.word	0x2000019c
 8000e58:	20000008 	.word	0x20000008

08000e5c <_ZL16reg_read_handlerPhj>:

static void reg_read_handler(uint8_t* data, size_t size)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
  if (size != 4)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	2b04      	cmp	r3, #4
 8000e6a:	d10e      	bne.n	8000e8a <_ZL16reg_read_handlerPhj+0x2e>
    return;

  uint32_t addr = *(uint32_t*)data;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	617b      	str	r3, [r7, #20]
  volatile uint32_t* reg = (volatile uint32_t*)addr;
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	613b      	str	r3, [r7, #16]
  uint32_t value = *reg;
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	60fb      	str	r3, [r7, #12]
  uart_transmit((uint8_t*)&value, 4);
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	2104      	movs	r1, #4
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fe4a 	bl	8000b1c <uart_transmit>
 8000e88:	e000      	b.n	8000e8c <_ZL16reg_read_handlerPhj+0x30>
    return;
 8000e8a:	bf00      	nop
}
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <_ZL17reg_write_handlerPhj>:

static void reg_write_handler(uint8_t* data, size_t size)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b087      	sub	sp, #28
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
 8000e9a:	6039      	str	r1, [r7, #0]
  if (size != 12)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	2b0c      	cmp	r3, #12
 8000ea0:	d114      	bne.n	8000ecc <_ZL17reg_write_handlerPhj+0x3a>
    return;

  uint32_t addr = *(uint32_t*)data;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	617b      	str	r3, [r7, #20]
  volatile uint32_t* reg = (volatile uint32_t*)addr;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	613b      	str	r3, [r7, #16]
  uint32_t value = *(uint32_t*)(data+4);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	60fb      	str	r3, [r7, #12]
  uint32_t mask = *(uint32_t*)(data+8);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	60bb      	str	r3, [r7, #8]

  *reg = (*reg & ~mask) | value;
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	401a      	ands	r2, r3
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	e000      	b.n	8000ece <_ZL17reg_write_handlerPhj+0x3c>
    return;
 8000ecc:	bf00      	nop
}
 8000ece:	371c      	adds	r7, #28
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f000 f8f2 	bl	80010ca <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEC1Ev>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 f8fa 	bl	80010e2 <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fdd7 	bl	8000aa6 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f000 f8f4 	bl	80010f8 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEED1Ev>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f000 f913 	bl	800114e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f000 f8ee 	bl	800110e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fe33 	bl	8000ba0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EED1Ev>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEEixEOS5_>:
	return (*__i).second;
      }

#if __cplusplus >= 201103L
      mapped_type&
      operator[](key_type&& __k)
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b08b      	sub	sp, #44	@ 0x2c
 8000f48:	af02      	add	r7, sp, #8
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
      {
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
 8000f4e:	6839      	ldr	r1, [r7, #0]
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f000 f908 	bl	8001166 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE11lower_boundERSC_>
 8000f56:	4603      	mov	r3, r0
 8000f58:	60bb      	str	r3, [r7, #8]
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f000 f886 	bl	800106c <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE3endEv>
 8000f60:	4603      	mov	r3, r0
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	f107 020c 	add.w	r2, r7, #12
 8000f68:	f107 0308 	add.w	r3, r7, #8
 8000f6c:	4611      	mov	r1, r2
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 f908 	bl	8001184 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d112      	bne.n	8000fa0 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEEixEOS5_+0x5c>
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 f916 	bl	80011ac <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE8key_compEv>
 8000f80:	f107 0308 	add.w	r3, r7, #8
 8000f84:	4618      	mov	r0, r3
 8000f86:	f000 f91e 	bl	80011c6 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEdeEv>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	f107 0310 	add.w	r3, r7, #16
 8000f92:	6839      	ldr	r1, [r7, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 f924 	bl	80011e2 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEEixEOS5_+0x60>
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e000      	b.n	8000fa6 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEEixEOS5_+0x62>
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d01f      	beq.n	8000fea <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEEixEOS5_+0xa6>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8000faa:	687c      	ldr	r4, [r7, #4]
 8000fac:	f107 0208 	add.w	r2, r7, #8
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 f94e 	bl	8001258 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEC1ERKSt17_Rb_tree_iteratorISB_E>
					std::forward_as_tuple(std::move(__k)),
 8000fbc:	6838      	ldr	r0, [r7, #0]
 8000fbe:	f000 f91f 	bl	8001200 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8000fc2:	4602      	mov	r2, r0
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8000fc4:	f107 0318 	add.w	r3, r7, #24
 8000fc8:	4611      	mov	r1, r2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 f933 	bl	8001236 <_ZSt16forward_as_tupleIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt5tupleIJDpOT_EES9_>
 8000fd0:	f107 0218 	add.w	r2, r7, #24
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	4a08      	ldr	r2, [pc, #32]	@ (8001000 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEEixEOS5_+0xbc>)
 8000fde:	6979      	ldr	r1, [r7, #20]
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	f000 f949 	bl	8001278 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	60bb      	str	r3, [r7, #8]
					std::tuple<>());
	return (*__i).second;
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f8e9 	bl	80011c6 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEdeEv>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	3318      	adds	r3, #24
      }
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3724      	adds	r7, #36	@ 0x24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd90      	pop	{r4, r7, pc}
 8001000:	08006464 	.word	0x08006464

08001004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPhvEET_S7_RKS3_>:
	       typename = std::_RequireInputIter<_InputIterator>>
#else
      template<typename _InputIterator>
#endif
	_GLIBCXX20_CONSTEXPR
        basic_string(_InputIterator __beg, _InputIterator __end,
 8001004:	b5b0      	push	{r4, r5, r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	603b      	str	r3, [r7, #0]
		     const _Alloc& __a = _Alloc())
	: _M_dataplus(_M_local_data(), __a), _M_string_length(0)
 8001012:	68fc      	ldr	r4, [r7, #12]
 8001014:	68f8      	ldr	r0, [r7, #12]
 8001016:	f004 ff94 	bl	8005f42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 800101a:	4603      	mov	r3, r0
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	4619      	mov	r1, r3
 8001020:	4620      	mov	r0, r4
 8001022:	f005 f80e 	bl	8006042 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2200      	movs	r2, #0
 800102a:	605a      	str	r2, [r3, #4]
	{
#if __cplusplus >= 201103L
	  _M_construct(__beg, __end, std::__iterator_category(__beg));
 800102c:	68bc      	ldr	r4, [r7, #8]
 800102e:	f107 0308 	add.w	r3, r7, #8
 8001032:	4618      	mov	r0, r3
 8001034:	f000 f966 	bl	8001304 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 8001038:	462b      	mov	r3, r5
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	4621      	mov	r1, r4
 800103e:	68f8      	ldr	r0, [r7, #12]
 8001040:	f000 f98c 	bl	800135c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tag>
#else
	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
	  _M_construct_aux(__beg, __end, _Integral());
#endif
	}
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4618      	mov	r0, r3
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bdb0      	pop	{r4, r5, r7, pc}

0800104e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE4findERSC_>:
       *  pointing to the sought after %pair.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */

      iterator
      find(const key_type& __x)
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
 8001056:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6839      	ldr	r1, [r7, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f000 f9c3 	bl	80013e8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_>
 8001062:	4603      	mov	r3, r0
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f9f2 	bl	8001460 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>
 800107c:	4603      	mov	r3, r0
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
 800108e:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	429a      	cmp	r2, r3
 800109a:	bf14      	ite	ne
 800109c:	2301      	movne	r3, #1
 800109e:	2300      	moveq	r3, #0
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	4618      	mov	r0, r3
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 f9e1 	bl	8001482 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f000 f9e3 	bl	800149e <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEC1Ev>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>:
      _Rb_tree_key_compare()
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
      { }
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800110e:	b580      	push	{r7, lr}
 8001110:	b084      	sub	sp, #16
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 8001118:	e011      	b.n	800113e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x30>
	{
	  _M_erase(_S_right(__x));
 800111a:	6838      	ldr	r0, [r7, #0]
 800111c:	f000 f9ca 	bl	80014b4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001120:	4603      	mov	r3, r0
 8001122:	4619      	mov	r1, r3
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff fff2 	bl	800110e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>
	  _Link_type __y = _S_left(__x);
 800112a:	6838      	ldr	r0, [r7, #0]
 800112c:	f000 f9ce 	bl	80014cc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001130:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8001132:	6839      	ldr	r1, [r7, #0]
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f000 f9d5 	bl	80014e4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISB_E>
	  __x = __y;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1ea      	bne.n	800111a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0xc>
	}
    }
 8001144:	bf00      	nop
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
      { return _M_mbegin(); }
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f000 f9d5 	bl	8001506 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE9_M_mbeginEv>
 800115c:	4603      	mov	r3, r0
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE11lower_boundERSC_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6839      	ldr	r1, [r7, #0]
 8001174:	4618      	mov	r0, r3
 8001176:	f000 f9d2 	bl	800151e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11lower_boundERS7_>
 800117a:	4603      	mov	r3, r0
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	429a      	cmp	r2, r3
 8001198:	bf0c      	ite	eq
 800119a:	2301      	moveq	r3, #1
 800119c:	2300      	movne	r3, #0
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	4618      	mov	r0, r3
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE8key_compEv>:
      key_comp() const
 80011ac:	b590      	push	{r4, r7, lr}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 f9c8 	bl	800154c <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8key_compEv>
 80011bc:	bf00      	nop
 80011be:	4620      	mov	r0, r4
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd90      	pop	{r4, r7, pc}

080011c6 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 f955 	bl	8001482 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>
 80011d8:	4603      	mov	r3, r0
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b084      	sub	sp, #16
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	60f8      	str	r0, [r7, #12]
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	68b8      	ldr	r0, [r7, #8]
 80011f2:	f000 f9b6 	bl	8001562 <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>
 80011f6:	4603      	mov	r3, r0
 80011f8:	4618      	mov	r0, r3
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4618      	mov	r0, r3
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <_ZNSt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS7_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
 800121e:	6039      	str	r1, [r7, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f000 f9c9 	bl	80015be <_ZNSt11_Tuple_implILj0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS7_>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <_ZSt16forward_as_tupleIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt5tupleIJDpOT_EES9_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	6039      	str	r1, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 8001240:	6838      	ldr	r0, [r7, #0]
 8001242:	f000 f99e 	bl	8001582 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001246:	4603      	mov	r3, r0
 8001248:	4619      	mov	r1, r3
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f000 f9a4 	bl	8001598 <_ZNSt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IJS5_ELb1ELb1EEEDpOT_>
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEC1ERKSt17_Rb_tree_iteratorISB_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4618      	mov	r0, r3
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      auto
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001278:	b5b0      	push	{r4, r5, r7, lr}
 800127a:	b08c      	sub	sp, #48	@ 0x30
 800127c:	af02      	add	r7, sp, #8
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
 8001284:	603b      	str	r3, [r7, #0]
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      -> iterator
      {
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 f9a9 	bl	80015de <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800128c:	4604      	mov	r4, r0
 800128e:	6838      	ldr	r0, [r7, #0]
 8001290:	f000 f9b0 	bl	80015f4 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8001294:	4605      	mov	r5, r0
 8001296:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001298:	f000 f9b7 	bl	800160a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800129c:	4603      	mov	r3, r0
 800129e:	f107 001c 	add.w	r0, r7, #28
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	462b      	mov	r3, r5
 80012a6:	4622      	mov	r2, r4
 80012a8:	68f9      	ldr	r1, [r7, #12]
 80012aa:	f000 f9b9 	bl	8001620 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJOS5_EESN_IJEEEEERSH_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 80012ae:	f107 031c 	add.w	r3, r7, #28
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 fb0f 	bl	80018d6 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE10_Auto_node6_M_keyEv>
 80012b8:	4603      	mov	r3, r0
 80012ba:	f107 0014 	add.w	r0, r7, #20
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	68f9      	ldr	r1, [r7, #12]
 80012c2:	f000 f9e5 	bl	8001690 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_>
	if (__res.second)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d009      	beq.n	80012e0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x68>
	  return __z._M_insert(__res);
 80012cc:	f107 001c 	add.w	r0, r7, #28
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80012d8:	f000 fb0b 	bl	80018f2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE10_Auto_node9_M_insertES6_IPSt18_Rb_tree_node_baseSK_E>
 80012dc:	4604      	mov	r4, r0
 80012de:	e007      	b.n	80012f0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x78>
	return iterator(__res.first);
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e6:	4611      	mov	r1, r2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 fb1b 	bl	8001924 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEC1EPSt18_Rb_tree_node_base>
 80012ee:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
      }
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 f9b6 	bl	8001666 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE10_Auto_nodeD1Ev>
 80012fa:	4623      	mov	r3, r4
 80012fc:	4618      	mov	r0, r3
 80012fe:	3728      	adds	r7, #40	@ 0x28
 8001300:	46bd      	mov	sp, r7
 8001302:	bdb0      	pop	{r4, r5, r7, pc}

08001304 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800130c:	bf00      	nop
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardC1EPS4_>:

	// Check for out_of_range and length_error exceptions.
	struct _Guard
	{
	  _GLIBCXX20_CONSTEXPR
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
 8001322:	6039      	str	r1, [r7, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4618      	mov	r0, r3
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardD1Ev>:

	  _GLIBCXX20_CONSTEXPR
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d004      	beq.n	8001352 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardD1Ev+0x1a>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f004 fe29 	bl	8005fa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
 8001368:	703b      	strb	r3, [r7, #0]
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	68b8      	ldr	r0, [r7, #8]
 800136e:	f000 fae8 	bl	8001942 <_ZSt8distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8001372:	4603      	mov	r3, r0
 8001374:	61bb      	str	r3, [r7, #24]
	if (__dnew > size_type(_S_local_capacity))
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	2b0f      	cmp	r3, #15
 800137a:	d911      	bls.n	80013a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tag+0x44>
	    _M_data(_M_create(__dnew, size_type(0)));
 800137c:	f107 0318 	add.w	r3, r7, #24
 8001380:	2200      	movs	r2, #0
 8001382:	4619      	mov	r1, r3
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	f004 fdeb 	bl	8005f60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800138a:	4603      	mov	r3, r0
 800138c:	4619      	mov	r1, r3
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f004 fdd3 	bl	8005f3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	4619      	mov	r1, r3
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f004 fdd4 	bl	8005f46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
 800139e:	e005      	b.n	80013ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tag+0x50>
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	61fb      	str	r3, [r7, #28]
	return _M_local_data();
 80013a4:	69f8      	ldr	r0, [r7, #28]
 80013a6:	f004 fdcc 	bl	8005f42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80013aa:	bf00      	nop

	  basic_string* _M_guarded;
	} __guard(this);
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	68f9      	ldr	r1, [r7, #12]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ffb1 	bl	800131a <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardC1EPS4_>

	this->_S_copy_chars(_M_data(), __beg, __end);
 80013b8:	68f8      	ldr	r0, [r7, #12]
 80013ba:	f004 fdc0 	bl	8005f3e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80013be:	4603      	mov	r3, r0
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	68b9      	ldr	r1, [r7, #8]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f000 fad0 	bl	800196a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIPhEEvPcT_S8_>

	__guard._M_guarded = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]

	_M_set_length(__dnew);
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	4619      	mov	r1, r3
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f004 fdb9 	bl	8005f4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ffab 	bl	8001338 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardD1Ev>
 80013e2:	3720      	adds	r7, #32
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80013e8:	b590      	push	{r4, r7, lr}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff feab 	bl	800114e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv>
 80013f8:	4604      	mov	r4, r0
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 fad4 	bl	80019a8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_M_endEv>
 8001400:	4602      	mov	r2, r0
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	4621      	mov	r1, r4
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 fada 	bl	80019c0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_>
 800140c:	4603      	mov	r3, r0
 800140e:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 f825 	bl	8001460 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>
 8001416:	4603      	mov	r3, r0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	f107 020c 	add.w	r2, r7, #12
 800141e:	f107 0308 	add.w	r3, r7, #8
 8001422:	4611      	mov	r1, r2
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fead 	bl	8001184 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>
 800142a:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 800142c:	2b00      	cmp	r3, #0
 800142e:	d10d      	bne.n	800144c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_+0x64>
	      || _M_impl._M_key_compare(__k,
 8001430:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 8001432:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 8001434:	4618      	mov	r0, r3
 8001436:	f000 faf4 	bl	8001a22 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	6839      	ldr	r1, [r7, #0]
 8001440:	4620      	mov	r0, r4
 8001442:	f7ff fece 	bl	80011e2 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d004      	beq.n	8001456 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 f807 	bl	8001460 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>
 8001452:	4603      	mov	r3, r0
 8001454:	e000      	b.n	8001458 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_+0x70>
 8001456:	68bb      	ldr	r3, [r7, #8]
    }
 8001458:	4618      	mov	r0, r3
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	bd90      	pop	{r4, r7, pc}

08001460 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	1d1a      	adds	r2, r3, #4
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	4611      	mov	r1, r2
 8001472:	4618      	mov	r0, r3
 8001474:	f000 fa56 	bl	8001924 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEC1EPSt18_Rb_tree_node_base>
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4618      	mov	r0, r3
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>:
      _M_valptr()
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3310      	adds	r3, #16
 800148e:	4618      	mov	r0, r3
 8001490:	f000 fad3 	bl	8001a3a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE6_M_ptrEv>
 8001494:	4603      	mov	r3, r0
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4618      	mov	r0, r3
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISB_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80014ee:	6839      	ldr	r1, [r7, #0]
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f000 faae 	bl	8001a52 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISB_E>
	_M_put_node(__p);
 80014f6:	6839      	ldr	r1, [r7, #0]
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 fabf 	bl	8001a7c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_put_nodeEPSt13_Rb_tree_nodeISB_E>
      }
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE9_M_mbeginEv>:
      _M_mbegin() const _GLIBCXX_NOEXCEPT
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	4618      	mov	r0, r3
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11lower_boundERS7_>:
      lower_bound(const key_type& __k)
 800151e:	b590      	push	{r4, r7, lr}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff fe10 	bl	800114e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv>
 800152e:	4604      	mov	r4, r0
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 fa39 	bl	80019a8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_M_endEv>
 8001536:	4602      	mov	r2, r0
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	4621      	mov	r1, r4
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f000 fa3f 	bl	80019c0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_>
 8001542:	4603      	mov	r3, r0
 8001544:	4618      	mov	r0, r3
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	bd90      	pop	{r4, r7, pc}

0800154c <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8key_compEv>:
      key_comp() const
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8001554:	bf00      	nop
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>:
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	6039      	str	r1, [r7, #0]
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.compare(__rhs) < 0; }
 800156c:	6839      	ldr	r1, [r7, #0]
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f004 fd59 	bl	8006026 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 8001574:	4603      	mov	r3, r0
 8001576:	0fdb      	lsrs	r3, r3, #31
 8001578:	b2db      	uxtb	r3, r3
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <_ZNSt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IJS5_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 8001598:	b590      	push	{r4, r7, lr}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 80015a2:	687c      	ldr	r4, [r7, #4]
 80015a4:	6838      	ldr	r0, [r7, #0]
 80015a6:	f7ff ffec 	bl	8001582 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80015aa:	4603      	mov	r3, r0
 80015ac:	4619      	mov	r1, r3
 80015ae:	4620      	mov	r0, r4
 80015b0:	f000 fa76 	bl	8001aa0 <_ZNSt11_Tuple_implILj0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IS5_EEOT_>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd90      	pop	{r4, r7, pc}

080015be <_ZNSt11_Tuple_implILj0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS7_>:
      _Tuple_impl(_Tuple_impl&& __in)
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	6812      	ldr	r2, [r2, #0]
 80015ce:	601a      	str	r2, [r3, #0]
      { }
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJOS5_EESN_IJEEEEERSH_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 8001620:	b5b0      	push	{r4, r5, r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
 800162c:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff ffd2 	bl	80015de <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800163a:	4604      	mov	r4, r0
 800163c:	6838      	ldr	r0, [r7, #0]
 800163e:	f7ff ffd9 	bl	80015f4 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8001642:	4605      	mov	r5, r0
 8001644:	6a38      	ldr	r0, [r7, #32]
 8001646:	f7ff ffe0 	bl	800160a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800164a:	4603      	mov	r3, r0
 800164c:	462a      	mov	r2, r5
 800164e:	4621      	mov	r1, r4
 8001650:	68b8      	ldr	r0, [r7, #8]
 8001652:	f000 fa38 	bl	8001ac6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEEPSt13_Rb_tree_nodeISB_EDpOT_>
 8001656:	4602      	mov	r2, r0
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	605a      	str	r2, [r3, #4]
	  { }
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bdb0      	pop	{r4, r5, r7, pc}

08001666 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE10_Auto_nodeD1Ev>:
	~_Auto_node()
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
	  if (_M_node)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d007      	beq.n	8001686 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE10_Auto_nodeD1Ev+0x20>
	    _M_t._M_drop_node(_M_node);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	4619      	mov	r1, r3
 8001680:	4610      	mov	r0, r2
 8001682:	f7ff ff2f 	bl	80014e4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISB_E>
	}
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b08d      	sub	sp, #52	@ 0x34
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	4618      	mov	r0, r3
 80016a2:	f000 fa33 	bl	8001b0c <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE13_M_const_castEv>
 80016a6:	4603      	mov	r3, r0
 80016a8:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 80016aa:	69bc      	ldr	r4, [r7, #24]
 80016ac:	68b8      	ldr	r0, [r7, #8]
 80016ae:	f000 f97b 	bl	80019a8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_M_endEv>
 80016b2:	4603      	mov	r3, r0
 80016b4:	429c      	cmp	r4, r3
 80016b6:	bf0c      	ite	eq
 80016b8:	2301      	moveq	r3, #1
 80016ba:	2300      	movne	r3, #0
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d030      	beq.n	8001724 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x94>
	  if (size() > 0
 80016c2:	68b8      	ldr	r0, [r7, #8]
 80016c4:	f000 fa33 	bl	8001b2e <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4sizeEv>
 80016c8:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d013      	beq.n	80016f6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x66>
 80016ce:	68bc      	ldr	r4, [r7, #8]
 80016d0:	68b8      	ldr	r0, [r7, #8]
 80016d2:	f000 fa38 	bl	8001b46 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_rightmostEv>
 80016d6:	4603      	mov	r3, r0
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 f9a1 	bl	8001a22 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80016e0:	4603      	mov	r3, r0
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	4619      	mov	r1, r3
 80016e6:	4620      	mov	r0, r4
 80016e8:	f7ff fd7b 	bl	80011e2 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x66>
 80016f2:	2301      	movs	r3, #1
 80016f4:	e000      	b.n	80016f8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x68>
 80016f6:	2300      	movs	r3, #0
	  if (size() > 0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00c      	beq.n	8001716 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x86>
	    return _Res(0, _M_rightmost());
 80016fc:	2300      	movs	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]
 8001700:	68b8      	ldr	r0, [r7, #8]
 8001702:	f000 fa20 	bl	8001b46 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_rightmostEv>
 8001706:	4602      	mov	r2, r0
 8001708:	f107 031c 	add.w	r3, r7, #28
 800170c:	4619      	mov	r1, r3
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f000 fa25 	bl	8001b5e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8001714:	e0db      	b.n	80018ce <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	68b9      	ldr	r1, [r7, #8]
 800171c:	4618      	mov	r0, r3
 800171e:	f000 fa33 	bl	8001b88 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_>
 8001722:	e0d4      	b.n	80018ce <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8001724:	68bc      	ldr	r4, [r7, #8]
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	4618      	mov	r0, r3
 800172a:	f000 f97a 	bl	8001a22 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800172e:	4603      	mov	r3, r0
 8001730:	461a      	mov	r2, r3
 8001732:	6839      	ldr	r1, [r7, #0]
 8001734:	4620      	mov	r0, r4
 8001736:	f7ff fd54 	bl	80011e2 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d057      	beq.n	80017f0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x160>
	  iterator __before = __pos;
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8001744:	69bc      	ldr	r4, [r7, #24]
 8001746:	68b8      	ldr	r0, [r7, #8]
 8001748:	f000 faa3 	bl	8001c92 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_leftmostEv>
 800174c:	4603      	mov	r3, r0
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	429c      	cmp	r4, r3
 8001752:	bf0c      	ite	eq
 8001754:	2301      	moveq	r3, #1
 8001756:	2300      	movne	r3, #0
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00d      	beq.n	800177a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 800175e:	68b8      	ldr	r0, [r7, #8]
 8001760:	f000 fa97 	bl	8001c92 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_leftmostEv>
 8001764:	4604      	mov	r4, r0
 8001766:	68b8      	ldr	r0, [r7, #8]
 8001768:	f000 fa93 	bl	8001c92 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_leftmostEv>
 800176c:	4603      	mov	r3, r0
 800176e:	461a      	mov	r2, r3
 8001770:	4621      	mov	r1, r4
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	f000 fa99 	bl	8001caa <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001778:	e0a9      	b.n	80018ce <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 800177a:	68bc      	ldr	r4, [r7, #8]
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	4618      	mov	r0, r3
 8001782:	f000 faab 	bl	8001cdc <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEmmEv>
 8001786:	4603      	mov	r3, r0
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f000 f949 	bl	8001a22 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001790:	4603      	mov	r3, r0
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	4619      	mov	r1, r3
 8001796:	4620      	mov	r0, r4
 8001798:	f7ff fd23 	bl	80011e2 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d01f      	beq.n	80017e2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x152>
	      if (_S_right(__before._M_node) == 0)
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fe85 	bl	80014b4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	bf0c      	ite	eq
 80017b0:	2301      	moveq	r3, #1
 80017b2:	2300      	movne	r3, #0
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00a      	beq.n	80017d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x140>
		return _Res(0, __before._M_node);
 80017ba:	2300      	movs	r3, #0
 80017bc:	623b      	str	r3, [r7, #32]
 80017be:	f107 0214 	add.w	r2, r7, #20
 80017c2:	f107 0320 	add.w	r3, r7, #32
 80017c6:	4619      	mov	r1, r3
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f000 f9c8 	bl	8001b5e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 80017ce:	e07e      	b.n	80018ce <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 80017d0:	f107 0218 	add.w	r2, r7, #24
 80017d4:	f107 0318 	add.w	r3, r7, #24
 80017d8:	4619      	mov	r1, r3
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f000 fa65 	bl	8001caa <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80017e0:	e075      	b.n	80018ce <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	68b9      	ldr	r1, [r7, #8]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f000 f9cd 	bl	8001b88 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_>
 80017ee:	e06e      	b.n	80018ce <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 80017f0:	68bc      	ldr	r4, [r7, #8]
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f000 f914 	bl	8001a22 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80017fa:	4603      	mov	r3, r0
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	4619      	mov	r1, r3
 8001800:	4620      	mov	r0, r4
 8001802:	f7ff fcee 	bl	80011e2 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d056      	beq.n	80018ba <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x22a>
	  iterator __after = __pos;
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8001810:	69bc      	ldr	r4, [r7, #24]
 8001812:	68b8      	ldr	r0, [r7, #8]
 8001814:	f000 f997 	bl	8001b46 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_rightmostEv>
 8001818:	4603      	mov	r3, r0
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	429c      	cmp	r4, r3
 800181e:	bf0c      	ite	eq
 8001820:	2301      	moveq	r3, #1
 8001822:	2300      	movne	r3, #0
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00c      	beq.n	8001844 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x1b4>
	    return _Res(0, _M_rightmost());
 800182a:	2300      	movs	r3, #0
 800182c:	627b      	str	r3, [r7, #36]	@ 0x24
 800182e:	68b8      	ldr	r0, [r7, #8]
 8001830:	f000 f989 	bl	8001b46 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_rightmostEv>
 8001834:	4602      	mov	r2, r0
 8001836:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800183a:	4619      	mov	r1, r3
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f000 f98e 	bl	8001b5e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8001842:	e044      	b.n	80018ce <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8001844:	68bc      	ldr	r4, [r7, #8]
 8001846:	f107 0310 	add.w	r3, r7, #16
 800184a:	4618      	mov	r0, r3
 800184c:	f000 fa57 	bl	8001cfe <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEppEv>
 8001850:	4603      	mov	r3, r0
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f000 f8e4 	bl	8001a22 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800185a:	4603      	mov	r3, r0
 800185c:	461a      	mov	r2, r3
 800185e:	6839      	ldr	r1, [r7, #0]
 8001860:	4620      	mov	r0, r4
 8001862:	f7ff fcbe 	bl	80011e2 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d01f      	beq.n	80018ac <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fe20 	bl	80014b4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	bf0c      	ite	eq
 800187a:	2301      	moveq	r3, #1
 800187c:	2300      	movne	r3, #0
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00a      	beq.n	800189a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x20a>
		return _Res(0, __pos._M_node);
 8001884:	2300      	movs	r3, #0
 8001886:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001888:	f107 0218 	add.w	r2, r7, #24
 800188c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001890:	4619      	mov	r1, r3
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 f963 	bl	8001b5e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8001898:	e019      	b.n	80018ce <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 800189a:	f107 0210 	add.w	r2, r7, #16
 800189e:	f107 0310 	add.w	r3, r7, #16
 80018a2:	4619      	mov	r1, r3
 80018a4:	68f8      	ldr	r0, [r7, #12]
 80018a6:	f000 fa00 	bl	8001caa <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80018aa:	e010      	b.n	80018ce <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	68b9      	ldr	r1, [r7, #8]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 f968 	bl	8001b88 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_>
 80018b8:	e009      	b.n	80018ce <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x23e>
	return _Res(__pos._M_node, 0);
 80018ba:	2300      	movs	r3, #0
 80018bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018be:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80018c2:	f107 0318 	add.w	r3, r7, #24
 80018c6:	4619      	mov	r1, r3
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f000 f948 	bl	8001b5e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	3734      	adds	r7, #52	@ 0x34
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd90      	pop	{r4, r7, pc}

080018d6 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE10_Auto_node6_M_keyEv>:
	_M_key() const
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
	{ return _S_key(_M_node); }
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 fa1c 	bl	8001d20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>
 80018e8:	4603      	mov	r3, r0
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE10_Auto_node9_M_insertES6_IPSt18_Rb_tree_node_baseSK_E>:
	_M_insert(pair<_Base_ptr, _Base_ptr> __p)
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	60f8      	str	r0, [r7, #12]
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	e883 0006 	stmia.w	r3, {r1, r2}
	  auto __it = _M_t._M_insert_node(__p.first, __p.second, _M_node);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6818      	ldr	r0, [r3, #0]
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	68ba      	ldr	r2, [r7, #8]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f000 fa1b 	bl	8001d46 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSJ_PSt13_Rb_tree_nodeISB_E>
 8001910:	4603      	mov	r3, r0
 8001912:	617b      	str	r3, [r7, #20]
	  _M_node = nullptr;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	605a      	str	r2, [r3, #4]
	  return __it;
 800191a:	697b      	ldr	r3, [r7, #20]
	}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4618      	mov	r0, r3
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <_ZSt8distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8001942:	b5b0      	push	{r4, r5, r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
 800194a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800194c:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fcd7 	bl	8001304 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 8001956:	462a      	mov	r2, r5
 8001958:	6839      	ldr	r1, [r7, #0]
 800195a:	4620      	mov	r0, r4
 800195c:	f000 fa30 	bl	8001dc0 <_ZSt10__distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8001960:	4603      	mov	r3, r0
    }
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bdb0      	pop	{r4, r5, r7, pc}

0800196a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIPhEEvPcT_S8_>:
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
 800196a:	b580      	push	{r7, lr}
 800196c:	b086      	sub	sp, #24
 800196e:	af00      	add	r7, sp, #0
 8001970:	60f8      	str	r0, [r7, #12]
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
	  for (; __k1 != __k2; ++__k1, (void)++__p)
 8001976:	e00e      	b.n	8001996 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIPhEEvPcT_S8_+0x2c>
	    traits_type::assign(*__p, *__k1); // These types are off.
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	75fb      	strb	r3, [r7, #23]
 800197e:	f107 0317 	add.w	r3, r7, #23
 8001982:	4619      	mov	r1, r3
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f7ff f873 	bl	8000a70 <_ZNSt11char_traitsIcE6assignERcRKc>
	  for (; __k1 != __k2; ++__k1, (void)++__p)
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	3301      	adds	r3, #1
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	3301      	adds	r3, #1
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	429a      	cmp	r2, r3
 800199c:	d1ec      	bne.n	8001978 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIPhEEvPcT_S8_+0xe>
	}
 800199e:	bf00      	nop
 80019a0:	bf00      	nop
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3304      	adds	r3, #4
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80019c0:	b590      	push	{r4, r7, lr}
 80019c2:	b087      	sub	sp, #28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
 80019cc:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80019ce:	e01a      	b.n	8001a06 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x46>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80019d0:	68fc      	ldr	r4, [r7, #12]
 80019d2:	68b8      	ldr	r0, [r7, #8]
 80019d4:	f000 f9a4 	bl	8001d20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>
 80019d8:	4603      	mov	r3, r0
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	4619      	mov	r1, r3
 80019de:	4620      	mov	r0, r4
 80019e0:	f7ff fbff 	bl	80011e2 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80019e4:	4603      	mov	r3, r0
 80019e6:	f083 0301 	eor.w	r3, r3, #1
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d006      	beq.n	80019fe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x3e>
	  __y = __x, __x = _S_left(__x);
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	68b8      	ldr	r0, [r7, #8]
 80019f6:	f7ff fd69 	bl	80014cc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_S_leftEPSt18_Rb_tree_node_base>
 80019fa:	60b8      	str	r0, [r7, #8]
 80019fc:	e003      	b.n	8001a06 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x46>
	  __x = _S_right(__x);
 80019fe:	68b8      	ldr	r0, [r7, #8]
 8001a00:	f7ff fd58 	bl	80014b4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001a04:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1e1      	bne.n	80019d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x10>
      return iterator(__y);
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff ff86 	bl	8001924 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEC1EPSt18_Rb_tree_node_base>
 8001a18:	697b      	ldr	r3, [r7, #20]
    }
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	371c      	adds	r7, #28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd90      	pop	{r4, r7, pc}

08001a22 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f978 	bl	8001d20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>
 8001a30:	4603      	mov	r3, r0
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f9cb 	bl	8001dde <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE7_M_addrEv>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISB_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001a52:	b590      	push	{r4, r7, lr}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
 8001a5a:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f9c9 	bl	8001df4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv>
 8001a62:	4604      	mov	r4, r0
 8001a64:	6838      	ldr	r0, [r7, #0]
 8001a66:	f7ff fd0c 	bl	8001482 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4620      	mov	r0, r4
 8001a70:	f000 f9cb 	bl	8001e0a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE7destroyISC_EEvRSE_PT_>
      }
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd90      	pop	{r4, r7, pc}

08001a7c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_put_nodeEPSt13_Rb_tree_nodeISB_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 f9b4 	bl	8001df4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2201      	movs	r2, #1
 8001a90:	6839      	ldr	r1, [r7, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 f9c6 	bl	8001e24 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE10deallocateERSE_PSD_j>
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <_ZNSt11_Tuple_implILj0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IS5_EEOT_>:
	_Tuple_impl(_UHead&& __head)
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 8001aaa:	687c      	ldr	r4, [r7, #4]
 8001aac:	6838      	ldr	r0, [r7, #0]
 8001aae:	f7ff fd68 	bl	8001582 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	f000 f9c3 	bl	8001e42 <_ZNSt10_Head_baseILj0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IS5_EEOT_>
	{ }
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd90      	pop	{r4, r7, pc}

08001ac6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEEPSt13_Rb_tree_nodeISB_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8001ac6:	b5b0      	push	{r4, r5, r7, lr}
 8001ac8:	b088      	sub	sp, #32
 8001aca:	af02      	add	r7, sp, #8
 8001acc:	60f8      	str	r0, [r7, #12]
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
 8001ad2:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f000 f9c4 	bl	8001e62 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_get_nodeEv>
 8001ada:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8001adc:	68b8      	ldr	r0, [r7, #8]
 8001ade:	f7ff fd7e 	bl	80015de <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001ae2:	4604      	mov	r4, r0
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff fd85 	bl	80015f4 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8001aea:	4605      	mov	r5, r0
 8001aec:	6838      	ldr	r0, [r7, #0]
 8001aee:	f7ff fd8c 	bl	800160a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001af2:	4603      	mov	r3, r0
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	462b      	mov	r3, r5
 8001af8:	4622      	mov	r2, r4
 8001afa:	6979      	ldr	r1, [r7, #20]
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f000 f9c1 	bl	8001e84 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEEvPSt13_Rb_tree_nodeISB_EDpOT_>
	  return __tmp;
 8001b02:	697b      	ldr	r3, [r7, #20]
	}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bdb0      	pop	{r4, r5, r7, pc}

08001b0c <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	4611      	mov	r1, r2
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff ff00 	bl	8001924 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEC1EPSt18_Rb_tree_node_base>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3310      	adds	r3, #16
 8001b52:	4618      	mov	r0, r3
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>:
	       enable_if<_PCCP::template
			   _ConstructiblePair<_U1, _U2>()
	                 && _PCCP::template
			   _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
      constexpr pair(const _T1& __a, const _T2& __b)
 8001b5e:	b480      	push	{r7}
 8001b60:	b085      	sub	sp, #20
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	60f8      	str	r0, [r7, #12]
 8001b66:	60b9      	str	r1, [r7, #8]
 8001b68:	607a      	str	r2, [r7, #4]
      : first(__a), second(__b) { }
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001b88:	b590      	push	{r4, r7, lr}
 8001b8a:	b08b      	sub	sp, #44	@ 0x2c
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8001b94:	68b8      	ldr	r0, [r7, #8]
 8001b96:	f7ff fada 	bl	800114e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8001b9e:	68b8      	ldr	r0, [r7, #8]
 8001ba0:	f7ff ff02 	bl	80019a8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_M_endEv>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      while (__x != 0)
 8001bae:	e01f      	b.n	8001bf0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x68>
	  __y = __x;
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8001bb4:	68bc      	ldr	r4, [r7, #8]
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 f8b1 	bl	8001d20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	f7ff fb0c 	bl	80011e2 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8001bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d005      	beq.n	8001be4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x5c>
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fc76 	bl	80014cc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001be0:	4603      	mov	r3, r0
 8001be2:	e004      	b.n	8001bee <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x66>
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fc64 	bl	80014b4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001bec:	4603      	mov	r3, r0
 8001bee:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1dc      	bne.n	8001bb0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x28>
      iterator __j = iterator(__y);
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	f107 0310 	add.w	r3, r7, #16
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fe90 	bl	8001924 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8001c04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d01d      	beq.n	8001c48 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0xc0>
	  if (__j == begin())
 8001c0c:	68b8      	ldr	r0, [r7, #8]
 8001c0e:	f000 f966 	bl	8001ede <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE5beginEv>
 8001c12:	4603      	mov	r3, r0
 8001c14:	61fb      	str	r3, [r7, #28]
 8001c16:	f107 021c 	add.w	r2, r7, #28
 8001c1a:	f107 0310 	add.w	r3, r7, #16
 8001c1e:	4611      	mov	r1, r2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff faaf 	bl	8001184 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d008      	beq.n	8001c3e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0xb6>
	    return _Res(__x, __y);
 8001c2c:	f107 0214 	add.w	r2, r7, #20
 8001c30:	f107 0318 	add.w	r3, r7, #24
 8001c34:	4619      	mov	r1, r3
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f000 f962 	bl	8001f00 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEERS1_Lb1EEEOT_OT0_>
 8001c3c:	e025      	b.n	8001c8a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x102>
	    --__j;
 8001c3e:	f107 0310 	add.w	r3, r7, #16
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 f84a 	bl	8001cdc <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8001c48:	68bc      	ldr	r4, [r7, #8]
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fee8 	bl	8001a22 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001c52:	4603      	mov	r3, r0
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	4619      	mov	r1, r3
 8001c58:	4620      	mov	r0, r4
 8001c5a:	f7ff fac2 	bl	80011e2 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d008      	beq.n	8001c76 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0xee>
	return _Res(__x, __y);
 8001c64:	f107 0214 	add.w	r2, r7, #20
 8001c68:	f107 0318 	add.w	r3, r7, #24
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f000 f946 	bl	8001f00 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEERS1_Lb1EEEOT_OT0_>
 8001c74:	e009      	b.n	8001c8a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x102>
      return _Res(__j._M_node, 0);
 8001c76:	2300      	movs	r3, #0
 8001c78:	623b      	str	r3, [r7, #32]
 8001c7a:	f107 0220 	add.w	r2, r7, #32
 8001c7e:	f107 0310 	add.w	r3, r7, #16
 8001c82:	4619      	mov	r1, r3
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f7ff ff6a 	bl	8001b5e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	372c      	adds	r7, #44	@ 0x2c
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd90      	pop	{r4, r7, pc}

08001c92 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	330c      	adds	r3, #12
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	60f8      	str	r0, [r7, #12]
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001cb6:	68b8      	ldr	r0, [r7, #8]
 8001cb8:	f000 f93b 	bl	8001f32 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f934 	bl	8001f32 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f004 f8ab 	bl	8005e44 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	601a      	str	r2, [r3, #0]
	return *this;
 8001cf4:	687b      	ldr	r3, [r7, #4]
      }
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f004 f898 	bl	8005e40 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8001d10:	4602      	mov	r2, r0
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	601a      	str	r2, [r3, #0]
	return *this;
 8001d16:	687b      	ldr	r3, [r7, #4]
      }
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>:
      _S_key(_Const_Link_type __x)
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f90d 	bl	8001f48 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	f107 030c 	add.w	r3, r7, #12
 8001d34:	4611      	mov	r1, r2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 f914 	bl	8001f64 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEclERKSB_>
 8001d3c:	4603      	mov	r3, r0
      }
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSJ_PSt13_Rb_tree_nodeISB_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001d46:	b5b0      	push	{r4, r5, r7, lr}
 8001d48:	b086      	sub	sp, #24
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	60f8      	str	r0, [r7, #12]
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d117      	bne.n	8001d8a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSJ_PSt13_Rb_tree_nodeISB_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f7ff fe24 	bl	80019a8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_M_endEv>
 8001d60:	4602      	mov	r2, r0
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d010      	beq.n	8001d8a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSJ_PSt13_Rb_tree_nodeISB_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8001d68:	68fc      	ldr	r4, [r7, #12]
 8001d6a:	6838      	ldr	r0, [r7, #0]
 8001d6c:	f7ff ffd8 	bl	8001d20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>
 8001d70:	4605      	mov	r5, r0
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff fe55 	bl	8001a22 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	4629      	mov	r1, r5
 8001d7e:	4620      	mov	r0, r4
 8001d80:	f7ff fa2f 	bl	80011e2 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSJ_PSt13_Rb_tree_nodeISB_E+0x48>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSJ_PSt13_Rb_tree_nodeISB_E+0x4a>
 8001d8e:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8001d90:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8001d96:	7df8      	ldrb	r0, [r7, #23]
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	6839      	ldr	r1, [r7, #0]
 8001d9c:	f004 f854 	bl	8005e48 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	1c5a      	adds	r2, r3, #1
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8001daa:	f107 0310 	add.w	r3, r7, #16
 8001dae:	6839      	ldr	r1, [r7, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff fdb7 	bl	8001924 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEC1EPSt18_Rb_tree_node_base>
 8001db6:	693b      	ldr	r3, [r7, #16]
    }
 8001db8:	4618      	mov	r0, r3
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bdb0      	pop	{r4, r5, r7, pc}

08001dc0 <_ZSt10__distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	1ad3      	subs	r3, r2, r3
    }
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE7_M_addrEv>:
      _M_addr() noexcept
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE7destroyISC_EEvRSE_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8001e14:	6839      	ldr	r1, [r7, #0]
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f8bd 	bl	8001f96 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE7destroyISC_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 8001e1c:	bf00      	nop
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE10deallocateERSE_PSD_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	68b9      	ldr	r1, [r7, #8]
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 f8ba 	bl	8001fae <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE10deallocateEPSD_j>
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <_ZNSt10_Head_baseILj0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IS5_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8001e4c:	6838      	ldr	r0, [r7, #0]
 8001e4e:	f7ff fb98 	bl	8001582 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001e52:	4602      	mov	r2, r0
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_get_nodeEv>:
      _M_get_node()
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ffc2 	bl	8001df4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2101      	movs	r1, #1
 8001e74:	4618      	mov	r0, r3
 8001e76:	f000 f8ac 	bl	8001fd2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE8allocateERSE_j>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEEvPSt13_Rb_tree_nodeISB_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8001e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af02      	add	r7, sp, #8
 8001e8c:	60f8      	str	r0, [r7, #12]
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	4619      	mov	r1, r3
 8001e98:	202c      	movs	r0, #44	@ 0x2c
 8001e9a:	f7fe fdf8 	bl	8000a8e <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f7ff ffa8 	bl	8001df4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv>
 8001ea4:	4604      	mov	r4, r0
 8001ea6:	68b8      	ldr	r0, [r7, #8]
 8001ea8:	f7ff faeb 	bl	8001482 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>
 8001eac:	4605      	mov	r5, r0
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff fb95 	bl	80015de <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001eb4:	4606      	mov	r6, r0
 8001eb6:	6838      	ldr	r0, [r7, #0]
 8001eb8:	f7ff fb9c 	bl	80015f4 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8001ebc:	4680      	mov	r8, r0
 8001ebe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001ec0:	f7ff fba3 	bl	800160a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	4643      	mov	r3, r8
 8001eca:	4632      	mov	r2, r6
 8001ecc:	4629      	mov	r1, r5
 8001ece:	4620      	mov	r0, r4
 8001ed0:	f000 f88e 	bl	8001ff0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE9constructISC_JRKSt21piecewise_construct_tSt5tupleIJOS7_EESK_IJEEEEEvRSE_PT_DpOT0_>
	}
 8001ed4:	bf00      	nop
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001ede <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b084      	sub	sp, #16
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	f107 030c 	add.w	r3, r7, #12
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff fd17 	bl	8001924 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEC1EPSt18_Rb_tree_node_base>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001f0c:	68b8      	ldr	r0, [r7, #8]
 8001f0e:	f000 f88d 	bl	800202c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEOT_RNSt16remove_referenceISG_E4typeE>
 8001f12:	4603      	mov	r3, r0
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f809 	bl	8001f32 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8001f20:	4603      	mov	r3, r0
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>:
      _M_valptr() const
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3310      	adds	r3, #16
 8001f54:	4618      	mov	r0, r3
 8001f56:	f000 f874 	bl	8002042 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE6_M_ptrEv>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEclERKSB_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEED1Ev>:
    struct pair
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f004 f847 	bl	800601a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE7destroyISC_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
 8001f9e:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8001fa0:	6838      	ldr	r0, [r7, #0]
 8001fa2:	f7ff ffeb 	bl	8001f7c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEED1Ev>
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE10deallocateEPSD_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b084      	sub	sp, #16
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	222c      	movs	r2, #44	@ 0x2c
 8001fbe:	fb02 f303 	mul.w	r3, r2, r3
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	68b8      	ldr	r0, [r7, #8]
 8001fc6:	f003 fed1 	bl	8005d6c <_ZdlPvj>
      }
 8001fca:	bf00      	nop
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE8allocateERSE_j>:
      allocate(allocator_type& __a, size_type __n)
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001fdc:	2200      	movs	r2, #0
 8001fde:	6839      	ldr	r1, [r7, #0]
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f83b 	bl	800205c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE8allocateEjPKv>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE9constructISC_JRKSt21piecewise_construct_tSt5tupleIJOS7_EESK_IJEEEEEvRSE_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8001ff0:	b5b0      	push	{r4, r5, r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af02      	add	r7, sp, #8
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
 8001ffc:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff faed 	bl	80015de <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002004:	4604      	mov	r4, r0
 8002006:	6838      	ldr	r0, [r7, #0]
 8002008:	f7ff faf4 	bl	80015f4 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800200c:	4605      	mov	r5, r0
 800200e:	6a38      	ldr	r0, [r7, #32]
 8002010:	f7ff fafb 	bl	800160a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002014:	4603      	mov	r3, r0
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	462b      	mov	r3, r5
 800201a:	4622      	mov	r2, r4
 800201c:	68b9      	ldr	r1, [r7, #8]
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 f84a 	bl	80020b8 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE9constructISC_JRKSt21piecewise_construct_tSt5tupleIJOS7_EESJ_IJEEEEEvPT_DpOT0_>
	}
 8002024:	bf00      	nop
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bdb0      	pop	{r4, r5, r7, pc}

0800202c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEOT_RNSt16remove_referenceISG_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f85c 	bl	8002108 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE7_M_addrEv>
 8002050:	4603      	mov	r3, r0
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 f859 	bl	8002120 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE11_M_max_sizeEv>
 800206e:	4602      	mov	r2, r0
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	4293      	cmp	r3, r2
 8002074:	bf8c      	ite	hi
 8002076:	2301      	movhi	r3, #1
 8002078:	2300      	movls	r3, #0
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	bf14      	ite	ne
 8002080:	2301      	movne	r3, #1
 8002082:	2300      	moveq	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d007      	beq.n	800209a <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	4a09      	ldr	r2, [pc, #36]	@ (80020b4 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE8allocateEjPKv+0x58>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d901      	bls.n	8002096 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8002092:	f003 ff40 	bl	8005f16 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8002096:	f003 ff3b 	bl	8005f10 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	222c      	movs	r2, #44	@ 0x2c
 800209e:	fb02 f303 	mul.w	r3, r2, r3
 80020a2:	4618      	mov	r0, r3
 80020a4:	f003 fe64 	bl	8005d70 <_Znwj>
 80020a8:	4603      	mov	r3, r0
      }
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	05d1745d 	.word	0x05d1745d

080020b8 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE9constructISC_JRKSt21piecewise_construct_tSt5tupleIJOS7_EESJ_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80020b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
 80020c4:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	4619      	mov	r1, r3
 80020ca:	201c      	movs	r0, #28
 80020cc:	f7fe fcdf 	bl	8000a8e <_ZnwjPv>
 80020d0:	4604      	mov	r4, r0
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff fa83 	bl	80015de <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80020d8:	6838      	ldr	r0, [r7, #0]
 80020da:	f7ff fa8b 	bl	80015f4 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80020de:	4602      	mov	r2, r0
 80020e0:	f107 0314 	add.w	r3, r7, #20
 80020e4:	4611      	mov	r1, r2
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff f895 	bl	8001216 <_ZNSt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS7_>
 80020ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80020ee:	f7ff fa8c 	bl	800160a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80020f2:	f107 0214 	add.w	r2, r7, #20
 80020f6:	4633      	mov	r3, r6
 80020f8:	4629      	mov	r1, r5
 80020fa:	4620      	mov	r0, r4
 80020fc:	f000 f81e 	bl	800213c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEC1IJOS5_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESE_IJDpT0_EE>
 8002100:	bf00      	nop
 8002102:	371c      	adds	r7, #28
 8002104:	46bd      	mov	sp, r7
 8002106:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002108 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE7_M_addrEv>:
      _M_addr() const noexcept
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
	...

08002120 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002128:	4b03      	ldr	r3, [pc, #12]	@ (8002138 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800212a:	4618      	mov	r0, r3
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	02e8ba2e 	.word	0x02e8ba2e

0800213c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEC1IJOS5_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESE_IJDpT0_EE>:
  */
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      _GLIBCXX20_CONSTEXPR
      inline
      pair<_T1, _T2>::
 800213c:	b5b0      	push	{r4, r5, r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af02      	add	r7, sp, #8
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	7239      	strb	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
 8002148:	703b      	strb	r3, [r7, #0]
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 800214a:	463a      	mov	r2, r7
 800214c:	f88d 4000 	strb.w	r4, [sp]
 8002150:	462b      	mov	r3, r5
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f000 f805 	bl	8002164 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEC1IJOS5_EJLj0EEJEJEEERSt5tupleIJDpT_EERSD_IJDpT1_EESt12_Index_tupleIJXspT0_EEESM_IJXspT2_EEE>
      { }
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	4618      	mov	r0, r3
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bdb0      	pop	{r4, r5, r7, pc}

08002164 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEC1IJOS5_EJLj0EEJEJEEERSt5tupleIJDpT_EERSD_IJDpT1_EESt12_Index_tupleIJXspT0_EEESM_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 8002164:	b590      	push	{r4, r7, lr}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
 8002170:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8002172:	68fc      	ldr	r4, [r7, #12]
 8002174:	68b8      	ldr	r0, [r7, #8]
 8002176:	f000 f811 	bl	800219c <_ZSt3getILj0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB_>
 800217a:	4603      	mov	r3, r0
 800217c:	4618      	mov	r0, r3
 800217e:	f000 f81a 	bl	80021b6 <_ZSt7forwardIONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8002182:	4603      	mov	r3, r0
 8002184:	4619      	mov	r1, r3
 8002186:	4620      	mov	r0, r4
 8002188:	f003 ff28 	bl	8005fdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	619a      	str	r2, [r3, #24]
      { }
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4618      	mov	r0, r3
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	bd90      	pop	{r4, r7, pc}

0800219c <_ZSt3getILj0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB_>:
    get(tuple<_Elements...>& __t) noexcept
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 f810 	bl	80021cc <_ZSt12__get_helperILj0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE>
 80021ac:	4603      	mov	r3, r0
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <_ZSt7forwardIONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4618      	mov	r0, r3
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <_ZSt12__get_helperILj0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f805 	bl	80021e4 <_ZNSt11_Tuple_implILj0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS7_>
 80021da:	4603      	mov	r3, r0
 80021dc:	4618      	mov	r0, r3
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <_ZNSt11_Tuple_implILj0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS7_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 f805 	bl	80021fe <_ZNSt10_Head_baseILj0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS7_>
 80021f4:	4603      	mov	r3, r0
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <_ZNSt10_Head_baseILj0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS7_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEED1Ev>:
      ~map() = default;
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe fe7a 	bl	8000f1a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EED1Ev>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <_Z41__static_initialization_and_destruction_0ii>:
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d107      	bne.n	8002250 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002246:	4293      	cmp	r3, r2
 8002248:	d102      	bne.n	8002250 <_Z41__static_initialization_and_destruction_0ii+0x20>
static std::map<std::string, void(*)(uint8_t*, size_t)> handler_map;
 800224a:	4809      	ldr	r0, [pc, #36]	@ (8002270 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800224c:	f7fe fcc1 	bl	8000bd2 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEEC1Ev>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d107      	bne.n	8002266 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800225c:	4293      	cmp	r3, r2
 800225e:	d102      	bne.n	8002266 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002260:	4803      	ldr	r0, [pc, #12]	@ (8002270 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002262:	f7ff ffd8 	bl	8002216 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEED1Ev>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	200003a4 	.word	0x200003a4

08002274 <_GLOBAL__sub_I_huart_reg>:
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
 8002278:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800227c:	2001      	movs	r0, #1
 800227e:	f7ff ffd7 	bl	8002230 <_Z41__static_initialization_and_destruction_0ii>
 8002282:	bd80      	pop	{r7, pc}

08002284 <_GLOBAL__sub_D_huart_reg>:
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
 8002288:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800228c:	2000      	movs	r0, #0
 800228e:	f7ff ffcf 	bl	8002230 <_Z41__static_initialization_and_destruction_0ii>
 8002292:	bd80      	pop	{r7, pc}

08002294 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002294:	480d      	ldr	r0, [pc, #52]	@ (80022cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002296:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002298:	f7fe fbd8 	bl	8000a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800229c:	480c      	ldr	r0, [pc, #48]	@ (80022d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800229e:	490d      	ldr	r1, [pc, #52]	@ (80022d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022a0:	4a0d      	ldr	r2, [pc, #52]	@ (80022d8 <LoopForever+0xe>)
  movs r3, #0
 80022a2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80022a4:	e002      	b.n	80022ac <LoopCopyDataInit>

080022a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022aa:	3304      	adds	r3, #4

080022ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022b0:	d3f9      	bcc.n	80022a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022b2:	4a0a      	ldr	r2, [pc, #40]	@ (80022dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80022b4:	4c0a      	ldr	r4, [pc, #40]	@ (80022e0 <LoopForever+0x16>)
  movs r3, #0
 80022b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022b8:	e001      	b.n	80022be <LoopFillZerobss>

080022ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022bc:	3204      	adds	r2, #4

080022be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022c0:	d3fb      	bcc.n	80022ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022c2:	f004 f835 	bl	8006330 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022c6:	f7fe f927 	bl	8000518 <main>

080022ca <LoopForever>:

LoopForever:
    b LoopForever
 80022ca:	e7fe      	b.n	80022ca <LoopForever>
  ldr   r0, =_estack
 80022cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022d4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80022d8:	080064f4 	.word	0x080064f4
  ldr r2, =_sbss
 80022dc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80022e0:	2000050c 	.word	0x2000050c

080022e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022e4:	e7fe      	b.n	80022e4 <ADC1_2_IRQHandler>

080022e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022f0:	2003      	movs	r0, #3
 80022f2:	f000 f939 	bl	8002568 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022f6:	200f      	movs	r0, #15
 80022f8:	f000 f80e 	bl	8002318 <HAL_InitTick>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d002      	beq.n	8002308 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	71fb      	strb	r3, [r7, #7]
 8002306:	e001      	b.n	800230c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002308:	f7fe fa30 	bl	800076c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800230c:	79fb      	ldrb	r3, [r7, #7]

}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002324:	4b16      	ldr	r3, [pc, #88]	@ (8002380 <HAL_InitTick+0x68>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d022      	beq.n	8002372 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800232c:	4b15      	ldr	r3, [pc, #84]	@ (8002384 <HAL_InitTick+0x6c>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4b13      	ldr	r3, [pc, #76]	@ (8002380 <HAL_InitTick+0x68>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002338:	fbb1 f3f3 	udiv	r3, r1, r3
 800233c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002340:	4618      	mov	r0, r3
 8002342:	f000 f944 	bl	80025ce <HAL_SYSTICK_Config>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10f      	bne.n	800236c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b0f      	cmp	r3, #15
 8002350:	d809      	bhi.n	8002366 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002352:	2200      	movs	r2, #0
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	f04f 30ff 	mov.w	r0, #4294967295
 800235a:	f000 f910 	bl	800257e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800235e:	4a0a      	ldr	r2, [pc, #40]	@ (8002388 <HAL_InitTick+0x70>)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	e007      	b.n	8002376 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	73fb      	strb	r3, [r7, #15]
 800236a:	e004      	b.n	8002376 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	73fb      	strb	r3, [r7, #15]
 8002370:	e001      	b.n	8002376 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002376:	7bfb      	ldrb	r3, [r7, #15]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20000010 	.word	0x20000010
 8002384:	20000000 	.word	0x20000000
 8002388:	2000000c 	.word	0x2000000c

0800238c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002390:	4b05      	ldr	r3, [pc, #20]	@ (80023a8 <HAL_IncTick+0x1c>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4b05      	ldr	r3, [pc, #20]	@ (80023ac <HAL_IncTick+0x20>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4413      	add	r3, r2
 800239a:	4a03      	ldr	r2, [pc, #12]	@ (80023a8 <HAL_IncTick+0x1c>)
 800239c:	6013      	str	r3, [r2, #0]
}
 800239e:	bf00      	nop
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	200003bc 	.word	0x200003bc
 80023ac:	20000010 	.word	0x20000010

080023b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return uwTick;
 80023b4:	4b03      	ldr	r3, [pc, #12]	@ (80023c4 <HAL_GetTick+0x14>)
 80023b6:	681b      	ldr	r3, [r3, #0]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	200003bc 	.word	0x200003bc

080023c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023d8:	4b0c      	ldr	r3, [pc, #48]	@ (800240c <__NVIC_SetPriorityGrouping+0x44>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023e4:	4013      	ands	r3, r2
 80023e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023fa:	4a04      	ldr	r2, [pc, #16]	@ (800240c <__NVIC_SetPriorityGrouping+0x44>)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	60d3      	str	r3, [r2, #12]
}
 8002400:	bf00      	nop
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002414:	4b04      	ldr	r3, [pc, #16]	@ (8002428 <__NVIC_GetPriorityGrouping+0x18>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	0a1b      	lsrs	r3, r3, #8
 800241a:	f003 0307 	and.w	r3, r3, #7
}
 800241e:	4618      	mov	r0, r3
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	2b00      	cmp	r3, #0
 800243c:	db0b      	blt.n	8002456 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	f003 021f 	and.w	r2, r3, #31
 8002444:	4907      	ldr	r1, [pc, #28]	@ (8002464 <__NVIC_EnableIRQ+0x38>)
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	095b      	lsrs	r3, r3, #5
 800244c:	2001      	movs	r0, #1
 800244e:	fa00 f202 	lsl.w	r2, r0, r2
 8002452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	e000e100 	.word	0xe000e100

08002468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	6039      	str	r1, [r7, #0]
 8002472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002478:	2b00      	cmp	r3, #0
 800247a:	db0a      	blt.n	8002492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	b2da      	uxtb	r2, r3
 8002480:	490c      	ldr	r1, [pc, #48]	@ (80024b4 <__NVIC_SetPriority+0x4c>)
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	0112      	lsls	r2, r2, #4
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	440b      	add	r3, r1
 800248c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002490:	e00a      	b.n	80024a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	b2da      	uxtb	r2, r3
 8002496:	4908      	ldr	r1, [pc, #32]	@ (80024b8 <__NVIC_SetPriority+0x50>)
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	3b04      	subs	r3, #4
 80024a0:	0112      	lsls	r2, r2, #4
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	440b      	add	r3, r1
 80024a6:	761a      	strb	r2, [r3, #24]
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	e000e100 	.word	0xe000e100
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024bc:	b480      	push	{r7}
 80024be:	b089      	sub	sp, #36	@ 0x24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f1c3 0307 	rsb	r3, r3, #7
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	bf28      	it	cs
 80024da:	2304      	movcs	r3, #4
 80024dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3304      	adds	r3, #4
 80024e2:	2b06      	cmp	r3, #6
 80024e4:	d902      	bls.n	80024ec <NVIC_EncodePriority+0x30>
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	3b03      	subs	r3, #3
 80024ea:	e000      	b.n	80024ee <NVIC_EncodePriority+0x32>
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f0:	f04f 32ff 	mov.w	r2, #4294967295
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43da      	mvns	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	401a      	ands	r2, r3
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002504:	f04f 31ff 	mov.w	r1, #4294967295
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	fa01 f303 	lsl.w	r3, r1, r3
 800250e:	43d9      	mvns	r1, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002514:	4313      	orrs	r3, r2
         );
}
 8002516:	4618      	mov	r0, r3
 8002518:	3724      	adds	r7, #36	@ 0x24
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
	...

08002524 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3b01      	subs	r3, #1
 8002530:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002534:	d301      	bcc.n	800253a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002536:	2301      	movs	r3, #1
 8002538:	e00f      	b.n	800255a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800253a:	4a0a      	ldr	r2, [pc, #40]	@ (8002564 <SysTick_Config+0x40>)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3b01      	subs	r3, #1
 8002540:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002542:	210f      	movs	r1, #15
 8002544:	f04f 30ff 	mov.w	r0, #4294967295
 8002548:	f7ff ff8e 	bl	8002468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800254c:	4b05      	ldr	r3, [pc, #20]	@ (8002564 <SysTick_Config+0x40>)
 800254e:	2200      	movs	r2, #0
 8002550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002552:	4b04      	ldr	r3, [pc, #16]	@ (8002564 <SysTick_Config+0x40>)
 8002554:	2207      	movs	r2, #7
 8002556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	e000e010 	.word	0xe000e010

08002568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7ff ff29 	bl	80023c8 <__NVIC_SetPriorityGrouping>
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b086      	sub	sp, #24
 8002582:	af00      	add	r7, sp, #0
 8002584:	4603      	mov	r3, r0
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	607a      	str	r2, [r7, #4]
 800258a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800258c:	f7ff ff40 	bl	8002410 <__NVIC_GetPriorityGrouping>
 8002590:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	68b9      	ldr	r1, [r7, #8]
 8002596:	6978      	ldr	r0, [r7, #20]
 8002598:	f7ff ff90 	bl	80024bc <NVIC_EncodePriority>
 800259c:	4602      	mov	r2, r0
 800259e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a2:	4611      	mov	r1, r2
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff5f 	bl	8002468 <__NVIC_SetPriority>
}
 80025aa:	bf00      	nop
 80025ac:	3718      	adds	r7, #24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	4603      	mov	r3, r0
 80025ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ff33 	bl	800242c <__NVIC_EnableIRQ>
}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b082      	sub	sp, #8
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff ffa4 	bl	8002524 <SysTick_Config>
 80025dc:	4603      	mov	r3, r0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e054      	b.n	80026a4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	7f5b      	ldrb	r3, [r3, #29]
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d105      	bne.n	8002610 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7fe f8d2 	bl	80007b4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2202      	movs	r2, #2
 8002614:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	791b      	ldrb	r3, [r3, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10c      	bne.n	8002638 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a22      	ldr	r2, [pc, #136]	@ (80026ac <HAL_CRC_Init+0xc4>)
 8002624:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0218 	bic.w	r2, r2, #24
 8002634:	609a      	str	r2, [r3, #8]
 8002636:	e00c      	b.n	8002652 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6899      	ldr	r1, [r3, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	461a      	mov	r2, r3
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f948 	bl	80028d8 <HAL_CRCEx_Polynomial_Set>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e028      	b.n	80026a4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	795b      	ldrb	r3, [r3, #5]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d105      	bne.n	8002666 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f04f 32ff 	mov.w	r2, #4294967295
 8002662:	611a      	str	r2, [r3, #16]
 8002664:	e004      	b.n	8002670 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6912      	ldr	r2, [r2, #16]
 800266e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695a      	ldr	r2, [r3, #20]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	699a      	ldr	r2, [r3, #24]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	04c11db7 	.word	0x04c11db7

080026b0 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80026bc:	2300      	movs	r3, #0
 80026be:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2202      	movs	r2, #2
 80026c4:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f042 0201 	orr.w	r2, r2, #1
 80026d4:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d006      	beq.n	80026ec <HAL_CRC_Calculate+0x3c>
 80026de:	2b03      	cmp	r3, #3
 80026e0:	d829      	bhi.n	8002736 <HAL_CRC_Calculate+0x86>
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d019      	beq.n	800271a <HAL_CRC_Calculate+0x6a>
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d01e      	beq.n	8002728 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80026ea:	e024      	b.n	8002736 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	e00a      	b.n	8002708 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	441a      	add	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6812      	ldr	r2, [r2, #0]
 8002700:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	3301      	adds	r3, #1
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	429a      	cmp	r2, r3
 800270e:	d3f0      	bcc.n	80026f2 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	613b      	str	r3, [r7, #16]
      break;
 8002718:	e00e      	b.n	8002738 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	68b9      	ldr	r1, [r7, #8]
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 f812 	bl	8002748 <CRC_Handle_8>
 8002724:	6138      	str	r0, [r7, #16]
      break;
 8002726:	e007      	b.n	8002738 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	68b9      	ldr	r1, [r7, #8]
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f000 f899 	bl	8002864 <CRC_Handle_16>
 8002732:	6138      	str	r0, [r7, #16]
      break;
 8002734:	e000      	b.n	8002738 <HAL_CRC_Calculate+0x88>
      break;
 8002736:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2201      	movs	r2, #1
 800273c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800273e:	693b      	ldr	r3, [r7, #16]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8002748:	b480      	push	{r7}
 800274a:	b089      	sub	sp, #36	@ 0x24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002754:	2300      	movs	r3, #0
 8002756:	61fb      	str	r3, [r7, #28]
 8002758:	e023      	b.n	80027a2 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	4413      	add	r3, r2
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	3301      	adds	r3, #1
 800276c:	68b9      	ldr	r1, [r7, #8]
 800276e:	440b      	add	r3, r1
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002774:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	3302      	adds	r3, #2
 800277c:	68b9      	ldr	r1, [r7, #8]
 800277e:	440b      	add	r3, r1
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002784:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	3303      	adds	r3, #3
 800278c:	68b9      	ldr	r1, [r7, #8]
 800278e:	440b      	add	r3, r1
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002798:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800279a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	3301      	adds	r3, #1
 80027a0:	61fb      	str	r3, [r7, #28]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	089b      	lsrs	r3, r3, #2
 80027a6:	69fa      	ldr	r2, [r7, #28]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d3d6      	bcc.n	800275a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d04d      	beq.n	8002852 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d107      	bne.n	80027d0 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	4413      	add	r3, r2
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d116      	bne.n	8002808 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	4413      	add	r3, r2
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	021b      	lsls	r3, r3, #8
 80027e6:	b21a      	sxth	r2, r3
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	3301      	adds	r3, #1
 80027ee:	68b9      	ldr	r1, [r7, #8]
 80027f0:	440b      	add	r3, r1
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	b21b      	sxth	r3, r3
 80027f6:	4313      	orrs	r3, r2
 80027f8:	b21b      	sxth	r3, r3
 80027fa:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	8b7a      	ldrh	r2, [r7, #26]
 8002806:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	2b03      	cmp	r3, #3
 8002810:	d11f      	bne.n	8002852 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	4413      	add	r3, r2
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	021b      	lsls	r3, r3, #8
 800281e:	b21a      	sxth	r2, r3
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	3301      	adds	r3, #1
 8002826:	68b9      	ldr	r1, [r7, #8]
 8002828:	440b      	add	r3, r1
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	b21b      	sxth	r3, r3
 800282e:	4313      	orrs	r3, r2
 8002830:	b21b      	sxth	r3, r3
 8002832:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	8b7a      	ldrh	r2, [r7, #26]
 800283e:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	3302      	adds	r3, #2
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	4413      	add	r3, r2
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	6812      	ldr	r2, [r2, #0]
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3724      	adds	r7, #36	@ 0x24
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	e013      	b.n	800289e <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	4413      	add	r3, r2
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	041a      	lsls	r2, r3, #16
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	3302      	adds	r3, #2
 8002888:	68b9      	ldr	r1, [r7, #8]
 800288a:	440b      	add	r3, r1
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	4619      	mov	r1, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	3301      	adds	r3, #1
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	085b      	lsrs	r3, r3, #1
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d3e6      	bcc.n	8002876 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d009      	beq.n	80028c6 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	68ba      	ldr	r2, [r7, #8]
 80028be:	4413      	add	r3, r2
 80028c0:	881a      	ldrh	r2, [r3, #0]
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	371c      	adds	r7, #28
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80028d8:	b480      	push	{r7}
 80028da:	b087      	sub	sp, #28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80028e8:	231f      	movs	r3, #31
 80028ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d102      	bne.n	80028fc <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	75fb      	strb	r3, [r7, #23]
 80028fa:	e063      	b.n	80029c4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80028fc:	bf00      	nop
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1e5a      	subs	r2, r3, #1
 8002902:	613a      	str	r2, [r7, #16]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d009      	beq.n	800291c <HAL_CRCEx_Polynomial_Set+0x44>
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	f003 031f 	and.w	r3, r3, #31
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	fa22 f303 	lsr.w	r3, r2, r3
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0f0      	beq.n	80028fe <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b18      	cmp	r3, #24
 8002920:	d846      	bhi.n	80029b0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8002922:	a201      	add	r2, pc, #4	@ (adr r2, 8002928 <HAL_CRCEx_Polynomial_Set+0x50>)
 8002924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002928:	080029b7 	.word	0x080029b7
 800292c:	080029b1 	.word	0x080029b1
 8002930:	080029b1 	.word	0x080029b1
 8002934:	080029b1 	.word	0x080029b1
 8002938:	080029b1 	.word	0x080029b1
 800293c:	080029b1 	.word	0x080029b1
 8002940:	080029b1 	.word	0x080029b1
 8002944:	080029b1 	.word	0x080029b1
 8002948:	080029a5 	.word	0x080029a5
 800294c:	080029b1 	.word	0x080029b1
 8002950:	080029b1 	.word	0x080029b1
 8002954:	080029b1 	.word	0x080029b1
 8002958:	080029b1 	.word	0x080029b1
 800295c:	080029b1 	.word	0x080029b1
 8002960:	080029b1 	.word	0x080029b1
 8002964:	080029b1 	.word	0x080029b1
 8002968:	08002999 	.word	0x08002999
 800296c:	080029b1 	.word	0x080029b1
 8002970:	080029b1 	.word	0x080029b1
 8002974:	080029b1 	.word	0x080029b1
 8002978:	080029b1 	.word	0x080029b1
 800297c:	080029b1 	.word	0x080029b1
 8002980:	080029b1 	.word	0x080029b1
 8002984:	080029b1 	.word	0x080029b1
 8002988:	0800298d 	.word	0x0800298d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	2b06      	cmp	r3, #6
 8002990:	d913      	bls.n	80029ba <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002996:	e010      	b.n	80029ba <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	2b07      	cmp	r3, #7
 800299c:	d90f      	bls.n	80029be <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80029a2:	e00c      	b.n	80029be <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	2b0f      	cmp	r3, #15
 80029a8:	d90b      	bls.n	80029c2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80029ae:	e008      	b.n	80029c2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	75fb      	strb	r3, [r7, #23]
        break;
 80029b4:	e006      	b.n	80029c4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80029b6:	bf00      	nop
 80029b8:	e004      	b.n	80029c4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80029ba:	bf00      	nop
 80029bc:	e002      	b.n	80029c4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80029be:	bf00      	nop
 80029c0:	e000      	b.n	80029c4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80029c2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80029c4:	7dfb      	ldrb	r3, [r7, #23]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10d      	bne.n	80029e6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f023 0118 	bic.w	r1, r3, #24
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80029e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	371c      	adds	r7, #28
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e08d      	b.n	8002b22 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	4b47      	ldr	r3, [pc, #284]	@ (8002b2c <HAL_DMA_Init+0x138>)
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d80f      	bhi.n	8002a32 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	4b45      	ldr	r3, [pc, #276]	@ (8002b30 <HAL_DMA_Init+0x13c>)
 8002a1a:	4413      	add	r3, r2
 8002a1c:	4a45      	ldr	r2, [pc, #276]	@ (8002b34 <HAL_DMA_Init+0x140>)
 8002a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a22:	091b      	lsrs	r3, r3, #4
 8002a24:	009a      	lsls	r2, r3, #2
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a42      	ldr	r2, [pc, #264]	@ (8002b38 <HAL_DMA_Init+0x144>)
 8002a2e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a30:	e00e      	b.n	8002a50 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	4b40      	ldr	r3, [pc, #256]	@ (8002b3c <HAL_DMA_Init+0x148>)
 8002a3a:	4413      	add	r3, r2
 8002a3c:	4a3d      	ldr	r2, [pc, #244]	@ (8002b34 <HAL_DMA_Init+0x140>)
 8002a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a42:	091b      	lsrs	r3, r3, #4
 8002a44:	009a      	lsls	r2, r3, #2
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a3c      	ldr	r2, [pc, #240]	@ (8002b40 <HAL_DMA_Init+0x14c>)
 8002a4e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002a66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 fa76 	bl	8002f94 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ab0:	d102      	bne.n	8002ab8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002acc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d010      	beq.n	8002af8 <HAL_DMA_Init+0x104>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d80c      	bhi.n	8002af8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fa96 	bl	8003010 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002af4:	605a      	str	r2, [r3, #4]
 8002af6:	e008      	b.n	8002b0a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40020407 	.word	0x40020407
 8002b30:	bffdfff8 	.word	0xbffdfff8
 8002b34:	cccccccd 	.word	0xcccccccd
 8002b38:	40020000 	.word	0x40020000
 8002b3c:	bffdfbf8 	.word	0xbffdfbf8
 8002b40:	40020400 	.word	0x40020400

08002b44 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
 8002b50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b52:	2300      	movs	r3, #0
 8002b54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d101      	bne.n	8002b64 <HAL_DMA_Start_IT+0x20>
 8002b60:	2302      	movs	r3, #2
 8002b62:	e066      	b.n	8002c32 <HAL_DMA_Start_IT+0xee>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d155      	bne.n	8002c24 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0201 	bic.w	r2, r2, #1
 8002b94:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	68b9      	ldr	r1, [r7, #8]
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f000 f9bb 	bl	8002f18 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d008      	beq.n	8002bbc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f042 020e 	orr.w	r2, r2, #14
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	e00f      	b.n	8002bdc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0204 	bic.w	r2, r2, #4
 8002bca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 020a 	orr.w	r2, r2, #10
 8002bda:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d007      	beq.n	8002bfa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bf4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bf8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d007      	beq.n	8002c12 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c10:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f042 0201 	orr.w	r2, r2, #1
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	e005      	b.n	8002c30 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b085      	sub	sp, #20
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d005      	beq.n	8002c5e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2204      	movs	r2, #4
 8002c56:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
 8002c5c:	e037      	b.n	8002cce <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 020e 	bic.w	r2, r2, #14
 8002c6c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c7c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0201 	bic.w	r2, r2, #1
 8002c8c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c92:	f003 021f 	and.w	r2, r3, #31
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002caa:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00c      	beq.n	8002cce <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cbe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cc2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002ccc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d00d      	beq.n	8002d20 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2204      	movs	r2, #4
 8002d08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	73fb      	strb	r3, [r7, #15]
 8002d1e:	e047      	b.n	8002db0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 020e 	bic.w	r2, r2, #14
 8002d2e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0201 	bic.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d4a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d54:	f003 021f 	and.w	r2, r3, #31
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d62:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d6c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00c      	beq.n	8002d90 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d84:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002d8e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	4798      	blx	r3
    }
  }
  return status;
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b084      	sub	sp, #16
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd6:	f003 031f 	and.w	r3, r3, #31
 8002dda:	2204      	movs	r2, #4
 8002ddc:	409a      	lsls	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d026      	beq.n	8002e34 <HAL_DMA_IRQHandler+0x7a>
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d021      	beq.n	8002e34 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0320 	and.w	r3, r3, #32
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d107      	bne.n	8002e0e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0204 	bic.w	r2, r2, #4
 8002e0c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e12:	f003 021f 	and.w	r2, r3, #31
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1a:	2104      	movs	r1, #4
 8002e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e20:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d071      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002e32:	e06c      	b.n	8002f0e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e38:	f003 031f 	and.w	r3, r3, #31
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	409a      	lsls	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4013      	ands	r3, r2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d02e      	beq.n	8002ea6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d029      	beq.n	8002ea6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0320 	and.w	r3, r3, #32
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10b      	bne.n	8002e78 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 020a 	bic.w	r2, r2, #10
 8002e6e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7c:	f003 021f 	and.w	r2, r3, #31
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e84:	2102      	movs	r1, #2
 8002e86:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d038      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002ea4:	e033      	b.n	8002f0e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eaa:	f003 031f 	and.w	r3, r3, #31
 8002eae:	2208      	movs	r2, #8
 8002eb0:	409a      	lsls	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d02a      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d025      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 020e 	bic.w	r2, r2, #14
 8002ed2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed8:	f003 021f 	and.w	r2, r3, #31
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d004      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f0e:	bf00      	nop
 8002f10:	bf00      	nop
}
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f2e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d004      	beq.n	8002f42 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002f40:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f46:	f003 021f 	and.w	r2, r3, #31
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4e:	2101      	movs	r1, #1
 8002f50:	fa01 f202 	lsl.w	r2, r1, r2
 8002f54:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	2b10      	cmp	r3, #16
 8002f64:	d108      	bne.n	8002f78 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f76:	e007      	b.n	8002f88 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	60da      	str	r2, [r3, #12]
}
 8002f88:	bf00      	nop
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4b16      	ldr	r3, [pc, #88]	@ (8002ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d802      	bhi.n	8002fae <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002fa8:	4b15      	ldr	r3, [pc, #84]	@ (8003000 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002faa:	617b      	str	r3, [r7, #20]
 8002fac:	e001      	b.n	8002fb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002fae:	4b15      	ldr	r3, [pc, #84]	@ (8003004 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002fb0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	3b08      	subs	r3, #8
 8002fbe:	4a12      	ldr	r2, [pc, #72]	@ (8003008 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc4:	091b      	lsrs	r3, r3, #4
 8002fc6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fcc:	089b      	lsrs	r3, r3, #2
 8002fce:	009a      	lsls	r2, r3, #2
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a0b      	ldr	r2, [pc, #44]	@ (800300c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002fde:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f003 031f 	and.w	r3, r3, #31
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	409a      	lsls	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002fee:	bf00      	nop
 8002ff0:	371c      	adds	r7, #28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	40020407 	.word	0x40020407
 8003000:	40020800 	.word	0x40020800
 8003004:	40020820 	.word	0x40020820
 8003008:	cccccccd 	.word	0xcccccccd
 800300c:	40020880 	.word	0x40020880

08003010 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	b2db      	uxtb	r3, r3
 800301e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4b0b      	ldr	r3, [pc, #44]	@ (8003050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003024:	4413      	add	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	461a      	mov	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a08      	ldr	r2, [pc, #32]	@ (8003054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003032:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	3b01      	subs	r3, #1
 8003038:	f003 031f 	and.w	r3, r3, #31
 800303c:	2201      	movs	r2, #1
 800303e:	409a      	lsls	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003044:	bf00      	nop
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	1000823f 	.word	0x1000823f
 8003054:	40020940 	.word	0x40020940

08003058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003058:	b480      	push	{r7}
 800305a:	b087      	sub	sp, #28
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003066:	e15a      	b.n	800331e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	2101      	movs	r1, #1
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	fa01 f303 	lsl.w	r3, r1, r3
 8003074:	4013      	ands	r3, r2
 8003076:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 814c 	beq.w	8003318 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f003 0303 	and.w	r3, r3, #3
 8003088:	2b01      	cmp	r3, #1
 800308a:	d005      	beq.n	8003098 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003094:	2b02      	cmp	r3, #2
 8003096:	d130      	bne.n	80030fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	2203      	movs	r2, #3
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43db      	mvns	r3, r3
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	4013      	ands	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	68da      	ldr	r2, [r3, #12]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4313      	orrs	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030ce:	2201      	movs	r2, #1
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	43db      	mvns	r3, r3
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	4013      	ands	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	091b      	lsrs	r3, r3, #4
 80030e4:	f003 0201 	and.w	r2, r3, #1
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	2b03      	cmp	r3, #3
 8003104:	d017      	beq.n	8003136 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	2203      	movs	r2, #3
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43db      	mvns	r3, r3
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	4013      	ands	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	4313      	orrs	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d123      	bne.n	800318a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	08da      	lsrs	r2, r3, #3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3208      	adds	r2, #8
 800314a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800314e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	220f      	movs	r2, #15
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43db      	mvns	r3, r3
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	4013      	ands	r3, r2
 8003164:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	691a      	ldr	r2, [r3, #16]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	4313      	orrs	r3, r2
 800317a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	08da      	lsrs	r2, r3, #3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3208      	adds	r2, #8
 8003184:	6939      	ldr	r1, [r7, #16]
 8003186:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	2203      	movs	r2, #3
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43db      	mvns	r3, r3
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	4013      	ands	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f003 0203 	and.w	r2, r3, #3
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 80a6 	beq.w	8003318 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031cc:	4b5b      	ldr	r3, [pc, #364]	@ (800333c <HAL_GPIO_Init+0x2e4>)
 80031ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031d0:	4a5a      	ldr	r2, [pc, #360]	@ (800333c <HAL_GPIO_Init+0x2e4>)
 80031d2:	f043 0301 	orr.w	r3, r3, #1
 80031d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80031d8:	4b58      	ldr	r3, [pc, #352]	@ (800333c <HAL_GPIO_Init+0x2e4>)
 80031da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031e4:	4a56      	ldr	r2, [pc, #344]	@ (8003340 <HAL_GPIO_Init+0x2e8>)
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	089b      	lsrs	r3, r3, #2
 80031ea:	3302      	adds	r3, #2
 80031ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f003 0303 	and.w	r3, r3, #3
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	220f      	movs	r2, #15
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	4013      	ands	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800320e:	d01f      	beq.n	8003250 <HAL_GPIO_Init+0x1f8>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a4c      	ldr	r2, [pc, #304]	@ (8003344 <HAL_GPIO_Init+0x2ec>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d019      	beq.n	800324c <HAL_GPIO_Init+0x1f4>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a4b      	ldr	r2, [pc, #300]	@ (8003348 <HAL_GPIO_Init+0x2f0>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d013      	beq.n	8003248 <HAL_GPIO_Init+0x1f0>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a4a      	ldr	r2, [pc, #296]	@ (800334c <HAL_GPIO_Init+0x2f4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d00d      	beq.n	8003244 <HAL_GPIO_Init+0x1ec>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a49      	ldr	r2, [pc, #292]	@ (8003350 <HAL_GPIO_Init+0x2f8>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d007      	beq.n	8003240 <HAL_GPIO_Init+0x1e8>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a48      	ldr	r2, [pc, #288]	@ (8003354 <HAL_GPIO_Init+0x2fc>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d101      	bne.n	800323c <HAL_GPIO_Init+0x1e4>
 8003238:	2305      	movs	r3, #5
 800323a:	e00a      	b.n	8003252 <HAL_GPIO_Init+0x1fa>
 800323c:	2306      	movs	r3, #6
 800323e:	e008      	b.n	8003252 <HAL_GPIO_Init+0x1fa>
 8003240:	2304      	movs	r3, #4
 8003242:	e006      	b.n	8003252 <HAL_GPIO_Init+0x1fa>
 8003244:	2303      	movs	r3, #3
 8003246:	e004      	b.n	8003252 <HAL_GPIO_Init+0x1fa>
 8003248:	2302      	movs	r3, #2
 800324a:	e002      	b.n	8003252 <HAL_GPIO_Init+0x1fa>
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <HAL_GPIO_Init+0x1fa>
 8003250:	2300      	movs	r3, #0
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	f002 0203 	and.w	r2, r2, #3
 8003258:	0092      	lsls	r2, r2, #2
 800325a:	4093      	lsls	r3, r2
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	4313      	orrs	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003262:	4937      	ldr	r1, [pc, #220]	@ (8003340 <HAL_GPIO_Init+0x2e8>)
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	089b      	lsrs	r3, r3, #2
 8003268:	3302      	adds	r3, #2
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003270:	4b39      	ldr	r3, [pc, #228]	@ (8003358 <HAL_GPIO_Init+0x300>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	43db      	mvns	r3, r3
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	4013      	ands	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4313      	orrs	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003294:	4a30      	ldr	r2, [pc, #192]	@ (8003358 <HAL_GPIO_Init+0x300>)
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800329a:	4b2f      	ldr	r3, [pc, #188]	@ (8003358 <HAL_GPIO_Init+0x300>)
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4013      	ands	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032be:	4a26      	ldr	r2, [pc, #152]	@ (8003358 <HAL_GPIO_Init+0x300>)
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80032c4:	4b24      	ldr	r3, [pc, #144]	@ (8003358 <HAL_GPIO_Init+0x300>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	43db      	mvns	r3, r3
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	4013      	ands	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003358 <HAL_GPIO_Init+0x300>)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80032ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003358 <HAL_GPIO_Init+0x300>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	43db      	mvns	r3, r3
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	4013      	ands	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003312:	4a11      	ldr	r2, [pc, #68]	@ (8003358 <HAL_GPIO_Init+0x300>)
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	3301      	adds	r3, #1
 800331c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	fa22 f303 	lsr.w	r3, r2, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	f47f ae9d 	bne.w	8003068 <HAL_GPIO_Init+0x10>
  }
}
 800332e:	bf00      	nop
 8003330:	bf00      	nop
 8003332:	371c      	adds	r7, #28
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	40021000 	.word	0x40021000
 8003340:	40010000 	.word	0x40010000
 8003344:	48000400 	.word	0x48000400
 8003348:	48000800 	.word	0x48000800
 800334c:	48000c00 	.word	0x48000c00
 8003350:	48001000 	.word	0x48001000
 8003354:	48001400 	.word	0x48001400
 8003358:	40010400 	.word	0x40010400

0800335c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d141      	bne.n	80033ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800336a:	4b4b      	ldr	r3, [pc, #300]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003372:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003376:	d131      	bne.n	80033dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003378:	4b47      	ldr	r3, [pc, #284]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800337a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800337e:	4a46      	ldr	r2, [pc, #280]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003380:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003384:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003388:	4b43      	ldr	r3, [pc, #268]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003390:	4a41      	ldr	r2, [pc, #260]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003392:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003396:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003398:	4b40      	ldr	r3, [pc, #256]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2232      	movs	r2, #50	@ 0x32
 800339e:	fb02 f303 	mul.w	r3, r2, r3
 80033a2:	4a3f      	ldr	r2, [pc, #252]	@ (80034a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033a4:	fba2 2303 	umull	r2, r3, r2, r3
 80033a8:	0c9b      	lsrs	r3, r3, #18
 80033aa:	3301      	adds	r3, #1
 80033ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033ae:	e002      	b.n	80033b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033b6:	4b38      	ldr	r3, [pc, #224]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033c2:	d102      	bne.n	80033ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f2      	bne.n	80033b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033ca:	4b33      	ldr	r3, [pc, #204]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033d6:	d158      	bne.n	800348a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e057      	b.n	800348c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033dc:	4b2e      	ldr	r3, [pc, #184]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033e2:	4a2d      	ldr	r2, [pc, #180]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80033ec:	e04d      	b.n	800348a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033f4:	d141      	bne.n	800347a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033f6:	4b28      	ldr	r3, [pc, #160]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80033fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003402:	d131      	bne.n	8003468 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003404:	4b24      	ldr	r3, [pc, #144]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003406:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800340a:	4a23      	ldr	r2, [pc, #140]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800340c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003410:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003414:	4b20      	ldr	r3, [pc, #128]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800341c:	4a1e      	ldr	r2, [pc, #120]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800341e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003422:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003424:	4b1d      	ldr	r3, [pc, #116]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2232      	movs	r2, #50	@ 0x32
 800342a:	fb02 f303 	mul.w	r3, r2, r3
 800342e:	4a1c      	ldr	r2, [pc, #112]	@ (80034a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003430:	fba2 2303 	umull	r2, r3, r2, r3
 8003434:	0c9b      	lsrs	r3, r3, #18
 8003436:	3301      	adds	r3, #1
 8003438:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800343a:	e002      	b.n	8003442 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	3b01      	subs	r3, #1
 8003440:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003442:	4b15      	ldr	r3, [pc, #84]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800344a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800344e:	d102      	bne.n	8003456 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f2      	bne.n	800343c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003456:	4b10      	ldr	r3, [pc, #64]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800345e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003462:	d112      	bne.n	800348a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e011      	b.n	800348c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003468:	4b0b      	ldr	r3, [pc, #44]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800346a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800346e:	4a0a      	ldr	r2, [pc, #40]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003470:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003474:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003478:	e007      	b.n	800348a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800347a:	4b07      	ldr	r3, [pc, #28]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003482:	4a05      	ldr	r2, [pc, #20]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003484:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003488:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	40007000 	.word	0x40007000
 800349c:	20000000 	.word	0x20000000
 80034a0:	431bde83 	.word	0x431bde83

080034a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80034a8:	4b05      	ldr	r3, [pc, #20]	@ (80034c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	4a04      	ldr	r2, [pc, #16]	@ (80034c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80034ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034b2:	6093      	str	r3, [r2, #8]
}
 80034b4:	bf00      	nop
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	40007000 	.word	0x40007000

080034c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b088      	sub	sp, #32
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e2fe      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d075      	beq.n	80035ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034e2:	4b97      	ldr	r3, [pc, #604]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034ec:	4b94      	ldr	r3, [pc, #592]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f003 0303 	and.w	r3, r3, #3
 80034f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	2b0c      	cmp	r3, #12
 80034fa:	d102      	bne.n	8003502 <HAL_RCC_OscConfig+0x3e>
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2b03      	cmp	r3, #3
 8003500:	d002      	beq.n	8003508 <HAL_RCC_OscConfig+0x44>
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	2b08      	cmp	r3, #8
 8003506:	d10b      	bne.n	8003520 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003508:	4b8d      	ldr	r3, [pc, #564]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d05b      	beq.n	80035cc <HAL_RCC_OscConfig+0x108>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d157      	bne.n	80035cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e2d9      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003528:	d106      	bne.n	8003538 <HAL_RCC_OscConfig+0x74>
 800352a:	4b85      	ldr	r3, [pc, #532]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a84      	ldr	r2, [pc, #528]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	e01d      	b.n	8003574 <HAL_RCC_OscConfig+0xb0>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003540:	d10c      	bne.n	800355c <HAL_RCC_OscConfig+0x98>
 8003542:	4b7f      	ldr	r3, [pc, #508]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a7e      	ldr	r2, [pc, #504]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003548:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	4b7c      	ldr	r3, [pc, #496]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a7b      	ldr	r2, [pc, #492]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003554:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	e00b      	b.n	8003574 <HAL_RCC_OscConfig+0xb0>
 800355c:	4b78      	ldr	r3, [pc, #480]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a77      	ldr	r2, [pc, #476]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003562:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003566:	6013      	str	r3, [r2, #0]
 8003568:	4b75      	ldr	r3, [pc, #468]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a74      	ldr	r2, [pc, #464]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 800356e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d013      	beq.n	80035a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357c:	f7fe ff18 	bl	80023b0 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003584:	f7fe ff14 	bl	80023b0 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b64      	cmp	r3, #100	@ 0x64
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e29e      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003596:	4b6a      	ldr	r3, [pc, #424]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0f0      	beq.n	8003584 <HAL_RCC_OscConfig+0xc0>
 80035a2:	e014      	b.n	80035ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a4:	f7fe ff04 	bl	80023b0 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035ac:	f7fe ff00 	bl	80023b0 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b64      	cmp	r3, #100	@ 0x64
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e28a      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035be:	4b60      	ldr	r3, [pc, #384]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f0      	bne.n	80035ac <HAL_RCC_OscConfig+0xe8>
 80035ca:	e000      	b.n	80035ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d075      	beq.n	80036c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035da:	4b59      	ldr	r3, [pc, #356]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 030c 	and.w	r3, r3, #12
 80035e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035e4:	4b56      	ldr	r3, [pc, #344]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f003 0303 	and.w	r3, r3, #3
 80035ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	2b0c      	cmp	r3, #12
 80035f2:	d102      	bne.n	80035fa <HAL_RCC_OscConfig+0x136>
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d002      	beq.n	8003600 <HAL_RCC_OscConfig+0x13c>
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d11f      	bne.n	8003640 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003600:	4b4f      	ldr	r3, [pc, #316]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <HAL_RCC_OscConfig+0x154>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e25d      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003618:	4b49      	ldr	r3, [pc, #292]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	061b      	lsls	r3, r3, #24
 8003626:	4946      	ldr	r1, [pc, #280]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003628:	4313      	orrs	r3, r2
 800362a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800362c:	4b45      	ldr	r3, [pc, #276]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f7fe fe71 	bl	8002318 <HAL_InitTick>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d043      	beq.n	80036c4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e249      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d023      	beq.n	8003690 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003648:	4b3d      	ldr	r3, [pc, #244]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a3c      	ldr	r2, [pc, #240]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 800364e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003654:	f7fe feac 	bl	80023b0 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800365c:	f7fe fea8 	bl	80023b0 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e232      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800366e:	4b34      	ldr	r3, [pc, #208]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f0      	beq.n	800365c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367a:	4b31      	ldr	r3, [pc, #196]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	061b      	lsls	r3, r3, #24
 8003688:	492d      	ldr	r1, [pc, #180]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 800368a:	4313      	orrs	r3, r2
 800368c:	604b      	str	r3, [r1, #4]
 800368e:	e01a      	b.n	80036c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003690:	4b2b      	ldr	r3, [pc, #172]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a2a      	ldr	r2, [pc, #168]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003696:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800369a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369c:	f7fe fe88 	bl	80023b0 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036a4:	f7fe fe84 	bl	80023b0 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e20e      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036b6:	4b22      	ldr	r3, [pc, #136]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f0      	bne.n	80036a4 <HAL_RCC_OscConfig+0x1e0>
 80036c2:	e000      	b.n	80036c6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d041      	beq.n	8003756 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d01c      	beq.n	8003714 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036da:	4b19      	ldr	r3, [pc, #100]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 80036dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036e0:	4a17      	ldr	r2, [pc, #92]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ea:	f7fe fe61 	bl	80023b0 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f2:	f7fe fe5d 	bl	80023b0 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e1e7      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003704:	4b0e      	ldr	r3, [pc, #56]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003706:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0ef      	beq.n	80036f2 <HAL_RCC_OscConfig+0x22e>
 8003712:	e020      	b.n	8003756 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003714:	4b0a      	ldr	r3, [pc, #40]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003716:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800371a:	4a09      	ldr	r2, [pc, #36]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 800371c:	f023 0301 	bic.w	r3, r3, #1
 8003720:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003724:	f7fe fe44 	bl	80023b0 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800372a:	e00d      	b.n	8003748 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800372c:	f7fe fe40 	bl	80023b0 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d906      	bls.n	8003748 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e1ca      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
 800373e:	bf00      	nop
 8003740:	40021000 	.word	0x40021000
 8003744:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003748:	4b8c      	ldr	r3, [pc, #560]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 800374a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1ea      	bne.n	800372c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 80a6 	beq.w	80038b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003764:	2300      	movs	r3, #0
 8003766:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003768:	4b84      	ldr	r3, [pc, #528]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 800376a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800376c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_RCC_OscConfig+0x2b4>
 8003774:	2301      	movs	r3, #1
 8003776:	e000      	b.n	800377a <HAL_RCC_OscConfig+0x2b6>
 8003778:	2300      	movs	r3, #0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00d      	beq.n	800379a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800377e:	4b7f      	ldr	r3, [pc, #508]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003782:	4a7e      	ldr	r2, [pc, #504]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003784:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003788:	6593      	str	r3, [r2, #88]	@ 0x58
 800378a:	4b7c      	ldr	r3, [pc, #496]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 800378c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800378e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003796:	2301      	movs	r3, #1
 8003798:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800379a:	4b79      	ldr	r3, [pc, #484]	@ (8003980 <HAL_RCC_OscConfig+0x4bc>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d118      	bne.n	80037d8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037a6:	4b76      	ldr	r3, [pc, #472]	@ (8003980 <HAL_RCC_OscConfig+0x4bc>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a75      	ldr	r2, [pc, #468]	@ (8003980 <HAL_RCC_OscConfig+0x4bc>)
 80037ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037b2:	f7fe fdfd 	bl	80023b0 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ba:	f7fe fdf9 	bl	80023b0 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e183      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037cc:	4b6c      	ldr	r3, [pc, #432]	@ (8003980 <HAL_RCC_OscConfig+0x4bc>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0f0      	beq.n	80037ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d108      	bne.n	80037f2 <HAL_RCC_OscConfig+0x32e>
 80037e0:	4b66      	ldr	r3, [pc, #408]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e6:	4a65      	ldr	r2, [pc, #404]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 80037e8:	f043 0301 	orr.w	r3, r3, #1
 80037ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037f0:	e024      	b.n	800383c <HAL_RCC_OscConfig+0x378>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2b05      	cmp	r3, #5
 80037f8:	d110      	bne.n	800381c <HAL_RCC_OscConfig+0x358>
 80037fa:	4b60      	ldr	r3, [pc, #384]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 80037fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003800:	4a5e      	ldr	r2, [pc, #376]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003802:	f043 0304 	orr.w	r3, r3, #4
 8003806:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800380a:	4b5c      	ldr	r3, [pc, #368]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 800380c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003810:	4a5a      	ldr	r2, [pc, #360]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800381a:	e00f      	b.n	800383c <HAL_RCC_OscConfig+0x378>
 800381c:	4b57      	ldr	r3, [pc, #348]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 800381e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003822:	4a56      	ldr	r2, [pc, #344]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003824:	f023 0301 	bic.w	r3, r3, #1
 8003828:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800382c:	4b53      	ldr	r3, [pc, #332]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 800382e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003832:	4a52      	ldr	r2, [pc, #328]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003834:	f023 0304 	bic.w	r3, r3, #4
 8003838:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d016      	beq.n	8003872 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003844:	f7fe fdb4 	bl	80023b0 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800384a:	e00a      	b.n	8003862 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800384c:	f7fe fdb0 	bl	80023b0 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800385a:	4293      	cmp	r3, r2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e138      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003862:	4b46      	ldr	r3, [pc, #280]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0ed      	beq.n	800384c <HAL_RCC_OscConfig+0x388>
 8003870:	e015      	b.n	800389e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003872:	f7fe fd9d 	bl	80023b0 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003878:	e00a      	b.n	8003890 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800387a:	f7fe fd99 	bl	80023b0 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003888:	4293      	cmp	r3, r2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e121      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003890:	4b3a      	ldr	r3, [pc, #232]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1ed      	bne.n	800387a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800389e:	7ffb      	ldrb	r3, [r7, #31]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d105      	bne.n	80038b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a4:	4b35      	ldr	r3, [pc, #212]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 80038a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a8:	4a34      	ldr	r2, [pc, #208]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 80038aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038ae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0320 	and.w	r3, r3, #32
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d03c      	beq.n	8003936 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d01c      	beq.n	80038fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038c4:	4b2d      	ldr	r3, [pc, #180]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 80038c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038ca:	4a2c      	ldr	r2, [pc, #176]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 80038cc:	f043 0301 	orr.w	r3, r3, #1
 80038d0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d4:	f7fe fd6c 	bl	80023b0 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038dc:	f7fe fd68 	bl	80023b0 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e0f2      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038ee:	4b23      	ldr	r3, [pc, #140]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 80038f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0ef      	beq.n	80038dc <HAL_RCC_OscConfig+0x418>
 80038fc:	e01b      	b.n	8003936 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80038fe:	4b1f      	ldr	r3, [pc, #124]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003900:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003904:	4a1d      	ldr	r2, [pc, #116]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003906:	f023 0301 	bic.w	r3, r3, #1
 800390a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390e:	f7fe fd4f 	bl	80023b0 <HAL_GetTick>
 8003912:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003914:	e008      	b.n	8003928 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003916:	f7fe fd4b 	bl	80023b0 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e0d5      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003928:	4b14      	ldr	r3, [pc, #80]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 800392a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1ef      	bne.n	8003916 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 80c9 	beq.w	8003ad2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003940:	4b0e      	ldr	r3, [pc, #56]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 030c 	and.w	r3, r3, #12
 8003948:	2b0c      	cmp	r3, #12
 800394a:	f000 8083 	beq.w	8003a54 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	2b02      	cmp	r3, #2
 8003954:	d15e      	bne.n	8003a14 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003956:	4b09      	ldr	r3, [pc, #36]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a08      	ldr	r2, [pc, #32]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 800395c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003960:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003962:	f7fe fd25 	bl	80023b0 <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003968:	e00c      	b.n	8003984 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800396a:	f7fe fd21 	bl	80023b0 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d905      	bls.n	8003984 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e0ab      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
 800397c:	40021000 	.word	0x40021000
 8003980:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003984:	4b55      	ldr	r3, [pc, #340]	@ (8003adc <HAL_RCC_OscConfig+0x618>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1ec      	bne.n	800396a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003990:	4b52      	ldr	r3, [pc, #328]	@ (8003adc <HAL_RCC_OscConfig+0x618>)
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	4b52      	ldr	r3, [pc, #328]	@ (8003ae0 <HAL_RCC_OscConfig+0x61c>)
 8003996:	4013      	ands	r3, r2
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6a11      	ldr	r1, [r2, #32]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039a0:	3a01      	subs	r2, #1
 80039a2:	0112      	lsls	r2, r2, #4
 80039a4:	4311      	orrs	r1, r2
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80039aa:	0212      	lsls	r2, r2, #8
 80039ac:	4311      	orrs	r1, r2
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80039b2:	0852      	lsrs	r2, r2, #1
 80039b4:	3a01      	subs	r2, #1
 80039b6:	0552      	lsls	r2, r2, #21
 80039b8:	4311      	orrs	r1, r2
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80039be:	0852      	lsrs	r2, r2, #1
 80039c0:	3a01      	subs	r2, #1
 80039c2:	0652      	lsls	r2, r2, #25
 80039c4:	4311      	orrs	r1, r2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80039ca:	06d2      	lsls	r2, r2, #27
 80039cc:	430a      	orrs	r2, r1
 80039ce:	4943      	ldr	r1, [pc, #268]	@ (8003adc <HAL_RCC_OscConfig+0x618>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039d4:	4b41      	ldr	r3, [pc, #260]	@ (8003adc <HAL_RCC_OscConfig+0x618>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a40      	ldr	r2, [pc, #256]	@ (8003adc <HAL_RCC_OscConfig+0x618>)
 80039da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039e0:	4b3e      	ldr	r3, [pc, #248]	@ (8003adc <HAL_RCC_OscConfig+0x618>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	4a3d      	ldr	r2, [pc, #244]	@ (8003adc <HAL_RCC_OscConfig+0x618>)
 80039e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ec:	f7fe fce0 	bl	80023b0 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f4:	f7fe fcdc 	bl	80023b0 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e066      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a06:	4b35      	ldr	r3, [pc, #212]	@ (8003adc <HAL_RCC_OscConfig+0x618>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0f0      	beq.n	80039f4 <HAL_RCC_OscConfig+0x530>
 8003a12:	e05e      	b.n	8003ad2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a14:	4b31      	ldr	r3, [pc, #196]	@ (8003adc <HAL_RCC_OscConfig+0x618>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a30      	ldr	r2, [pc, #192]	@ (8003adc <HAL_RCC_OscConfig+0x618>)
 8003a1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a20:	f7fe fcc6 	bl	80023b0 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a28:	f7fe fcc2 	bl	80023b0 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e04c      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a3a:	4b28      	ldr	r3, [pc, #160]	@ (8003adc <HAL_RCC_OscConfig+0x618>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f0      	bne.n	8003a28 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003a46:	4b25      	ldr	r3, [pc, #148]	@ (8003adc <HAL_RCC_OscConfig+0x618>)
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	4924      	ldr	r1, [pc, #144]	@ (8003adc <HAL_RCC_OscConfig+0x618>)
 8003a4c:	4b25      	ldr	r3, [pc, #148]	@ (8003ae4 <HAL_RCC_OscConfig+0x620>)
 8003a4e:	4013      	ands	r3, r2
 8003a50:	60cb      	str	r3, [r1, #12]
 8003a52:	e03e      	b.n	8003ad2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e039      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003a60:	4b1e      	ldr	r3, [pc, #120]	@ (8003adc <HAL_RCC_OscConfig+0x618>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f003 0203 	and.w	r2, r3, #3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d12c      	bne.n	8003ace <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d123      	bne.n	8003ace <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a90:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d11b      	bne.n	8003ace <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d113      	bne.n	8003ace <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab0:	085b      	lsrs	r3, r3, #1
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d109      	bne.n	8003ace <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ac4:	085b      	lsrs	r3, r3, #1
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d001      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e000      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3720      	adds	r7, #32
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	019f800c 	.word	0x019f800c
 8003ae4:	feeefffc 	.word	0xfeeefffc

08003ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e11e      	b.n	8003d3e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b00:	4b91      	ldr	r3, [pc, #580]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 030f 	and.w	r3, r3, #15
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d910      	bls.n	8003b30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0e:	4b8e      	ldr	r3, [pc, #568]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f023 020f 	bic.w	r2, r3, #15
 8003b16:	498c      	ldr	r1, [pc, #560]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1e:	4b8a      	ldr	r3, [pc, #552]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e106      	b.n	8003d3e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d073      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	2b03      	cmp	r3, #3
 8003b42:	d129      	bne.n	8003b98 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b44:	4b81      	ldr	r3, [pc, #516]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e0f4      	b.n	8003d3e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003b54:	f000 f99e 	bl	8003e94 <RCC_GetSysClockFreqFromPLLSource>
 8003b58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	4a7c      	ldr	r2, [pc, #496]	@ (8003d50 <HAL_RCC_ClockConfig+0x268>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d93f      	bls.n	8003be2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b62:	4b7a      	ldr	r3, [pc, #488]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d009      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d033      	beq.n	8003be2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d12f      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b82:	4b72      	ldr	r3, [pc, #456]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b8a:	4a70      	ldr	r2, [pc, #448]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003b8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b90:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b92:	2380      	movs	r3, #128	@ 0x80
 8003b94:	617b      	str	r3, [r7, #20]
 8003b96:	e024      	b.n	8003be2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d107      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ba0:	4b6a      	ldr	r3, [pc, #424]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d109      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e0c6      	b.n	8003d3e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bb0:	4b66      	ldr	r3, [pc, #408]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e0be      	b.n	8003d3e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003bc0:	f000 f8ce 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 8003bc4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	4a61      	ldr	r2, [pc, #388]	@ (8003d50 <HAL_RCC_ClockConfig+0x268>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d909      	bls.n	8003be2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bce:	4b5f      	ldr	r3, [pc, #380]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bd6:	4a5d      	ldr	r2, [pc, #372]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003bd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bdc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003bde:	2380      	movs	r3, #128	@ 0x80
 8003be0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003be2:	4b5a      	ldr	r3, [pc, #360]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f023 0203 	bic.w	r2, r3, #3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	4957      	ldr	r1, [pc, #348]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bf4:	f7fe fbdc 	bl	80023b0 <HAL_GetTick>
 8003bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bfa:	e00a      	b.n	8003c12 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bfc:	f7fe fbd8 	bl	80023b0 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e095      	b.n	8003d3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c12:	4b4e      	ldr	r3, [pc, #312]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 020c 	and.w	r2, r3, #12
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d1eb      	bne.n	8003bfc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d023      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d005      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c3c:	4b43      	ldr	r3, [pc, #268]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	4a42      	ldr	r2, [pc, #264]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003c42:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c46:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0308 	and.w	r3, r3, #8
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d007      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003c54:	4b3d      	ldr	r3, [pc, #244]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c5c:	4a3b      	ldr	r2, [pc, #236]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003c5e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c64:	4b39      	ldr	r3, [pc, #228]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	4936      	ldr	r1, [pc, #216]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	608b      	str	r3, [r1, #8]
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	2b80      	cmp	r3, #128	@ 0x80
 8003c7c:	d105      	bne.n	8003c8a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003c7e:	4b33      	ldr	r3, [pc, #204]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	4a32      	ldr	r2, [pc, #200]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003c84:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c88:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c8a:	4b2f      	ldr	r3, [pc, #188]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d21d      	bcs.n	8003cd4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c98:	4b2b      	ldr	r3, [pc, #172]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f023 020f 	bic.w	r2, r3, #15
 8003ca0:	4929      	ldr	r1, [pc, #164]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ca8:	f7fe fb82 	bl	80023b0 <HAL_GetTick>
 8003cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cae:	e00a      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb0:	f7fe fb7e 	bl	80023b0 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e03b      	b.n	8003d3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc6:	4b20      	ldr	r3, [pc, #128]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d1ed      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	4917      	ldr	r1, [pc, #92]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d009      	beq.n	8003d12 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cfe:	4b13      	ldr	r3, [pc, #76]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	490f      	ldr	r1, [pc, #60]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d12:	f000 f825 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 8003d16:	4602      	mov	r2, r0
 8003d18:	4b0c      	ldr	r3, [pc, #48]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	091b      	lsrs	r3, r3, #4
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	490c      	ldr	r1, [pc, #48]	@ (8003d54 <HAL_RCC_ClockConfig+0x26c>)
 8003d24:	5ccb      	ldrb	r3, [r1, r3]
 8003d26:	f003 031f 	and.w	r3, r3, #31
 8003d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003d58 <HAL_RCC_ClockConfig+0x270>)
 8003d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003d32:	4b0a      	ldr	r3, [pc, #40]	@ (8003d5c <HAL_RCC_ClockConfig+0x274>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fe faee 	bl	8002318 <HAL_InitTick>
 8003d3c:	4603      	mov	r3, r0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40022000 	.word	0x40022000
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	04c4b400 	.word	0x04c4b400
 8003d54:	0800644c 	.word	0x0800644c
 8003d58:	20000000 	.word	0x20000000
 8003d5c:	2000000c 	.word	0x2000000c

08003d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d66:	4b2c      	ldr	r3, [pc, #176]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	d102      	bne.n	8003d78 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d72:	4b2a      	ldr	r3, [pc, #168]	@ (8003e1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	e047      	b.n	8003e08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d78:	4b27      	ldr	r3, [pc, #156]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 030c 	and.w	r3, r3, #12
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d102      	bne.n	8003d8a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d84:	4b26      	ldr	r3, [pc, #152]	@ (8003e20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d86:	613b      	str	r3, [r7, #16]
 8003d88:	e03e      	b.n	8003e08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003d8a:	4b23      	ldr	r3, [pc, #140]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 030c 	and.w	r3, r3, #12
 8003d92:	2b0c      	cmp	r3, #12
 8003d94:	d136      	bne.n	8003e04 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d96:	4b20      	ldr	r3, [pc, #128]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003da0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	091b      	lsrs	r3, r3, #4
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	3301      	adds	r3, #1
 8003dac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2b03      	cmp	r3, #3
 8003db2:	d10c      	bne.n	8003dce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003db4:	4a1a      	ldr	r2, [pc, #104]	@ (8003e20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbc:	4a16      	ldr	r2, [pc, #88]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dbe:	68d2      	ldr	r2, [r2, #12]
 8003dc0:	0a12      	lsrs	r2, r2, #8
 8003dc2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003dc6:	fb02 f303 	mul.w	r3, r2, r3
 8003dca:	617b      	str	r3, [r7, #20]
      break;
 8003dcc:	e00c      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dce:	4a13      	ldr	r2, [pc, #76]	@ (8003e1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd6:	4a10      	ldr	r2, [pc, #64]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dd8:	68d2      	ldr	r2, [r2, #12]
 8003dda:	0a12      	lsrs	r2, r2, #8
 8003ddc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003de0:	fb02 f303 	mul.w	r3, r2, r3
 8003de4:	617b      	str	r3, [r7, #20]
      break;
 8003de6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003de8:	4b0b      	ldr	r3, [pc, #44]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	0e5b      	lsrs	r3, r3, #25
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	3301      	adds	r3, #1
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e00:	613b      	str	r3, [r7, #16]
 8003e02:	e001      	b.n	8003e08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003e08:	693b      	ldr	r3, [r7, #16]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	371c      	adds	r7, #28
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	00f42400 	.word	0x00f42400
 8003e20:	017d7840 	.word	0x017d7840

08003e24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e28:	4b03      	ldr	r3, [pc, #12]	@ (8003e38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	20000000 	.word	0x20000000

08003e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e40:	f7ff fff0 	bl	8003e24 <HAL_RCC_GetHCLKFreq>
 8003e44:	4602      	mov	r2, r0
 8003e46:	4b06      	ldr	r3, [pc, #24]	@ (8003e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	0a1b      	lsrs	r3, r3, #8
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	4904      	ldr	r1, [pc, #16]	@ (8003e64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e52:	5ccb      	ldrb	r3, [r1, r3]
 8003e54:	f003 031f 	and.w	r3, r3, #31
 8003e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40021000 	.word	0x40021000
 8003e64:	0800645c 	.word	0x0800645c

08003e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e6c:	f7ff ffda 	bl	8003e24 <HAL_RCC_GetHCLKFreq>
 8003e70:	4602      	mov	r2, r0
 8003e72:	4b06      	ldr	r3, [pc, #24]	@ (8003e8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	0adb      	lsrs	r3, r3, #11
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	4904      	ldr	r1, [pc, #16]	@ (8003e90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e7e:	5ccb      	ldrb	r3, [r1, r3]
 8003e80:	f003 031f 	and.w	r3, r3, #31
 8003e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	0800645c 	.word	0x0800645c

08003e94 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8003f14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f003 0303 	and.w	r3, r3, #3
 8003ea2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8003f14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	091b      	lsrs	r3, r3, #4
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	3301      	adds	r3, #1
 8003eb0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	2b03      	cmp	r3, #3
 8003eb6:	d10c      	bne.n	8003ed2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003eb8:	4a17      	ldr	r2, [pc, #92]	@ (8003f18 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec0:	4a14      	ldr	r2, [pc, #80]	@ (8003f14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ec2:	68d2      	ldr	r2, [r2, #12]
 8003ec4:	0a12      	lsrs	r2, r2, #8
 8003ec6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003eca:	fb02 f303 	mul.w	r3, r2, r3
 8003ece:	617b      	str	r3, [r7, #20]
    break;
 8003ed0:	e00c      	b.n	8003eec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ed2:	4a12      	ldr	r2, [pc, #72]	@ (8003f1c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eda:	4a0e      	ldr	r2, [pc, #56]	@ (8003f14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003edc:	68d2      	ldr	r2, [r2, #12]
 8003ede:	0a12      	lsrs	r2, r2, #8
 8003ee0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ee4:	fb02 f303 	mul.w	r3, r2, r3
 8003ee8:	617b      	str	r3, [r7, #20]
    break;
 8003eea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003eec:	4b09      	ldr	r3, [pc, #36]	@ (8003f14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	0e5b      	lsrs	r3, r3, #25
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f04:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003f06:	687b      	ldr	r3, [r7, #4]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	371c      	adds	r7, #28
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	40021000 	.word	0x40021000
 8003f18:	017d7840 	.word	0x017d7840
 8003f1c:	00f42400 	.word	0x00f42400

08003f20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f28:	2300      	movs	r3, #0
 8003f2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 8098 	beq.w	800406e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f42:	4b43      	ldr	r3, [pc, #268]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10d      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f4e:	4b40      	ldr	r3, [pc, #256]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f52:	4a3f      	ldr	r2, [pc, #252]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f58:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f5a:	4b3d      	ldr	r3, [pc, #244]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f62:	60bb      	str	r3, [r7, #8]
 8003f64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f66:	2301      	movs	r3, #1
 8003f68:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f6a:	4b3a      	ldr	r3, [pc, #232]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a39      	ldr	r2, [pc, #228]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f76:	f7fe fa1b 	bl	80023b0 <HAL_GetTick>
 8003f7a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f7c:	e009      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f7e:	f7fe fa17 	bl	80023b0 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d902      	bls.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	74fb      	strb	r3, [r7, #19]
        break;
 8003f90:	e005      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f92:	4b30      	ldr	r3, [pc, #192]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0ef      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003f9e:	7cfb      	ldrb	r3, [r7, #19]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d159      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fa4:	4b2a      	ldr	r3, [pc, #168]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003faa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d01e      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d019      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fc0:	4b23      	ldr	r3, [pc, #140]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fcc:	4b20      	ldr	r3, [pc, #128]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd2:	4a1f      	ldr	r2, [pc, #124]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fdc:	4b1c      	ldr	r3, [pc, #112]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fe2:	4a1b      	ldr	r2, [pc, #108]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fe4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fe8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003fec:	4a18      	ldr	r2, [pc, #96]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d016      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffe:	f7fe f9d7 	bl	80023b0 <HAL_GetTick>
 8004002:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004004:	e00b      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004006:	f7fe f9d3 	bl	80023b0 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004014:	4293      	cmp	r3, r2
 8004016:	d902      	bls.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	74fb      	strb	r3, [r7, #19]
            break;
 800401c:	e006      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800401e:	4b0c      	ldr	r3, [pc, #48]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0ec      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800402c:	7cfb      	ldrb	r3, [r7, #19]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10b      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004032:	4b07      	ldr	r3, [pc, #28]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004038:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004040:	4903      	ldr	r1, [pc, #12]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004042:	4313      	orrs	r3, r2
 8004044:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004048:	e008      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800404a:	7cfb      	ldrb	r3, [r7, #19]
 800404c:	74bb      	strb	r3, [r7, #18]
 800404e:	e005      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004050:	40021000 	.word	0x40021000
 8004054:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004058:	7cfb      	ldrb	r3, [r7, #19]
 800405a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800405c:	7c7b      	ldrb	r3, [r7, #17]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d105      	bne.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004062:	4ba7      	ldr	r3, [pc, #668]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004066:	4aa6      	ldr	r2, [pc, #664]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004068:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800406c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800407a:	4ba1      	ldr	r3, [pc, #644]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800407c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004080:	f023 0203 	bic.w	r2, r3, #3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	499d      	ldr	r1, [pc, #628]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00a      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800409c:	4b98      	ldr	r3, [pc, #608]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800409e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a2:	f023 020c 	bic.w	r2, r3, #12
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	4995      	ldr	r1, [pc, #596]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040be:	4b90      	ldr	r3, [pc, #576]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	498c      	ldr	r1, [pc, #560]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0308 	and.w	r3, r3, #8
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00a      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040e0:	4b87      	ldr	r3, [pc, #540]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	4984      	ldr	r1, [pc, #528]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0310 	and.w	r3, r3, #16
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004102:	4b7f      	ldr	r3, [pc, #508]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004108:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	497b      	ldr	r1, [pc, #492]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004112:	4313      	orrs	r3, r2
 8004114:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0320 	and.w	r3, r3, #32
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00a      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004124:	4b76      	ldr	r3, [pc, #472]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	4973      	ldr	r1, [pc, #460]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00a      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004146:	4b6e      	ldr	r3, [pc, #440]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800414c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	496a      	ldr	r1, [pc, #424]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004156:	4313      	orrs	r3, r2
 8004158:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00a      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004168:	4b65      	ldr	r3, [pc, #404]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800416a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800416e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	4962      	ldr	r1, [pc, #392]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004178:	4313      	orrs	r3, r2
 800417a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00a      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800418a:	4b5d      	ldr	r3, [pc, #372]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800418c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004190:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004198:	4959      	ldr	r1, [pc, #356]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800419a:	4313      	orrs	r3, r2
 800419c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00a      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041ac:	4b54      	ldr	r3, [pc, #336]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041b2:	f023 0203 	bic.w	r2, r3, #3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ba:	4951      	ldr	r1, [pc, #324]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00a      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041ce:	4b4c      	ldr	r3, [pc, #304]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041dc:	4948      	ldr	r1, [pc, #288]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d015      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041f0:	4b43      	ldr	r3, [pc, #268]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041fe:	4940      	ldr	r1, [pc, #256]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800420a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800420e:	d105      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004210:	4b3b      	ldr	r3, [pc, #236]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	4a3a      	ldr	r2, [pc, #232]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004216:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800421a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004224:	2b00      	cmp	r3, #0
 8004226:	d015      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004228:	4b35      	ldr	r3, [pc, #212]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800422a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800422e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004236:	4932      	ldr	r1, [pc, #200]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004238:	4313      	orrs	r3, r2
 800423a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004242:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004246:	d105      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004248:	4b2d      	ldr	r3, [pc, #180]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	4a2c      	ldr	r2, [pc, #176]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004252:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d015      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004260:	4b27      	ldr	r3, [pc, #156]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004266:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800426e:	4924      	ldr	r1, [pc, #144]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800427a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800427e:	d105      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004280:	4b1f      	ldr	r3, [pc, #124]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	4a1e      	ldr	r2, [pc, #120]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004286:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800428a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d015      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004298:	4b19      	ldr	r3, [pc, #100]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800429a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800429e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a6:	4916      	ldr	r1, [pc, #88]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042b6:	d105      	bne.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042b8:	4b11      	ldr	r3, [pc, #68]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	4a10      	ldr	r2, [pc, #64]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d019      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042de:	4908      	ldr	r1, [pc, #32]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042ee:	d109      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042f0:	4b03      	ldr	r3, [pc, #12]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	4a02      	ldr	r2, [pc, #8]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042fa:	60d3      	str	r3, [r2, #12]
 80042fc:	e002      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80042fe:	bf00      	nop
 8004300:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d015      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004310:	4b29      	ldr	r3, [pc, #164]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004316:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800431e:	4926      	ldr	r1, [pc, #152]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004320:	4313      	orrs	r3, r2
 8004322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800432a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800432e:	d105      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004330:	4b21      	ldr	r3, [pc, #132]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	4a20      	ldr	r2, [pc, #128]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004336:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800433a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d015      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004348:	4b1b      	ldr	r3, [pc, #108]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800434a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800434e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004356:	4918      	ldr	r1, [pc, #96]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004358:	4313      	orrs	r3, r2
 800435a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004366:	d105      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004368:	4b13      	ldr	r3, [pc, #76]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	4a12      	ldr	r2, [pc, #72]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800436e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004372:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d015      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004380:	4b0d      	ldr	r3, [pc, #52]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004382:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004386:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800438e:	490a      	ldr	r1, [pc, #40]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004390:	4313      	orrs	r3, r2
 8004392:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800439a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800439e:	d105      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043a0:	4b05      	ldr	r3, [pc, #20]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	4a04      	ldr	r2, [pc, #16]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043aa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80043ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	40021000 	.word	0x40021000

080043bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e042      	b.n	8004454 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d106      	bne.n	80043e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f7fc fa07 	bl	80007f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2224      	movs	r2, #36	@ 0x24
 80043ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0201 	bic.w	r2, r2, #1
 80043fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004402:	2b00      	cmp	r3, #0
 8004404:	d002      	beq.n	800440c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fefe 	bl	8005208 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 fbff 	bl	8004c10 <UART_SetConfig>
 8004412:	4603      	mov	r3, r0
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e01b      	b.n	8004454 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800442a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800443a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0201 	orr.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 ff7d 	bl	800534c <UART_CheckIdleState>
 8004452:	4603      	mov	r3, r0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b08a      	sub	sp, #40	@ 0x28
 8004460:	af02      	add	r7, sp, #8
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	603b      	str	r3, [r7, #0]
 8004468:	4613      	mov	r3, r2
 800446a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004472:	2b20      	cmp	r3, #32
 8004474:	d17b      	bne.n	800456e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d002      	beq.n	8004482 <HAL_UART_Transmit+0x26>
 800447c:	88fb      	ldrh	r3, [r7, #6]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e074      	b.n	8004570 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2221      	movs	r2, #33	@ 0x21
 8004492:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004496:	f7fd ff8b 	bl	80023b0 <HAL_GetTick>
 800449a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	88fa      	ldrh	r2, [r7, #6]
 80044a0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	88fa      	ldrh	r2, [r7, #6]
 80044a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044b4:	d108      	bne.n	80044c8 <HAL_UART_Transmit+0x6c>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d104      	bne.n	80044c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80044be:	2300      	movs	r3, #0
 80044c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	61bb      	str	r3, [r7, #24]
 80044c6:	e003      	b.n	80044d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044cc:	2300      	movs	r3, #0
 80044ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044d0:	e030      	b.n	8004534 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2200      	movs	r2, #0
 80044da:	2180      	movs	r1, #128	@ 0x80
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 ffdf 	bl	80054a0 <UART_WaitOnFlagUntilTimeout>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d005      	beq.n	80044f4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2220      	movs	r2, #32
 80044ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e03d      	b.n	8004570 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10b      	bne.n	8004512 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	881b      	ldrh	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004508:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	3302      	adds	r3, #2
 800450e:	61bb      	str	r3, [r7, #24]
 8004510:	e007      	b.n	8004522 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	781a      	ldrb	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	3301      	adds	r3, #1
 8004520:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004528:	b29b      	uxth	r3, r3
 800452a:	3b01      	subs	r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800453a:	b29b      	uxth	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1c8      	bne.n	80044d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	2200      	movs	r2, #0
 8004548:	2140      	movs	r1, #64	@ 0x40
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 ffa8 	bl	80054a0 <UART_WaitOnFlagUntilTimeout>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d005      	beq.n	8004562 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2220      	movs	r2, #32
 800455a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e006      	b.n	8004570 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2220      	movs	r2, #32
 8004566:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	e000      	b.n	8004570 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800456e:	2302      	movs	r3, #2
  }
}
 8004570:	4618      	mov	r0, r3
 8004572:	3720      	adds	r7, #32
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b0ba      	sub	sp, #232	@ 0xe8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800459e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80045a2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80045a6:	4013      	ands	r3, r2
 80045a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80045ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d11b      	bne.n	80045ec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80045b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045b8:	f003 0320 	and.w	r3, r3, #32
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d015      	beq.n	80045ec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80045c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045c4:	f003 0320 	and.w	r3, r3, #32
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d105      	bne.n	80045d8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80045cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d009      	beq.n	80045ec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 82e3 	beq.w	8004ba8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	4798      	blx	r3
      }
      return;
 80045ea:	e2dd      	b.n	8004ba8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80045ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 8123 	beq.w	800483c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80045f6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80045fa:	4b8d      	ldr	r3, [pc, #564]	@ (8004830 <HAL_UART_IRQHandler+0x2b8>)
 80045fc:	4013      	ands	r3, r2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d106      	bne.n	8004610 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004602:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004606:	4b8b      	ldr	r3, [pc, #556]	@ (8004834 <HAL_UART_IRQHandler+0x2bc>)
 8004608:	4013      	ands	r3, r2
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 8116 	beq.w	800483c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d011      	beq.n	8004640 <HAL_UART_IRQHandler+0xc8>
 800461c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00b      	beq.n	8004640 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2201      	movs	r2, #1
 800462e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004636:	f043 0201 	orr.w	r2, r3, #1
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d011      	beq.n	8004670 <HAL_UART_IRQHandler+0xf8>
 800464c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00b      	beq.n	8004670 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2202      	movs	r2, #2
 800465e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004666:	f043 0204 	orr.w	r2, r3, #4
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	d011      	beq.n	80046a0 <HAL_UART_IRQHandler+0x128>
 800467c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00b      	beq.n	80046a0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2204      	movs	r2, #4
 800468e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004696:	f043 0202 	orr.w	r2, r3, #2
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80046a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d017      	beq.n	80046dc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80046ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046b0:	f003 0320 	and.w	r3, r3, #32
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d105      	bne.n	80046c4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80046b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80046bc:	4b5c      	ldr	r3, [pc, #368]	@ (8004830 <HAL_UART_IRQHandler+0x2b8>)
 80046be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00b      	beq.n	80046dc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2208      	movs	r2, #8
 80046ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046d2:	f043 0208 	orr.w	r2, r3, #8
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80046dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d012      	beq.n	800470e <HAL_UART_IRQHandler+0x196>
 80046e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00c      	beq.n	800470e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80046fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004704:	f043 0220 	orr.w	r2, r3, #32
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 8249 	beq.w	8004bac <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800471a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800471e:	f003 0320 	and.w	r3, r3, #32
 8004722:	2b00      	cmp	r3, #0
 8004724:	d013      	beq.n	800474e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800472a:	f003 0320 	and.w	r3, r3, #32
 800472e:	2b00      	cmp	r3, #0
 8004730:	d105      	bne.n	800473e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d007      	beq.n	800474e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004754:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004762:	2b40      	cmp	r3, #64	@ 0x40
 8004764:	d005      	beq.n	8004772 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004766:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800476a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800476e:	2b00      	cmp	r3, #0
 8004770:	d054      	beq.n	800481c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 ffe9 	bl	800574a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004782:	2b40      	cmp	r3, #64	@ 0x40
 8004784:	d146      	bne.n	8004814 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	3308      	adds	r3, #8
 800478c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004790:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004794:	e853 3f00 	ldrex	r3, [r3]
 8004798:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800479c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80047a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	3308      	adds	r3, #8
 80047ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80047b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80047b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80047be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80047c2:	e841 2300 	strex	r3, r2, [r1]
 80047c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80047ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1d9      	bne.n	8004786 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d017      	beq.n	800480c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047e2:	4a15      	ldr	r2, [pc, #84]	@ (8004838 <HAL_UART_IRQHandler+0x2c0>)
 80047e4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7fe fa7d 	bl	8002cec <HAL_DMA_Abort_IT>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d019      	beq.n	800482c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004806:	4610      	mov	r0, r2
 8004808:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800480a:	e00f      	b.n	800482c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f9f5 	bl	8004bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004812:	e00b      	b.n	800482c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f9f1 	bl	8004bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800481a:	e007      	b.n	800482c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f9ed 	bl	8004bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800482a:	e1bf      	b.n	8004bac <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800482c:	bf00      	nop
    return;
 800482e:	e1bd      	b.n	8004bac <HAL_UART_IRQHandler+0x634>
 8004830:	10000001 	.word	0x10000001
 8004834:	04000120 	.word	0x04000120
 8004838:	08005a01 	.word	0x08005a01

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004840:	2b01      	cmp	r3, #1
 8004842:	f040 8153 	bne.w	8004aec <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800484a:	f003 0310 	and.w	r3, r3, #16
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 814c 	beq.w	8004aec <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004858:	f003 0310 	and.w	r3, r3, #16
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 8145 	beq.w	8004aec <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2210      	movs	r2, #16
 8004868:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004874:	2b40      	cmp	r3, #64	@ 0x40
 8004876:	f040 80bb 	bne.w	80049f0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004888:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 818f 	beq.w	8004bb0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004898:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800489c:	429a      	cmp	r2, r3
 800489e:	f080 8187 	bcs.w	8004bb0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f040 8087 	bne.w	80049ce <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80048cc:	e853 3f00 	ldrex	r3, [r3]
 80048d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80048d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	461a      	mov	r2, r3
 80048e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80048ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80048ee:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80048f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80048fa:	e841 2300 	strex	r3, r2, [r1]
 80048fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004902:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1da      	bne.n	80048c0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	3308      	adds	r3, #8
 8004910:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004912:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004914:	e853 3f00 	ldrex	r3, [r3]
 8004918:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800491a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800491c:	f023 0301 	bic.w	r3, r3, #1
 8004920:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	3308      	adds	r3, #8
 800492a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800492e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004932:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004934:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004936:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800493a:	e841 2300 	strex	r3, r2, [r1]
 800493e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004940:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1e1      	bne.n	800490a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	3308      	adds	r3, #8
 800494c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004950:	e853 3f00 	ldrex	r3, [r3]
 8004954:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004956:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004958:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800495c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3308      	adds	r3, #8
 8004966:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800496a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800496c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004970:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004972:	e841 2300 	strex	r3, r2, [r1]
 8004976:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004978:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1e3      	bne.n	8004946 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2220      	movs	r2, #32
 8004982:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004992:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004994:	e853 3f00 	ldrex	r3, [r3]
 8004998:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800499a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800499c:	f023 0310 	bic.w	r3, r3, #16
 80049a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	461a      	mov	r2, r3
 80049aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80049ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80049b0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80049b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80049b6:	e841 2300 	strex	r3, r2, [r1]
 80049ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80049bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1e4      	bne.n	800498c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fe f936 	bl	8002c3a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2202      	movs	r2, #2
 80049d2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	4619      	mov	r1, r3
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7fc f9eb 	bl	8000dc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049ee:	e0df      	b.n	8004bb0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 80d1 	beq.w	8004bb4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004a12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f000 80cc 	beq.w	8004bb4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a24:	e853 3f00 	ldrex	r3, [r3]
 8004a28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004a3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a40:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a46:	e841 2300 	strex	r3, r2, [r1]
 8004a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1e4      	bne.n	8004a1c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	3308      	adds	r3, #8
 8004a58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5c:	e853 3f00 	ldrex	r3, [r3]
 8004a60:	623b      	str	r3, [r7, #32]
   return(result);
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a68:	f023 0301 	bic.w	r3, r3, #1
 8004a6c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	3308      	adds	r3, #8
 8004a76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004a7a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a82:	e841 2300 	strex	r3, r2, [r1]
 8004a86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1e1      	bne.n	8004a52 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	e853 3f00 	ldrex	r3, [r3]
 8004aae:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f023 0310 	bic.w	r3, r3, #16
 8004ab6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004ac4:	61fb      	str	r3, [r7, #28]
 8004ac6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac8:	69b9      	ldr	r1, [r7, #24]
 8004aca:	69fa      	ldr	r2, [r7, #28]
 8004acc:	e841 2300 	strex	r3, r2, [r1]
 8004ad0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1e4      	bne.n	8004aa2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2202      	movs	r2, #2
 8004adc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ade:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7fc f96d 	bl	8000dc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004aea:	e063      	b.n	8004bb4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004af0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00e      	beq.n	8004b16 <HAL_UART_IRQHandler+0x59e>
 8004af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004afc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d008      	beq.n	8004b16 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004b0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 ffb7 	bl	8005a82 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b14:	e051      	b.n	8004bba <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d014      	beq.n	8004b4c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d105      	bne.n	8004b3a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004b2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d008      	beq.n	8004b4c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d03a      	beq.n	8004bb8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	4798      	blx	r3
    }
    return;
 8004b4a:	e035      	b.n	8004bb8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d009      	beq.n	8004b6c <HAL_UART_IRQHandler+0x5f4>
 8004b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d003      	beq.n	8004b6c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 ff61 	bl	8005a2c <UART_EndTransmit_IT>
    return;
 8004b6a:	e026      	b.n	8004bba <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d009      	beq.n	8004b8c <HAL_UART_IRQHandler+0x614>
 8004b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b7c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d003      	beq.n	8004b8c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 ff90 	bl	8005aaa <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b8a:	e016      	b.n	8004bba <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d010      	beq.n	8004bba <HAL_UART_IRQHandler+0x642>
 8004b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	da0c      	bge.n	8004bba <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 ff78 	bl	8005a96 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ba6:	e008      	b.n	8004bba <HAL_UART_IRQHandler+0x642>
      return;
 8004ba8:	bf00      	nop
 8004baa:	e006      	b.n	8004bba <HAL_UART_IRQHandler+0x642>
    return;
 8004bac:	bf00      	nop
 8004bae:	e004      	b.n	8004bba <HAL_UART_IRQHandler+0x642>
      return;
 8004bb0:	bf00      	nop
 8004bb2:	e002      	b.n	8004bba <HAL_UART_IRQHandler+0x642>
      return;
 8004bb4:	bf00      	nop
 8004bb6:	e000      	b.n	8004bba <HAL_UART_IRQHandler+0x642>
    return;
 8004bb8:	bf00      	nop
  }
}
 8004bba:	37e8      	adds	r7, #232	@ 0xe8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c14:	b08c      	sub	sp, #48	@ 0x30
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	689a      	ldr	r2, [r3, #8]
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	4baa      	ldr	r3, [pc, #680]	@ (8004ee8 <UART_SetConfig+0x2d8>)
 8004c40:	4013      	ands	r3, r2
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	6812      	ldr	r2, [r2, #0]
 8004c46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c48:	430b      	orrs	r3, r1
 8004c4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	68da      	ldr	r2, [r3, #12]
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a9f      	ldr	r2, [pc, #636]	@ (8004eec <UART_SetConfig+0x2dc>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d004      	beq.n	8004c7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004c86:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	6812      	ldr	r2, [r2, #0]
 8004c8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c90:	430b      	orrs	r3, r1
 8004c92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9a:	f023 010f 	bic.w	r1, r3, #15
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a90      	ldr	r2, [pc, #576]	@ (8004ef0 <UART_SetConfig+0x2e0>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d125      	bne.n	8004d00 <UART_SetConfig+0xf0>
 8004cb4:	4b8f      	ldr	r3, [pc, #572]	@ (8004ef4 <UART_SetConfig+0x2e4>)
 8004cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	2b03      	cmp	r3, #3
 8004cc0:	d81a      	bhi.n	8004cf8 <UART_SetConfig+0xe8>
 8004cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8004cc8 <UART_SetConfig+0xb8>)
 8004cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc8:	08004cd9 	.word	0x08004cd9
 8004ccc:	08004ce9 	.word	0x08004ce9
 8004cd0:	08004ce1 	.word	0x08004ce1
 8004cd4:	08004cf1 	.word	0x08004cf1
 8004cd8:	2301      	movs	r3, #1
 8004cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cde:	e116      	b.n	8004f0e <UART_SetConfig+0x2fe>
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ce6:	e112      	b.n	8004f0e <UART_SetConfig+0x2fe>
 8004ce8:	2304      	movs	r3, #4
 8004cea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cee:	e10e      	b.n	8004f0e <UART_SetConfig+0x2fe>
 8004cf0:	2308      	movs	r3, #8
 8004cf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cf6:	e10a      	b.n	8004f0e <UART_SetConfig+0x2fe>
 8004cf8:	2310      	movs	r3, #16
 8004cfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cfe:	e106      	b.n	8004f0e <UART_SetConfig+0x2fe>
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a7c      	ldr	r2, [pc, #496]	@ (8004ef8 <UART_SetConfig+0x2e8>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d138      	bne.n	8004d7c <UART_SetConfig+0x16c>
 8004d0a:	4b7a      	ldr	r3, [pc, #488]	@ (8004ef4 <UART_SetConfig+0x2e4>)
 8004d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d10:	f003 030c 	and.w	r3, r3, #12
 8004d14:	2b0c      	cmp	r3, #12
 8004d16:	d82d      	bhi.n	8004d74 <UART_SetConfig+0x164>
 8004d18:	a201      	add	r2, pc, #4	@ (adr r2, 8004d20 <UART_SetConfig+0x110>)
 8004d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1e:	bf00      	nop
 8004d20:	08004d55 	.word	0x08004d55
 8004d24:	08004d75 	.word	0x08004d75
 8004d28:	08004d75 	.word	0x08004d75
 8004d2c:	08004d75 	.word	0x08004d75
 8004d30:	08004d65 	.word	0x08004d65
 8004d34:	08004d75 	.word	0x08004d75
 8004d38:	08004d75 	.word	0x08004d75
 8004d3c:	08004d75 	.word	0x08004d75
 8004d40:	08004d5d 	.word	0x08004d5d
 8004d44:	08004d75 	.word	0x08004d75
 8004d48:	08004d75 	.word	0x08004d75
 8004d4c:	08004d75 	.word	0x08004d75
 8004d50:	08004d6d 	.word	0x08004d6d
 8004d54:	2300      	movs	r3, #0
 8004d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d5a:	e0d8      	b.n	8004f0e <UART_SetConfig+0x2fe>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d62:	e0d4      	b.n	8004f0e <UART_SetConfig+0x2fe>
 8004d64:	2304      	movs	r3, #4
 8004d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d6a:	e0d0      	b.n	8004f0e <UART_SetConfig+0x2fe>
 8004d6c:	2308      	movs	r3, #8
 8004d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d72:	e0cc      	b.n	8004f0e <UART_SetConfig+0x2fe>
 8004d74:	2310      	movs	r3, #16
 8004d76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d7a:	e0c8      	b.n	8004f0e <UART_SetConfig+0x2fe>
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a5e      	ldr	r2, [pc, #376]	@ (8004efc <UART_SetConfig+0x2ec>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d125      	bne.n	8004dd2 <UART_SetConfig+0x1c2>
 8004d86:	4b5b      	ldr	r3, [pc, #364]	@ (8004ef4 <UART_SetConfig+0x2e4>)
 8004d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d8c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004d90:	2b30      	cmp	r3, #48	@ 0x30
 8004d92:	d016      	beq.n	8004dc2 <UART_SetConfig+0x1b2>
 8004d94:	2b30      	cmp	r3, #48	@ 0x30
 8004d96:	d818      	bhi.n	8004dca <UART_SetConfig+0x1ba>
 8004d98:	2b20      	cmp	r3, #32
 8004d9a:	d00a      	beq.n	8004db2 <UART_SetConfig+0x1a2>
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	d814      	bhi.n	8004dca <UART_SetConfig+0x1ba>
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d002      	beq.n	8004daa <UART_SetConfig+0x19a>
 8004da4:	2b10      	cmp	r3, #16
 8004da6:	d008      	beq.n	8004dba <UART_SetConfig+0x1aa>
 8004da8:	e00f      	b.n	8004dca <UART_SetConfig+0x1ba>
 8004daa:	2300      	movs	r3, #0
 8004dac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004db0:	e0ad      	b.n	8004f0e <UART_SetConfig+0x2fe>
 8004db2:	2302      	movs	r3, #2
 8004db4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004db8:	e0a9      	b.n	8004f0e <UART_SetConfig+0x2fe>
 8004dba:	2304      	movs	r3, #4
 8004dbc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dc0:	e0a5      	b.n	8004f0e <UART_SetConfig+0x2fe>
 8004dc2:	2308      	movs	r3, #8
 8004dc4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dc8:	e0a1      	b.n	8004f0e <UART_SetConfig+0x2fe>
 8004dca:	2310      	movs	r3, #16
 8004dcc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dd0:	e09d      	b.n	8004f0e <UART_SetConfig+0x2fe>
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a4a      	ldr	r2, [pc, #296]	@ (8004f00 <UART_SetConfig+0x2f0>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d125      	bne.n	8004e28 <UART_SetConfig+0x218>
 8004ddc:	4b45      	ldr	r3, [pc, #276]	@ (8004ef4 <UART_SetConfig+0x2e4>)
 8004dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004de2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004de6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004de8:	d016      	beq.n	8004e18 <UART_SetConfig+0x208>
 8004dea:	2bc0      	cmp	r3, #192	@ 0xc0
 8004dec:	d818      	bhi.n	8004e20 <UART_SetConfig+0x210>
 8004dee:	2b80      	cmp	r3, #128	@ 0x80
 8004df0:	d00a      	beq.n	8004e08 <UART_SetConfig+0x1f8>
 8004df2:	2b80      	cmp	r3, #128	@ 0x80
 8004df4:	d814      	bhi.n	8004e20 <UART_SetConfig+0x210>
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <UART_SetConfig+0x1f0>
 8004dfa:	2b40      	cmp	r3, #64	@ 0x40
 8004dfc:	d008      	beq.n	8004e10 <UART_SetConfig+0x200>
 8004dfe:	e00f      	b.n	8004e20 <UART_SetConfig+0x210>
 8004e00:	2300      	movs	r3, #0
 8004e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e06:	e082      	b.n	8004f0e <UART_SetConfig+0x2fe>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e0e:	e07e      	b.n	8004f0e <UART_SetConfig+0x2fe>
 8004e10:	2304      	movs	r3, #4
 8004e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e16:	e07a      	b.n	8004f0e <UART_SetConfig+0x2fe>
 8004e18:	2308      	movs	r3, #8
 8004e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e1e:	e076      	b.n	8004f0e <UART_SetConfig+0x2fe>
 8004e20:	2310      	movs	r3, #16
 8004e22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e26:	e072      	b.n	8004f0e <UART_SetConfig+0x2fe>
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a35      	ldr	r2, [pc, #212]	@ (8004f04 <UART_SetConfig+0x2f4>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d12a      	bne.n	8004e88 <UART_SetConfig+0x278>
 8004e32:	4b30      	ldr	r3, [pc, #192]	@ (8004ef4 <UART_SetConfig+0x2e4>)
 8004e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e40:	d01a      	beq.n	8004e78 <UART_SetConfig+0x268>
 8004e42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e46:	d81b      	bhi.n	8004e80 <UART_SetConfig+0x270>
 8004e48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e4c:	d00c      	beq.n	8004e68 <UART_SetConfig+0x258>
 8004e4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e52:	d815      	bhi.n	8004e80 <UART_SetConfig+0x270>
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d003      	beq.n	8004e60 <UART_SetConfig+0x250>
 8004e58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e5c:	d008      	beq.n	8004e70 <UART_SetConfig+0x260>
 8004e5e:	e00f      	b.n	8004e80 <UART_SetConfig+0x270>
 8004e60:	2300      	movs	r3, #0
 8004e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e66:	e052      	b.n	8004f0e <UART_SetConfig+0x2fe>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e6e:	e04e      	b.n	8004f0e <UART_SetConfig+0x2fe>
 8004e70:	2304      	movs	r3, #4
 8004e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e76:	e04a      	b.n	8004f0e <UART_SetConfig+0x2fe>
 8004e78:	2308      	movs	r3, #8
 8004e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e7e:	e046      	b.n	8004f0e <UART_SetConfig+0x2fe>
 8004e80:	2310      	movs	r3, #16
 8004e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e86:	e042      	b.n	8004f0e <UART_SetConfig+0x2fe>
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a17      	ldr	r2, [pc, #92]	@ (8004eec <UART_SetConfig+0x2dc>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d13a      	bne.n	8004f08 <UART_SetConfig+0x2f8>
 8004e92:	4b18      	ldr	r3, [pc, #96]	@ (8004ef4 <UART_SetConfig+0x2e4>)
 8004e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e98:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004e9c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ea0:	d01a      	beq.n	8004ed8 <UART_SetConfig+0x2c8>
 8004ea2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ea6:	d81b      	bhi.n	8004ee0 <UART_SetConfig+0x2d0>
 8004ea8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004eac:	d00c      	beq.n	8004ec8 <UART_SetConfig+0x2b8>
 8004eae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004eb2:	d815      	bhi.n	8004ee0 <UART_SetConfig+0x2d0>
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <UART_SetConfig+0x2b0>
 8004eb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ebc:	d008      	beq.n	8004ed0 <UART_SetConfig+0x2c0>
 8004ebe:	e00f      	b.n	8004ee0 <UART_SetConfig+0x2d0>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ec6:	e022      	b.n	8004f0e <UART_SetConfig+0x2fe>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ece:	e01e      	b.n	8004f0e <UART_SetConfig+0x2fe>
 8004ed0:	2304      	movs	r3, #4
 8004ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ed6:	e01a      	b.n	8004f0e <UART_SetConfig+0x2fe>
 8004ed8:	2308      	movs	r3, #8
 8004eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ede:	e016      	b.n	8004f0e <UART_SetConfig+0x2fe>
 8004ee0:	2310      	movs	r3, #16
 8004ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ee6:	e012      	b.n	8004f0e <UART_SetConfig+0x2fe>
 8004ee8:	cfff69f3 	.word	0xcfff69f3
 8004eec:	40008000 	.word	0x40008000
 8004ef0:	40013800 	.word	0x40013800
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	40004400 	.word	0x40004400
 8004efc:	40004800 	.word	0x40004800
 8004f00:	40004c00 	.word	0x40004c00
 8004f04:	40005000 	.word	0x40005000
 8004f08:	2310      	movs	r3, #16
 8004f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4aae      	ldr	r2, [pc, #696]	@ (80051cc <UART_SetConfig+0x5bc>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	f040 8097 	bne.w	8005048 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f1a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004f1e:	2b08      	cmp	r3, #8
 8004f20:	d823      	bhi.n	8004f6a <UART_SetConfig+0x35a>
 8004f22:	a201      	add	r2, pc, #4	@ (adr r2, 8004f28 <UART_SetConfig+0x318>)
 8004f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f28:	08004f4d 	.word	0x08004f4d
 8004f2c:	08004f6b 	.word	0x08004f6b
 8004f30:	08004f55 	.word	0x08004f55
 8004f34:	08004f6b 	.word	0x08004f6b
 8004f38:	08004f5b 	.word	0x08004f5b
 8004f3c:	08004f6b 	.word	0x08004f6b
 8004f40:	08004f6b 	.word	0x08004f6b
 8004f44:	08004f6b 	.word	0x08004f6b
 8004f48:	08004f63 	.word	0x08004f63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f4c:	f7fe ff76 	bl	8003e3c <HAL_RCC_GetPCLK1Freq>
 8004f50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f52:	e010      	b.n	8004f76 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f54:	4b9e      	ldr	r3, [pc, #632]	@ (80051d0 <UART_SetConfig+0x5c0>)
 8004f56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f58:	e00d      	b.n	8004f76 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f5a:	f7fe ff01 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 8004f5e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f60:	e009      	b.n	8004f76 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f68:	e005      	b.n	8004f76 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004f74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 8130 	beq.w	80051de <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f82:	4a94      	ldr	r2, [pc, #592]	@ (80051d4 <UART_SetConfig+0x5c4>)
 8004f84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f88:	461a      	mov	r2, r3
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f90:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	4613      	mov	r3, r2
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	4413      	add	r3, r2
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d305      	bcc.n	8004fae <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d903      	bls.n	8004fb6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004fb4:	e113      	b.n	80051de <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb8:	2200      	movs	r2, #0
 8004fba:	60bb      	str	r3, [r7, #8]
 8004fbc:	60fa      	str	r2, [r7, #12]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc2:	4a84      	ldr	r2, [pc, #528]	@ (80051d4 <UART_SetConfig+0x5c4>)
 8004fc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2200      	movs	r2, #0
 8004fcc:	603b      	str	r3, [r7, #0]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fd4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004fd8:	f7fb f926 	bl	8000228 <__aeabi_uldivmod>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	460b      	mov	r3, r1
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	f04f 0200 	mov.w	r2, #0
 8004fe8:	f04f 0300 	mov.w	r3, #0
 8004fec:	020b      	lsls	r3, r1, #8
 8004fee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004ff2:	0202      	lsls	r2, r0, #8
 8004ff4:	6979      	ldr	r1, [r7, #20]
 8004ff6:	6849      	ldr	r1, [r1, #4]
 8004ff8:	0849      	lsrs	r1, r1, #1
 8004ffa:	2000      	movs	r0, #0
 8004ffc:	460c      	mov	r4, r1
 8004ffe:	4605      	mov	r5, r0
 8005000:	eb12 0804 	adds.w	r8, r2, r4
 8005004:	eb43 0905 	adc.w	r9, r3, r5
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	469a      	mov	sl, r3
 8005010:	4693      	mov	fp, r2
 8005012:	4652      	mov	r2, sl
 8005014:	465b      	mov	r3, fp
 8005016:	4640      	mov	r0, r8
 8005018:	4649      	mov	r1, r9
 800501a:	f7fb f905 	bl	8000228 <__aeabi_uldivmod>
 800501e:	4602      	mov	r2, r0
 8005020:	460b      	mov	r3, r1
 8005022:	4613      	mov	r3, r2
 8005024:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800502c:	d308      	bcc.n	8005040 <UART_SetConfig+0x430>
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005034:	d204      	bcs.n	8005040 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6a3a      	ldr	r2, [r7, #32]
 800503c:	60da      	str	r2, [r3, #12]
 800503e:	e0ce      	b.n	80051de <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005046:	e0ca      	b.n	80051de <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005050:	d166      	bne.n	8005120 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005052:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005056:	2b08      	cmp	r3, #8
 8005058:	d827      	bhi.n	80050aa <UART_SetConfig+0x49a>
 800505a:	a201      	add	r2, pc, #4	@ (adr r2, 8005060 <UART_SetConfig+0x450>)
 800505c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005060:	08005085 	.word	0x08005085
 8005064:	0800508d 	.word	0x0800508d
 8005068:	08005095 	.word	0x08005095
 800506c:	080050ab 	.word	0x080050ab
 8005070:	0800509b 	.word	0x0800509b
 8005074:	080050ab 	.word	0x080050ab
 8005078:	080050ab 	.word	0x080050ab
 800507c:	080050ab 	.word	0x080050ab
 8005080:	080050a3 	.word	0x080050a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005084:	f7fe feda 	bl	8003e3c <HAL_RCC_GetPCLK1Freq>
 8005088:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800508a:	e014      	b.n	80050b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800508c:	f7fe feec 	bl	8003e68 <HAL_RCC_GetPCLK2Freq>
 8005090:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005092:	e010      	b.n	80050b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005094:	4b4e      	ldr	r3, [pc, #312]	@ (80051d0 <UART_SetConfig+0x5c0>)
 8005096:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005098:	e00d      	b.n	80050b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800509a:	f7fe fe61 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 800509e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80050a0:	e009      	b.n	80050b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80050a8:	e005      	b.n	80050b6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80050aa:	2300      	movs	r3, #0
 80050ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80050b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 8090 	beq.w	80051de <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c2:	4a44      	ldr	r2, [pc, #272]	@ (80051d4 <UART_SetConfig+0x5c4>)
 80050c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050c8:	461a      	mov	r2, r3
 80050ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80050d0:	005a      	lsls	r2, r3, #1
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	085b      	lsrs	r3, r3, #1
 80050d8:	441a      	add	r2, r3
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	2b0f      	cmp	r3, #15
 80050e8:	d916      	bls.n	8005118 <UART_SetConfig+0x508>
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050f0:	d212      	bcs.n	8005118 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	f023 030f 	bic.w	r3, r3, #15
 80050fa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	085b      	lsrs	r3, r3, #1
 8005100:	b29b      	uxth	r3, r3
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	b29a      	uxth	r2, r3
 8005108:	8bfb      	ldrh	r3, [r7, #30]
 800510a:	4313      	orrs	r3, r2
 800510c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	8bfa      	ldrh	r2, [r7, #30]
 8005114:	60da      	str	r2, [r3, #12]
 8005116:	e062      	b.n	80051de <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800511e:	e05e      	b.n	80051de <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005120:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005124:	2b08      	cmp	r3, #8
 8005126:	d828      	bhi.n	800517a <UART_SetConfig+0x56a>
 8005128:	a201      	add	r2, pc, #4	@ (adr r2, 8005130 <UART_SetConfig+0x520>)
 800512a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512e:	bf00      	nop
 8005130:	08005155 	.word	0x08005155
 8005134:	0800515d 	.word	0x0800515d
 8005138:	08005165 	.word	0x08005165
 800513c:	0800517b 	.word	0x0800517b
 8005140:	0800516b 	.word	0x0800516b
 8005144:	0800517b 	.word	0x0800517b
 8005148:	0800517b 	.word	0x0800517b
 800514c:	0800517b 	.word	0x0800517b
 8005150:	08005173 	.word	0x08005173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005154:	f7fe fe72 	bl	8003e3c <HAL_RCC_GetPCLK1Freq>
 8005158:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800515a:	e014      	b.n	8005186 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800515c:	f7fe fe84 	bl	8003e68 <HAL_RCC_GetPCLK2Freq>
 8005160:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005162:	e010      	b.n	8005186 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005164:	4b1a      	ldr	r3, [pc, #104]	@ (80051d0 <UART_SetConfig+0x5c0>)
 8005166:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005168:	e00d      	b.n	8005186 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800516a:	f7fe fdf9 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 800516e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005170:	e009      	b.n	8005186 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005172:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005176:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005178:	e005      	b.n	8005186 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800517a:	2300      	movs	r3, #0
 800517c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005184:	bf00      	nop
    }

    if (pclk != 0U)
 8005186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005188:	2b00      	cmp	r3, #0
 800518a:	d028      	beq.n	80051de <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005190:	4a10      	ldr	r2, [pc, #64]	@ (80051d4 <UART_SetConfig+0x5c4>)
 8005192:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005196:	461a      	mov	r2, r3
 8005198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519a:	fbb3 f2f2 	udiv	r2, r3, r2
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	085b      	lsrs	r3, r3, #1
 80051a4:	441a      	add	r2, r3
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051b0:	6a3b      	ldr	r3, [r7, #32]
 80051b2:	2b0f      	cmp	r3, #15
 80051b4:	d910      	bls.n	80051d8 <UART_SetConfig+0x5c8>
 80051b6:	6a3b      	ldr	r3, [r7, #32]
 80051b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051bc:	d20c      	bcs.n	80051d8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051be:	6a3b      	ldr	r3, [r7, #32]
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	60da      	str	r2, [r3, #12]
 80051c8:	e009      	b.n	80051de <UART_SetConfig+0x5ce>
 80051ca:	bf00      	nop
 80051cc:	40008000 	.word	0x40008000
 80051d0:	00f42400 	.word	0x00f42400
 80051d4:	08006468 	.word	0x08006468
      }
      else
      {
        ret = HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2200      	movs	r2, #0
 80051f2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	2200      	movs	r2, #0
 80051f8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80051fa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3730      	adds	r7, #48	@ 0x30
 8005202:	46bd      	mov	sp, r7
 8005204:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005208 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005214:	f003 0308 	and.w	r3, r3, #8
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00a      	beq.n	8005232 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00a      	beq.n	8005254 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00a      	beq.n	8005276 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800527a:	f003 0304 	and.w	r3, r3, #4
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00a      	beq.n	8005298 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529c:	f003 0310 	and.w	r3, r3, #16
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00a      	beq.n	80052ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052be:	f003 0320 	and.w	r3, r3, #32
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00a      	beq.n	80052dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	430a      	orrs	r2, r1
 80052da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d01a      	beq.n	800531e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005302:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005306:	d10a      	bne.n	800531e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00a      	beq.n	8005340 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	605a      	str	r2, [r3, #4]
  }
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b098      	sub	sp, #96	@ 0x60
 8005350:	af02      	add	r7, sp, #8
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800535c:	f7fd f828 	bl	80023b0 <HAL_GetTick>
 8005360:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0308 	and.w	r3, r3, #8
 800536c:	2b08      	cmp	r3, #8
 800536e:	d12f      	bne.n	80053d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005370:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005378:	2200      	movs	r2, #0
 800537a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f88e 	bl	80054a0 <UART_WaitOnFlagUntilTimeout>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d022      	beq.n	80053d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005392:	e853 3f00 	ldrex	r3, [r3]
 8005396:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800539a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800539e:	653b      	str	r3, [r7, #80]	@ 0x50
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	461a      	mov	r2, r3
 80053a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80053aa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053b0:	e841 2300 	strex	r3, r2, [r1]
 80053b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1e6      	bne.n	800538a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2220      	movs	r2, #32
 80053c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e063      	b.n	8005498 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0304 	and.w	r3, r3, #4
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d149      	bne.n	8005472 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053de:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053e6:	2200      	movs	r2, #0
 80053e8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f857 	bl	80054a0 <UART_WaitOnFlagUntilTimeout>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d03c      	beq.n	8005472 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005400:	e853 3f00 	ldrex	r3, [r3]
 8005404:	623b      	str	r3, [r7, #32]
   return(result);
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800540c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	461a      	mov	r2, r3
 8005414:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005416:	633b      	str	r3, [r7, #48]	@ 0x30
 8005418:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800541c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800541e:	e841 2300 	strex	r3, r2, [r1]
 8005422:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1e6      	bne.n	80053f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	3308      	adds	r3, #8
 8005430:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	e853 3f00 	ldrex	r3, [r3]
 8005438:	60fb      	str	r3, [r7, #12]
   return(result);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f023 0301 	bic.w	r3, r3, #1
 8005440:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3308      	adds	r3, #8
 8005448:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800544a:	61fa      	str	r2, [r7, #28]
 800544c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544e:	69b9      	ldr	r1, [r7, #24]
 8005450:	69fa      	ldr	r2, [r7, #28]
 8005452:	e841 2300 	strex	r3, r2, [r1]
 8005456:	617b      	str	r3, [r7, #20]
   return(result);
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1e5      	bne.n	800542a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2220      	movs	r2, #32
 8005462:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e012      	b.n	8005498 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2220      	movs	r2, #32
 8005476:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2220      	movs	r2, #32
 800547e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3758      	adds	r7, #88	@ 0x58
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	603b      	str	r3, [r7, #0]
 80054ac:	4613      	mov	r3, r2
 80054ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054b0:	e04f      	b.n	8005552 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b8:	d04b      	beq.n	8005552 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ba:	f7fc ff79 	bl	80023b0 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d302      	bcc.n	80054d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d101      	bne.n	80054d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e04e      	b.n	8005572 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0304 	and.w	r3, r3, #4
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d037      	beq.n	8005552 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b80      	cmp	r3, #128	@ 0x80
 80054e6:	d034      	beq.n	8005552 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2b40      	cmp	r3, #64	@ 0x40
 80054ec:	d031      	beq.n	8005552 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	69db      	ldr	r3, [r3, #28]
 80054f4:	f003 0308 	and.w	r3, r3, #8
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d110      	bne.n	800551e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2208      	movs	r2, #8
 8005502:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f000 f920 	bl	800574a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2208      	movs	r2, #8
 800550e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e029      	b.n	8005572 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005528:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800552c:	d111      	bne.n	8005552 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005536:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f000 f906 	bl	800574a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2220      	movs	r2, #32
 8005542:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e00f      	b.n	8005572 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	69da      	ldr	r2, [r3, #28]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	4013      	ands	r3, r2
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	429a      	cmp	r2, r3
 8005560:	bf0c      	ite	eq
 8005562:	2301      	moveq	r3, #1
 8005564:	2300      	movne	r3, #0
 8005566:	b2db      	uxtb	r3, r3
 8005568:	461a      	mov	r2, r3
 800556a:	79fb      	ldrb	r3, [r7, #7]
 800556c:	429a      	cmp	r2, r3
 800556e:	d0a0      	beq.n	80054b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
	...

0800557c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b096      	sub	sp, #88	@ 0x58
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	4613      	mov	r3, r2
 8005588:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	88fa      	ldrh	r2, [r7, #6]
 8005594:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2222      	movs	r2, #34	@ 0x22
 80055a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d02d      	beq.n	800560e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055b8:	4a40      	ldr	r2, [pc, #256]	@ (80056bc <UART_Start_Receive_DMA+0x140>)
 80055ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055c2:	4a3f      	ldr	r2, [pc, #252]	@ (80056c0 <UART_Start_Receive_DMA+0x144>)
 80055c4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055cc:	4a3d      	ldr	r2, [pc, #244]	@ (80056c4 <UART_Start_Receive_DMA+0x148>)
 80055ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055d6:	2200      	movs	r2, #0
 80055d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3324      	adds	r3, #36	@ 0x24
 80055e6:	4619      	mov	r1, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ec:	461a      	mov	r2, r3
 80055ee:	88fb      	ldrh	r3, [r7, #6]
 80055f0:	f7fd faa8 	bl	8002b44 <HAL_DMA_Start_IT>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d009      	beq.n	800560e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2210      	movs	r2, #16
 80055fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2220      	movs	r2, #32
 8005606:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e051      	b.n	80056b2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d018      	beq.n	8005648 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800561e:	e853 3f00 	ldrex	r3, [r3]
 8005622:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005626:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800562a:	657b      	str	r3, [r7, #84]	@ 0x54
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	461a      	mov	r2, r3
 8005632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005634:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005636:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005638:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800563a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800563c:	e841 2300 	strex	r3, r2, [r1]
 8005640:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005642:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1e6      	bne.n	8005616 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3308      	adds	r3, #8
 800564e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005652:	e853 3f00 	ldrex	r3, [r3]
 8005656:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565a:	f043 0301 	orr.w	r3, r3, #1
 800565e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	3308      	adds	r3, #8
 8005666:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005668:	637a      	str	r2, [r7, #52]	@ 0x34
 800566a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800566e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005670:	e841 2300 	strex	r3, r2, [r1]
 8005674:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1e5      	bne.n	8005648 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3308      	adds	r3, #8
 8005682:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	e853 3f00 	ldrex	r3, [r3]
 800568a:	613b      	str	r3, [r7, #16]
   return(result);
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005692:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	3308      	adds	r3, #8
 800569a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800569c:	623a      	str	r2, [r7, #32]
 800569e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a0:	69f9      	ldr	r1, [r7, #28]
 80056a2:	6a3a      	ldr	r2, [r7, #32]
 80056a4:	e841 2300 	strex	r3, r2, [r1]
 80056a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1e5      	bne.n	800567c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3758      	adds	r7, #88	@ 0x58
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	08005817 	.word	0x08005817
 80056c0:	08005943 	.word	0x08005943
 80056c4:	08005981 	.word	0x08005981

080056c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b08f      	sub	sp, #60	@ 0x3c
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	e853 3f00 	ldrex	r3, [r3]
 80056dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80056e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	461a      	mov	r2, r3
 80056ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056f0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056f6:	e841 2300 	strex	r3, r2, [r1]
 80056fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1e6      	bne.n	80056d0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	3308      	adds	r3, #8
 8005708:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	e853 3f00 	ldrex	r3, [r3]
 8005710:	60bb      	str	r3, [r7, #8]
   return(result);
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005718:	633b      	str	r3, [r7, #48]	@ 0x30
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	3308      	adds	r3, #8
 8005720:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005722:	61ba      	str	r2, [r7, #24]
 8005724:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005726:	6979      	ldr	r1, [r7, #20]
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	e841 2300 	strex	r3, r2, [r1]
 800572e:	613b      	str	r3, [r7, #16]
   return(result);
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1e5      	bne.n	8005702 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2220      	movs	r2, #32
 800573a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800573e:	bf00      	nop
 8005740:	373c      	adds	r7, #60	@ 0x3c
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800574a:	b480      	push	{r7}
 800574c:	b095      	sub	sp, #84	@ 0x54
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800575a:	e853 3f00 	ldrex	r3, [r3]
 800575e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005762:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005766:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	461a      	mov	r2, r3
 800576e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005770:	643b      	str	r3, [r7, #64]	@ 0x40
 8005772:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005774:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005776:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005778:	e841 2300 	strex	r3, r2, [r1]
 800577c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800577e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1e6      	bne.n	8005752 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	3308      	adds	r3, #8
 800578a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	e853 3f00 	ldrex	r3, [r3]
 8005792:	61fb      	str	r3, [r7, #28]
   return(result);
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800579a:	f023 0301 	bic.w	r3, r3, #1
 800579e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	3308      	adds	r3, #8
 80057a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057b0:	e841 2300 	strex	r3, r2, [r1]
 80057b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1e3      	bne.n	8005784 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d118      	bne.n	80057f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	e853 3f00 	ldrex	r3, [r3]
 80057d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	f023 0310 	bic.w	r3, r3, #16
 80057d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	461a      	mov	r2, r3
 80057e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057e2:	61bb      	str	r3, [r7, #24]
 80057e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e6:	6979      	ldr	r1, [r7, #20]
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	e841 2300 	strex	r3, r2, [r1]
 80057ee:	613b      	str	r3, [r7, #16]
   return(result);
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1e6      	bne.n	80057c4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2220      	movs	r2, #32
 80057fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800580a:	bf00      	nop
 800580c:	3754      	adds	r7, #84	@ 0x54
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b09c      	sub	sp, #112	@ 0x70
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005822:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0320 	and.w	r3, r3, #32
 800582e:	2b00      	cmp	r3, #0
 8005830:	d171      	bne.n	8005916 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005832:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005834:	2200      	movs	r2, #0
 8005836:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800583a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005840:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005842:	e853 3f00 	ldrex	r3, [r3]
 8005846:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005848:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800584a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800584e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005850:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	461a      	mov	r2, r3
 8005856:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005858:	65bb      	str	r3, [r7, #88]	@ 0x58
 800585a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800585e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005860:	e841 2300 	strex	r3, r2, [r1]
 8005864:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005866:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1e6      	bne.n	800583a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800586c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	3308      	adds	r3, #8
 8005872:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005876:	e853 3f00 	ldrex	r3, [r3]
 800587a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800587c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800587e:	f023 0301 	bic.w	r3, r3, #1
 8005882:	667b      	str	r3, [r7, #100]	@ 0x64
 8005884:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	3308      	adds	r3, #8
 800588a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800588c:	647a      	str	r2, [r7, #68]	@ 0x44
 800588e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005890:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005892:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005894:	e841 2300 	strex	r3, r2, [r1]
 8005898:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800589a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1e5      	bne.n	800586c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	3308      	adds	r3, #8
 80058a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058aa:	e853 3f00 	ldrex	r3, [r3]
 80058ae:	623b      	str	r3, [r7, #32]
   return(result);
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80058b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	3308      	adds	r3, #8
 80058be:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80058c0:	633a      	str	r2, [r7, #48]	@ 0x30
 80058c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058c8:	e841 2300 	strex	r3, r2, [r1]
 80058cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1e5      	bne.n	80058a0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80058d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058d6:	2220      	movs	r2, #32
 80058d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d118      	bne.n	8005916 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	e853 3f00 	ldrex	r3, [r3]
 80058f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f023 0310 	bic.w	r3, r3, #16
 80058f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	461a      	mov	r2, r3
 8005900:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005902:	61fb      	str	r3, [r7, #28]
 8005904:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005906:	69b9      	ldr	r1, [r7, #24]
 8005908:	69fa      	ldr	r2, [r7, #28]
 800590a:	e841 2300 	strex	r3, r2, [r1]
 800590e:	617b      	str	r3, [r7, #20]
   return(result);
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1e6      	bne.n	80058e4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005916:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005918:	2200      	movs	r2, #0
 800591a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800591c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800591e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005920:	2b01      	cmp	r3, #1
 8005922:	d107      	bne.n	8005934 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005924:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005926:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800592a:	4619      	mov	r1, r3
 800592c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800592e:	f7fb fa49 	bl	8000dc4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005932:	e002      	b.n	800593a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005934:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005936:	f7ff f94d 	bl	8004bd4 <HAL_UART_RxCpltCallback>
}
 800593a:	bf00      	nop
 800593c:	3770      	adds	r7, #112	@ 0x70
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005942:	b580      	push	{r7, lr}
 8005944:	b084      	sub	sp, #16
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800594e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2201      	movs	r2, #1
 8005954:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800595a:	2b01      	cmp	r3, #1
 800595c:	d109      	bne.n	8005972 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005964:	085b      	lsrs	r3, r3, #1
 8005966:	b29b      	uxth	r3, r3
 8005968:	4619      	mov	r1, r3
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f7fb fa2a 	bl	8000dc4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005970:	e002      	b.n	8005978 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f7ff f938 	bl	8004be8 <HAL_UART_RxHalfCpltCallback>
}
 8005978:	bf00      	nop
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800598c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005994:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800599c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059a8:	2b80      	cmp	r3, #128	@ 0x80
 80059aa:	d109      	bne.n	80059c0 <UART_DMAError+0x40>
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	2b21      	cmp	r3, #33	@ 0x21
 80059b0:	d106      	bne.n	80059c0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80059ba:	6978      	ldr	r0, [r7, #20]
 80059bc:	f7ff fe84 	bl	80056c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ca:	2b40      	cmp	r3, #64	@ 0x40
 80059cc:	d109      	bne.n	80059e2 <UART_DMAError+0x62>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2b22      	cmp	r3, #34	@ 0x22
 80059d2:	d106      	bne.n	80059e2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80059dc:	6978      	ldr	r0, [r7, #20]
 80059de:	f7ff feb4 	bl	800574a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059e8:	f043 0210 	orr.w	r2, r3, #16
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059f2:	6978      	ldr	r0, [r7, #20]
 80059f4:	f7ff f902 	bl	8004bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059f8:	bf00      	nop
 80059fa:	3718      	adds	r7, #24
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f7ff f8ec 	bl	8004bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a24:	bf00      	nop
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b088      	sub	sp, #32
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	e853 3f00 	ldrex	r3, [r3]
 8005a40:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a48:	61fb      	str	r3, [r7, #28]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	61bb      	str	r3, [r7, #24]
 8005a54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a56:	6979      	ldr	r1, [r7, #20]
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	e841 2300 	strex	r3, r2, [r1]
 8005a5e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1e6      	bne.n	8005a34 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2220      	movs	r2, #32
 8005a6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7ff f8a3 	bl	8004bc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a7a:	bf00      	nop
 8005a7c:	3720      	adds	r7, #32
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b083      	sub	sp, #12
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a8a:	bf00      	nop
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b083      	sub	sp, #12
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b083      	sub	sp, #12
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005ab2:	bf00      	nop
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b085      	sub	sp, #20
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d101      	bne.n	8005ad4 <HAL_UARTEx_DisableFifoMode+0x16>
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	e027      	b.n	8005b24 <HAL_UARTEx_DisableFifoMode+0x66>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2224      	movs	r2, #36	@ 0x24
 8005ae0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f022 0201 	bic.w	r2, r2, #1
 8005afa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005b02:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2220      	movs	r2, #32
 8005b16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d101      	bne.n	8005b48 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b44:	2302      	movs	r3, #2
 8005b46:	e02d      	b.n	8005ba4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2224      	movs	r2, #36	@ 0x24
 8005b54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f022 0201 	bic.w	r2, r2, #1
 8005b6e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	430a      	orrs	r2, r1
 8005b82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 f8a3 	bl	8005cd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2220      	movs	r2, #32
 8005b96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d101      	bne.n	8005bc4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	e02d      	b.n	8005c20 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2224      	movs	r2, #36	@ 0x24
 8005bd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 0201 	bic.w	r2, r2, #1
 8005bea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f865 	bl	8005cd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2220      	movs	r2, #32
 8005c12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b08c      	sub	sp, #48	@ 0x30
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	4613      	mov	r3, r2
 8005c34:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c3c:	2b20      	cmp	r3, #32
 8005c3e:	d142      	bne.n	8005cc6 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d002      	beq.n	8005c4c <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8005c46:	88fb      	ldrh	r3, [r7, #6]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d101      	bne.n	8005c50 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e03b      	b.n	8005cc8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2201      	movs	r2, #1
 8005c54:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005c5c:	88fb      	ldrh	r3, [r7, #6]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	68b9      	ldr	r1, [r7, #8]
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f7ff fc8a 	bl	800557c <UART_Start_Receive_DMA>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005c6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d124      	bne.n	8005cc0 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d11d      	bne.n	8005cba <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2210      	movs	r2, #16
 8005c84:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	e853 3f00 	ldrex	r3, [r3]
 8005c92:	617b      	str	r3, [r7, #20]
   return(result);
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f043 0310 	orr.w	r3, r3, #16
 8005c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ca6:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca8:	6a39      	ldr	r1, [r7, #32]
 8005caa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cac:	e841 2300 	strex	r3, r2, [r1]
 8005cb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1e6      	bne.n	8005c86 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8005cb8:	e002      	b.n	8005cc0 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8005cc0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005cc4:	e000      	b.n	8005cc8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005cc6:	2302      	movs	r3, #2
  }
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3730      	adds	r7, #48	@ 0x30
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d108      	bne.n	8005cf2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005cf0:	e031      	b.n	8005d56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005cf2:	2308      	movs	r3, #8
 8005cf4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005cf6:	2308      	movs	r3, #8
 8005cf8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	0e5b      	lsrs	r3, r3, #25
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	f003 0307 	and.w	r3, r3, #7
 8005d08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	0f5b      	lsrs	r3, r3, #29
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	f003 0307 	and.w	r3, r3, #7
 8005d18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d1a:	7bbb      	ldrb	r3, [r7, #14]
 8005d1c:	7b3a      	ldrb	r2, [r7, #12]
 8005d1e:	4911      	ldr	r1, [pc, #68]	@ (8005d64 <UARTEx_SetNbDataToProcess+0x94>)
 8005d20:	5c8a      	ldrb	r2, [r1, r2]
 8005d22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d26:	7b3a      	ldrb	r2, [r7, #12]
 8005d28:	490f      	ldr	r1, [pc, #60]	@ (8005d68 <UARTEx_SetNbDataToProcess+0x98>)
 8005d2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d38:	7bfb      	ldrb	r3, [r7, #15]
 8005d3a:	7b7a      	ldrb	r2, [r7, #13]
 8005d3c:	4909      	ldr	r1, [pc, #36]	@ (8005d64 <UARTEx_SetNbDataToProcess+0x94>)
 8005d3e:	5c8a      	ldrb	r2, [r1, r2]
 8005d40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d44:	7b7a      	ldrb	r2, [r7, #13]
 8005d46:	4908      	ldr	r1, [pc, #32]	@ (8005d68 <UARTEx_SetNbDataToProcess+0x98>)
 8005d48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005d56:	bf00      	nop
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	08006480 	.word	0x08006480
 8005d68:	08006488 	.word	0x08006488

08005d6c <_ZdlPvj>:
 8005d6c:	f000 b99e 	b.w	80060ac <_ZdlPv>

08005d70 <_Znwj>:
 8005d70:	2801      	cmp	r0, #1
 8005d72:	bf38      	it	cc
 8005d74:	2001      	movcc	r0, #1
 8005d76:	b510      	push	{r4, lr}
 8005d78:	4604      	mov	r4, r0
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	f000 f9a8 	bl	80060d0 <malloc>
 8005d80:	b100      	cbz	r0, 8005d84 <_Znwj+0x14>
 8005d82:	bd10      	pop	{r4, pc}
 8005d84:	f000 f994 	bl	80060b0 <_ZSt15get_new_handlerv>
 8005d88:	b908      	cbnz	r0, 8005d8e <_Znwj+0x1e>
 8005d8a:	f000 f999 	bl	80060c0 <abort>
 8005d8e:	4780      	blx	r0
 8005d90:	e7f3      	b.n	8005d7a <_Znwj+0xa>

08005d92 <_ZNSaIcEC1Ev>:
 8005d92:	4770      	bx	lr

08005d94 <_ZNSaIcED1Ev>:
 8005d94:	4770      	bx	lr

08005d96 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8005d96:	68c3      	ldr	r3, [r0, #12]
 8005d98:	689a      	ldr	r2, [r3, #8]
 8005d9a:	60c2      	str	r2, [r0, #12]
 8005d9c:	b510      	push	{r4, lr}
 8005d9e:	b102      	cbz	r2, 8005da2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 8005da0:	6050      	str	r0, [r2, #4]
 8005da2:	6842      	ldr	r2, [r0, #4]
 8005da4:	605a      	str	r2, [r3, #4]
 8005da6:	680c      	ldr	r4, [r1, #0]
 8005da8:	4284      	cmp	r4, r0
 8005daa:	d103      	bne.n	8005db4 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8005dac:	600b      	str	r3, [r1, #0]
 8005dae:	6098      	str	r0, [r3, #8]
 8005db0:	6043      	str	r3, [r0, #4]
 8005db2:	bd10      	pop	{r4, pc}
 8005db4:	6891      	ldr	r1, [r2, #8]
 8005db6:	4281      	cmp	r1, r0
 8005db8:	bf0c      	ite	eq
 8005dba:	6093      	streq	r3, [r2, #8]
 8005dbc:	60d3      	strne	r3, [r2, #12]
 8005dbe:	e7f6      	b.n	8005dae <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

08005dc0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 8005dc0:	6883      	ldr	r3, [r0, #8]
 8005dc2:	68da      	ldr	r2, [r3, #12]
 8005dc4:	6082      	str	r2, [r0, #8]
 8005dc6:	b510      	push	{r4, lr}
 8005dc8:	b102      	cbz	r2, 8005dcc <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 8005dca:	6050      	str	r0, [r2, #4]
 8005dcc:	6842      	ldr	r2, [r0, #4]
 8005dce:	605a      	str	r2, [r3, #4]
 8005dd0:	680c      	ldr	r4, [r1, #0]
 8005dd2:	4284      	cmp	r4, r0
 8005dd4:	d103      	bne.n	8005dde <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8005dd6:	600b      	str	r3, [r1, #0]
 8005dd8:	60d8      	str	r0, [r3, #12]
 8005dda:	6043      	str	r3, [r0, #4]
 8005ddc:	bd10      	pop	{r4, pc}
 8005dde:	68d1      	ldr	r1, [r2, #12]
 8005de0:	4281      	cmp	r1, r0
 8005de2:	bf0c      	ite	eq
 8005de4:	60d3      	streq	r3, [r2, #12]
 8005de6:	6093      	strne	r3, [r2, #8]
 8005de8:	e7f6      	b.n	8005dd8 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08005dea <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8005dea:	68c3      	ldr	r3, [r0, #12]
 8005dec:	b123      	cbz	r3, 8005df8 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 8005dee:	4618      	mov	r0, r3
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1fb      	bne.n	8005dee <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 8005df6:	4770      	bx	lr
 8005df8:	6843      	ldr	r3, [r0, #4]
 8005dfa:	68da      	ldr	r2, [r3, #12]
 8005dfc:	4282      	cmp	r2, r0
 8005dfe:	d004      	beq.n	8005e0a <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x20>
 8005e00:	68c2      	ldr	r2, [r0, #12]
 8005e02:	4293      	cmp	r3, r2
 8005e04:	bf18      	it	ne
 8005e06:	4618      	movne	r0, r3
 8005e08:	4770      	bx	lr
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	e7f4      	b.n	8005dfa <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>

08005e10 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8005e10:	7802      	ldrb	r2, [r0, #0]
 8005e12:	4603      	mov	r3, r0
 8005e14:	b92a      	cbnz	r2, 8005e22 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8005e16:	6842      	ldr	r2, [r0, #4]
 8005e18:	6852      	ldr	r2, [r2, #4]
 8005e1a:	4282      	cmp	r2, r0
 8005e1c:	d101      	bne.n	8005e22 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8005e1e:	68d0      	ldr	r0, [r2, #12]
 8005e20:	4770      	bx	lr
 8005e22:	689a      	ldr	r2, [r3, #8]
 8005e24:	b122      	cbz	r2, 8005e30 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8005e26:	4610      	mov	r0, r2
 8005e28:	68d2      	ldr	r2, [r2, #12]
 8005e2a:	2a00      	cmp	r2, #0
 8005e2c:	d1fb      	bne.n	8005e26 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8005e2e:	4770      	bx	lr
 8005e30:	6858      	ldr	r0, [r3, #4]
 8005e32:	6882      	ldr	r2, [r0, #8]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d000      	beq.n	8005e3a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 8005e38:	4770      	bx	lr
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	6840      	ldr	r0, [r0, #4]
 8005e3e:	e7f8      	b.n	8005e32 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

08005e40 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8005e40:	f7ff bfd3 	b.w	8005dea <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

08005e44 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8005e44:	f7ff bfe4 	b.w	8005e10 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08005e48 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8005e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e4c:	461d      	mov	r5, r3
 8005e4e:	1d1f      	adds	r7, r3, #4
 8005e50:	2300      	movs	r3, #0
 8005e52:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8005e56:	460c      	mov	r4, r1
 8005e58:	604a      	str	r2, [r1, #4]
 8005e5a:	700b      	strb	r3, [r1, #0]
 8005e5c:	b1a0      	cbz	r0, 8005e88 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
 8005e5e:	4295      	cmp	r5, r2
 8005e60:	6091      	str	r1, [r2, #8]
 8005e62:	d102      	bne.n	8005e6a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8005e64:	6069      	str	r1, [r5, #4]
 8005e66:	60ec      	str	r4, [r5, #12]
 8005e68:	e003      	b.n	8005e72 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 8005e6a:	68ab      	ldr	r3, [r5, #8]
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	bf08      	it	eq
 8005e70:	60a9      	streq	r1, [r5, #8]
 8005e72:	f04f 0900 	mov.w	r9, #0
 8005e76:	f04f 0801 	mov.w	r8, #1
 8005e7a:	686b      	ldr	r3, [r5, #4]
 8005e7c:	42a3      	cmp	r3, r4
 8005e7e:	d132      	bne.n	8005ee6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9e>
 8005e80:	2201      	movs	r2, #1
 8005e82:	701a      	strb	r2, [r3, #0]
 8005e84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e88:	60d1      	str	r1, [r2, #12]
 8005e8a:	68eb      	ldr	r3, [r5, #12]
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d1f0      	bne.n	8005e72 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 8005e90:	e7e9      	b.n	8005e66 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x1e>
 8005e92:	68c3      	ldr	r3, [r0, #12]
 8005e94:	42a3      	cmp	r3, r4
 8005e96:	d103      	bne.n	8005ea0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
 8005e98:	4639      	mov	r1, r7
 8005e9a:	f7ff ff7c 	bl	8005d96 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	6863      	ldr	r3, [r4, #4]
 8005ea2:	4639      	mov	r1, r7
 8005ea4:	f883 8000 	strb.w	r8, [r3]
 8005ea8:	4630      	mov	r0, r6
 8005eaa:	f886 9000 	strb.w	r9, [r6]
 8005eae:	f7ff ff87 	bl	8005dc0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8005eb2:	e7e2      	b.n	8005e7a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 8005eb4:	b133      	cbz	r3, 8005ec4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 8005eb6:	781a      	ldrb	r2, [r3, #0]
 8005eb8:	b922      	cbnz	r2, 8005ec4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 8005eba:	f880 8000 	strb.w	r8, [r0]
 8005ebe:	f883 8000 	strb.w	r8, [r3]
 8005ec2:	e021      	b.n	8005f08 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xc0>
 8005ec4:	6883      	ldr	r3, [r0, #8]
 8005ec6:	42a3      	cmp	r3, r4
 8005ec8:	d103      	bne.n	8005ed2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8a>
 8005eca:	4639      	mov	r1, r7
 8005ecc:	f7ff ff78 	bl	8005dc0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8005ed0:	4604      	mov	r4, r0
 8005ed2:	6863      	ldr	r3, [r4, #4]
 8005ed4:	4639      	mov	r1, r7
 8005ed6:	f883 8000 	strb.w	r8, [r3]
 8005eda:	4630      	mov	r0, r6
 8005edc:	f886 9000 	strb.w	r9, [r6]
 8005ee0:	f7ff ff59 	bl	8005d96 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8005ee4:	e7c9      	b.n	8005e7a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 8005ee6:	6860      	ldr	r0, [r4, #4]
 8005ee8:	7802      	ldrb	r2, [r0, #0]
 8005eea:	2a00      	cmp	r2, #0
 8005eec:	d1c8      	bne.n	8005e80 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x38>
 8005eee:	6846      	ldr	r6, [r0, #4]
 8005ef0:	68b3      	ldr	r3, [r6, #8]
 8005ef2:	4283      	cmp	r3, r0
 8005ef4:	d1de      	bne.n	8005eb4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
 8005ef6:	68f2      	ldr	r2, [r6, #12]
 8005ef8:	2a00      	cmp	r2, #0
 8005efa:	d0ca      	beq.n	8005e92 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 8005efc:	7811      	ldrb	r1, [r2, #0]
 8005efe:	2900      	cmp	r1, #0
 8005f00:	d1c7      	bne.n	8005e92 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 8005f02:	2101      	movs	r1, #1
 8005f04:	7019      	strb	r1, [r3, #0]
 8005f06:	7011      	strb	r1, [r2, #0]
 8005f08:	f886 9000 	strb.w	r9, [r6]
 8005f0c:	4634      	mov	r4, r6
 8005f0e:	e7b4      	b.n	8005e7a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>

08005f10 <_ZSt17__throw_bad_allocv>:
 8005f10:	b508      	push	{r3, lr}
 8005f12:	f000 f8d5 	bl	80060c0 <abort>

08005f16 <_ZSt28__throw_bad_array_new_lengthv>:
 8005f16:	b508      	push	{r3, lr}
 8005f18:	f000 f8d2 	bl	80060c0 <abort>

08005f1c <_ZSt19__throw_logic_errorPKc>:
 8005f1c:	b508      	push	{r3, lr}
 8005f1e:	f000 f8cf 	bl	80060c0 <abort>

08005f22 <_ZSt20__throw_length_errorPKc>:
 8005f22:	b508      	push	{r3, lr}
 8005f24:	f000 f8cc 	bl	80060c0 <abort>

08005f28 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8005f28:	b10a      	cbz	r2, 8005f2e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8005f2a:	f000 ba27 	b.w	800637c <memcpy>
 8005f2e:	4770      	bx	lr

08005f30 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8005f30:	b10a      	cbz	r2, 8005f36 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8005f32:	f000 b98b 	b.w	800624c <memcmp>
 8005f36:	4610      	mov	r0, r2
 8005f38:	4770      	bx	lr

08005f3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 8005f3a:	6001      	str	r1, [r0, #0]
 8005f3c:	4770      	bx	lr

08005f3e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 8005f3e:	6800      	ldr	r0, [r0, #0]
 8005f40:	4770      	bx	lr

08005f42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 8005f42:	3008      	adds	r0, #8
 8005f44:	4770      	bx	lr

08005f46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8005f46:	6081      	str	r1, [r0, #8]
 8005f48:	4770      	bx	lr

08005f4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8005f4a:	6803      	ldr	r3, [r0, #0]
 8005f4c:	6041      	str	r1, [r0, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	545a      	strb	r2, [r3, r1]
 8005f52:	4770      	bx	lr

08005f54 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 8005f54:	f850 3b08 	ldr.w	r3, [r0], #8
 8005f58:	1a1b      	subs	r3, r3, r0
 8005f5a:	4258      	negs	r0, r3
 8005f5c:	4158      	adcs	r0, r3
 8005f5e:	4770      	bx	lr

08005f60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8005f60:	b508      	push	{r3, lr}
 8005f62:	680b      	ldr	r3, [r1, #0]
 8005f64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f68:	d302      	bcc.n	8005f70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8005f6a:	480d      	ldr	r0, [pc, #52]	@ (8005fa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8005f6c:	f7ff ffd9 	bl	8005f22 <_ZSt20__throw_length_errorPKc>
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d90b      	bls.n	8005f8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8005f74:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8005f78:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8005f7c:	d206      	bcs.n	8005f8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8005f7e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005f82:	bf2a      	itet	cs
 8005f84:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8005f88:	6008      	strcc	r0, [r1, #0]
 8005f8a:	600b      	strcs	r3, [r1, #0]
 8005f8c:	6808      	ldr	r0, [r1, #0]
 8005f8e:	3001      	adds	r0, #1
 8005f90:	d501      	bpl.n	8005f96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8005f92:	f7ff ffbd 	bl	8005f10 <_ZSt17__throw_bad_allocv>
 8005f96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005f9a:	f7ff bee9 	b.w	8005d70 <_Znwj>
 8005f9e:	bf00      	nop
 8005fa0:	08006490 	.word	0x08006490

08005fa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8005fa4:	b510      	push	{r4, lr}
 8005fa6:	4604      	mov	r4, r0
 8005fa8:	f7ff ffd4 	bl	8005f54 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8005fac:	b920      	cbnz	r0, 8005fb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 8005fae:	6820      	ldr	r0, [r4, #0]
 8005fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fb4:	f000 b87a 	b.w	80060ac <_ZdlPv>
 8005fb8:	bd10      	pop	{r4, pc}

08005fba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8005fba:	2a01      	cmp	r2, #1
 8005fbc:	b410      	push	{r4}
 8005fbe:	d104      	bne.n	8005fca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8005fc0:	780a      	ldrb	r2, [r1, #0]
 8005fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fc6:	7002      	strb	r2, [r0, #0]
 8005fc8:	4770      	bx	lr
 8005fca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fce:	f7ff bfab 	b.w	8005f28 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08005fd2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8005fd2:	b508      	push	{r3, lr}
 8005fd4:	1a52      	subs	r2, r2, r1
 8005fd6:	f7ff fff0 	bl	8005fba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005fda:	bd08      	pop	{r3, pc}

08005fdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8005fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fde:	f100 0708 	add.w	r7, r0, #8
 8005fe2:	6007      	str	r7, [r0, #0]
 8005fe4:	4605      	mov	r5, r0
 8005fe6:	4608      	mov	r0, r1
 8005fe8:	460c      	mov	r4, r1
 8005fea:	f7ff ffb3 	bl	8005f54 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8005fee:	f104 0608 	add.w	r6, r4, #8
 8005ff2:	6862      	ldr	r2, [r4, #4]
 8005ff4:	b160      	cbz	r0, 8006010 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x34>
 8005ff6:	3201      	adds	r2, #1
 8005ff8:	4631      	mov	r1, r6
 8005ffa:	4638      	mov	r0, r7
 8005ffc:	f7ff ff94 	bl	8005f28 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 8006000:	6863      	ldr	r3, [r4, #4]
 8006002:	606b      	str	r3, [r5, #4]
 8006004:	2300      	movs	r3, #0
 8006006:	7223      	strb	r3, [r4, #8]
 8006008:	6026      	str	r6, [r4, #0]
 800600a:	6063      	str	r3, [r4, #4]
 800600c:	4628      	mov	r0, r5
 800600e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006010:	6823      	ldr	r3, [r4, #0]
 8006012:	602b      	str	r3, [r5, #0]
 8006014:	68a3      	ldr	r3, [r4, #8]
 8006016:	60ab      	str	r3, [r5, #8]
 8006018:	e7f2      	b.n	8006000 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x24>

0800601a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800601a:	b510      	push	{r4, lr}
 800601c:	4604      	mov	r4, r0
 800601e:	f7ff ffc1 	bl	8005fa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8006022:	4620      	mov	r0, r4
 8006024:	bd10      	pop	{r4, pc}

08006026 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>:
 8006026:	b538      	push	{r3, r4, r5, lr}
 8006028:	6845      	ldr	r5, [r0, #4]
 800602a:	684c      	ldr	r4, [r1, #4]
 800602c:	6800      	ldr	r0, [r0, #0]
 800602e:	6809      	ldr	r1, [r1, #0]
 8006030:	42a5      	cmp	r5, r4
 8006032:	462a      	mov	r2, r5
 8006034:	bf28      	it	cs
 8006036:	4622      	movcs	r2, r4
 8006038:	f7ff ff7a 	bl	8005f30 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 800603c:	b900      	cbnz	r0, 8006040 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_+0x1a>
 800603e:	1b28      	subs	r0, r5, r4
 8006040:	bd38      	pop	{r3, r4, r5, pc}

08006042 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8006042:	6001      	str	r1, [r0, #0]
 8006044:	4770      	bx	lr

08006046 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8006046:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006048:	1a53      	subs	r3, r2, r1
 800604a:	2b0f      	cmp	r3, #15
 800604c:	4604      	mov	r4, r0
 800604e:	460d      	mov	r5, r1
 8006050:	4616      	mov	r6, r2
 8006052:	9301      	str	r3, [sp, #4]
 8006054:	d906      	bls.n	8006064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x1e>
 8006056:	2200      	movs	r2, #0
 8006058:	a901      	add	r1, sp, #4
 800605a:	f7ff ff81 	bl	8005f60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800605e:	9b01      	ldr	r3, [sp, #4]
 8006060:	6020      	str	r0, [r4, #0]
 8006062:	60a3      	str	r3, [r4, #8]
 8006064:	4632      	mov	r2, r6
 8006066:	4629      	mov	r1, r5
 8006068:	6820      	ldr	r0, [r4, #0]
 800606a:	f7ff ffb2 	bl	8005fd2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800606e:	9b01      	ldr	r3, [sp, #4]
 8006070:	6822      	ldr	r2, [r4, #0]
 8006072:	6063      	str	r3, [r4, #4]
 8006074:	2100      	movs	r1, #0
 8006076:	54d1      	strb	r1, [r2, r3]
 8006078:	b002      	add	sp, #8
 800607a:	bd70      	pop	{r4, r5, r6, pc}

0800607c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800607c:	b538      	push	{r3, r4, r5, lr}
 800607e:	f100 0308 	add.w	r3, r0, #8
 8006082:	4604      	mov	r4, r0
 8006084:	6003      	str	r3, [r0, #0]
 8006086:	460d      	mov	r5, r1
 8006088:	b911      	cbnz	r1, 8006090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x14>
 800608a:	4807      	ldr	r0, [pc, #28]	@ (80060a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x2c>)
 800608c:	f7ff ff46 	bl	8005f1c <_ZSt19__throw_logic_errorPKc>
 8006090:	4608      	mov	r0, r1
 8006092:	f7fa f8c1 	bl	8000218 <strlen>
 8006096:	f04f 0300 	mov.w	r3, #0
 800609a:	182a      	adds	r2, r5, r0
 800609c:	4629      	mov	r1, r5
 800609e:	4620      	mov	r0, r4
 80060a0:	f7ff ffd1 	bl	8006046 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80060a4:	4620      	mov	r0, r4
 80060a6:	bd38      	pop	{r3, r4, r5, pc}
 80060a8:	080064a8 	.word	0x080064a8

080060ac <_ZdlPv>:
 80060ac:	f000 b818 	b.w	80060e0 <free>

080060b0 <_ZSt15get_new_handlerv>:
 80060b0:	4b02      	ldr	r3, [pc, #8]	@ (80060bc <_ZSt15get_new_handlerv+0xc>)
 80060b2:	6818      	ldr	r0, [r3, #0]
 80060b4:	f3bf 8f5b 	dmb	ish
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	200003c0 	.word	0x200003c0

080060c0 <abort>:
 80060c0:	b508      	push	{r3, lr}
 80060c2:	2006      	movs	r0, #6
 80060c4:	f000 f902 	bl	80062cc <raise>
 80060c8:	2001      	movs	r0, #1
 80060ca:	f7fa fc7d 	bl	80009c8 <_exit>
	...

080060d0 <malloc>:
 80060d0:	4b02      	ldr	r3, [pc, #8]	@ (80060dc <malloc+0xc>)
 80060d2:	4601      	mov	r1, r0
 80060d4:	6818      	ldr	r0, [r3, #0]
 80060d6:	f000 b82d 	b.w	8006134 <_malloc_r>
 80060da:	bf00      	nop
 80060dc:	20000014 	.word	0x20000014

080060e0 <free>:
 80060e0:	4b02      	ldr	r3, [pc, #8]	@ (80060ec <free+0xc>)
 80060e2:	4601      	mov	r1, r0
 80060e4:	6818      	ldr	r0, [r3, #0]
 80060e6:	f000 b957 	b.w	8006398 <_free_r>
 80060ea:	bf00      	nop
 80060ec:	20000014 	.word	0x20000014

080060f0 <sbrk_aligned>:
 80060f0:	b570      	push	{r4, r5, r6, lr}
 80060f2:	4e0f      	ldr	r6, [pc, #60]	@ (8006130 <sbrk_aligned+0x40>)
 80060f4:	460c      	mov	r4, r1
 80060f6:	6831      	ldr	r1, [r6, #0]
 80060f8:	4605      	mov	r5, r0
 80060fa:	b911      	cbnz	r1, 8006102 <sbrk_aligned+0x12>
 80060fc:	f000 f902 	bl	8006304 <_sbrk_r>
 8006100:	6030      	str	r0, [r6, #0]
 8006102:	4621      	mov	r1, r4
 8006104:	4628      	mov	r0, r5
 8006106:	f000 f8fd 	bl	8006304 <_sbrk_r>
 800610a:	1c43      	adds	r3, r0, #1
 800610c:	d103      	bne.n	8006116 <sbrk_aligned+0x26>
 800610e:	f04f 34ff 	mov.w	r4, #4294967295
 8006112:	4620      	mov	r0, r4
 8006114:	bd70      	pop	{r4, r5, r6, pc}
 8006116:	1cc4      	adds	r4, r0, #3
 8006118:	f024 0403 	bic.w	r4, r4, #3
 800611c:	42a0      	cmp	r0, r4
 800611e:	d0f8      	beq.n	8006112 <sbrk_aligned+0x22>
 8006120:	1a21      	subs	r1, r4, r0
 8006122:	4628      	mov	r0, r5
 8006124:	f000 f8ee 	bl	8006304 <_sbrk_r>
 8006128:	3001      	adds	r0, #1
 800612a:	d1f2      	bne.n	8006112 <sbrk_aligned+0x22>
 800612c:	e7ef      	b.n	800610e <sbrk_aligned+0x1e>
 800612e:	bf00      	nop
 8006130:	200003c4 	.word	0x200003c4

08006134 <_malloc_r>:
 8006134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006138:	1ccd      	adds	r5, r1, #3
 800613a:	f025 0503 	bic.w	r5, r5, #3
 800613e:	3508      	adds	r5, #8
 8006140:	2d0c      	cmp	r5, #12
 8006142:	bf38      	it	cc
 8006144:	250c      	movcc	r5, #12
 8006146:	2d00      	cmp	r5, #0
 8006148:	4606      	mov	r6, r0
 800614a:	db01      	blt.n	8006150 <_malloc_r+0x1c>
 800614c:	42a9      	cmp	r1, r5
 800614e:	d904      	bls.n	800615a <_malloc_r+0x26>
 8006150:	230c      	movs	r3, #12
 8006152:	6033      	str	r3, [r6, #0]
 8006154:	2000      	movs	r0, #0
 8006156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800615a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006230 <_malloc_r+0xfc>
 800615e:	f000 f869 	bl	8006234 <__malloc_lock>
 8006162:	f8d8 3000 	ldr.w	r3, [r8]
 8006166:	461c      	mov	r4, r3
 8006168:	bb44      	cbnz	r4, 80061bc <_malloc_r+0x88>
 800616a:	4629      	mov	r1, r5
 800616c:	4630      	mov	r0, r6
 800616e:	f7ff ffbf 	bl	80060f0 <sbrk_aligned>
 8006172:	1c43      	adds	r3, r0, #1
 8006174:	4604      	mov	r4, r0
 8006176:	d158      	bne.n	800622a <_malloc_r+0xf6>
 8006178:	f8d8 4000 	ldr.w	r4, [r8]
 800617c:	4627      	mov	r7, r4
 800617e:	2f00      	cmp	r7, #0
 8006180:	d143      	bne.n	800620a <_malloc_r+0xd6>
 8006182:	2c00      	cmp	r4, #0
 8006184:	d04b      	beq.n	800621e <_malloc_r+0xea>
 8006186:	6823      	ldr	r3, [r4, #0]
 8006188:	4639      	mov	r1, r7
 800618a:	4630      	mov	r0, r6
 800618c:	eb04 0903 	add.w	r9, r4, r3
 8006190:	f000 f8b8 	bl	8006304 <_sbrk_r>
 8006194:	4581      	cmp	r9, r0
 8006196:	d142      	bne.n	800621e <_malloc_r+0xea>
 8006198:	6821      	ldr	r1, [r4, #0]
 800619a:	1a6d      	subs	r5, r5, r1
 800619c:	4629      	mov	r1, r5
 800619e:	4630      	mov	r0, r6
 80061a0:	f7ff ffa6 	bl	80060f0 <sbrk_aligned>
 80061a4:	3001      	adds	r0, #1
 80061a6:	d03a      	beq.n	800621e <_malloc_r+0xea>
 80061a8:	6823      	ldr	r3, [r4, #0]
 80061aa:	442b      	add	r3, r5
 80061ac:	6023      	str	r3, [r4, #0]
 80061ae:	f8d8 3000 	ldr.w	r3, [r8]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	bb62      	cbnz	r2, 8006210 <_malloc_r+0xdc>
 80061b6:	f8c8 7000 	str.w	r7, [r8]
 80061ba:	e00f      	b.n	80061dc <_malloc_r+0xa8>
 80061bc:	6822      	ldr	r2, [r4, #0]
 80061be:	1b52      	subs	r2, r2, r5
 80061c0:	d420      	bmi.n	8006204 <_malloc_r+0xd0>
 80061c2:	2a0b      	cmp	r2, #11
 80061c4:	d917      	bls.n	80061f6 <_malloc_r+0xc2>
 80061c6:	1961      	adds	r1, r4, r5
 80061c8:	42a3      	cmp	r3, r4
 80061ca:	6025      	str	r5, [r4, #0]
 80061cc:	bf18      	it	ne
 80061ce:	6059      	strne	r1, [r3, #4]
 80061d0:	6863      	ldr	r3, [r4, #4]
 80061d2:	bf08      	it	eq
 80061d4:	f8c8 1000 	streq.w	r1, [r8]
 80061d8:	5162      	str	r2, [r4, r5]
 80061da:	604b      	str	r3, [r1, #4]
 80061dc:	4630      	mov	r0, r6
 80061de:	f000 f82f 	bl	8006240 <__malloc_unlock>
 80061e2:	f104 000b 	add.w	r0, r4, #11
 80061e6:	1d23      	adds	r3, r4, #4
 80061e8:	f020 0007 	bic.w	r0, r0, #7
 80061ec:	1ac2      	subs	r2, r0, r3
 80061ee:	bf1c      	itt	ne
 80061f0:	1a1b      	subne	r3, r3, r0
 80061f2:	50a3      	strne	r3, [r4, r2]
 80061f4:	e7af      	b.n	8006156 <_malloc_r+0x22>
 80061f6:	6862      	ldr	r2, [r4, #4]
 80061f8:	42a3      	cmp	r3, r4
 80061fa:	bf0c      	ite	eq
 80061fc:	f8c8 2000 	streq.w	r2, [r8]
 8006200:	605a      	strne	r2, [r3, #4]
 8006202:	e7eb      	b.n	80061dc <_malloc_r+0xa8>
 8006204:	4623      	mov	r3, r4
 8006206:	6864      	ldr	r4, [r4, #4]
 8006208:	e7ae      	b.n	8006168 <_malloc_r+0x34>
 800620a:	463c      	mov	r4, r7
 800620c:	687f      	ldr	r7, [r7, #4]
 800620e:	e7b6      	b.n	800617e <_malloc_r+0x4a>
 8006210:	461a      	mov	r2, r3
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	42a3      	cmp	r3, r4
 8006216:	d1fb      	bne.n	8006210 <_malloc_r+0xdc>
 8006218:	2300      	movs	r3, #0
 800621a:	6053      	str	r3, [r2, #4]
 800621c:	e7de      	b.n	80061dc <_malloc_r+0xa8>
 800621e:	230c      	movs	r3, #12
 8006220:	6033      	str	r3, [r6, #0]
 8006222:	4630      	mov	r0, r6
 8006224:	f000 f80c 	bl	8006240 <__malloc_unlock>
 8006228:	e794      	b.n	8006154 <_malloc_r+0x20>
 800622a:	6005      	str	r5, [r0, #0]
 800622c:	e7d6      	b.n	80061dc <_malloc_r+0xa8>
 800622e:	bf00      	nop
 8006230:	200003c8 	.word	0x200003c8

08006234 <__malloc_lock>:
 8006234:	4801      	ldr	r0, [pc, #4]	@ (800623c <__malloc_lock+0x8>)
 8006236:	f000 b89f 	b.w	8006378 <__retarget_lock_acquire_recursive>
 800623a:	bf00      	nop
 800623c:	20000508 	.word	0x20000508

08006240 <__malloc_unlock>:
 8006240:	4801      	ldr	r0, [pc, #4]	@ (8006248 <__malloc_unlock+0x8>)
 8006242:	f000 b89a 	b.w	800637a <__retarget_lock_release_recursive>
 8006246:	bf00      	nop
 8006248:	20000508 	.word	0x20000508

0800624c <memcmp>:
 800624c:	b510      	push	{r4, lr}
 800624e:	3901      	subs	r1, #1
 8006250:	4402      	add	r2, r0
 8006252:	4290      	cmp	r0, r2
 8006254:	d101      	bne.n	800625a <memcmp+0xe>
 8006256:	2000      	movs	r0, #0
 8006258:	e005      	b.n	8006266 <memcmp+0x1a>
 800625a:	7803      	ldrb	r3, [r0, #0]
 800625c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006260:	42a3      	cmp	r3, r4
 8006262:	d001      	beq.n	8006268 <memcmp+0x1c>
 8006264:	1b18      	subs	r0, r3, r4
 8006266:	bd10      	pop	{r4, pc}
 8006268:	3001      	adds	r0, #1
 800626a:	e7f2      	b.n	8006252 <memcmp+0x6>

0800626c <memset>:
 800626c:	4402      	add	r2, r0
 800626e:	4603      	mov	r3, r0
 8006270:	4293      	cmp	r3, r2
 8006272:	d100      	bne.n	8006276 <memset+0xa>
 8006274:	4770      	bx	lr
 8006276:	f803 1b01 	strb.w	r1, [r3], #1
 800627a:	e7f9      	b.n	8006270 <memset+0x4>

0800627c <_raise_r>:
 800627c:	291f      	cmp	r1, #31
 800627e:	b538      	push	{r3, r4, r5, lr}
 8006280:	4605      	mov	r5, r0
 8006282:	460c      	mov	r4, r1
 8006284:	d904      	bls.n	8006290 <_raise_r+0x14>
 8006286:	2316      	movs	r3, #22
 8006288:	6003      	str	r3, [r0, #0]
 800628a:	f04f 30ff 	mov.w	r0, #4294967295
 800628e:	bd38      	pop	{r3, r4, r5, pc}
 8006290:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006292:	b112      	cbz	r2, 800629a <_raise_r+0x1e>
 8006294:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006298:	b94b      	cbnz	r3, 80062ae <_raise_r+0x32>
 800629a:	4628      	mov	r0, r5
 800629c:	f000 f830 	bl	8006300 <_getpid_r>
 80062a0:	4622      	mov	r2, r4
 80062a2:	4601      	mov	r1, r0
 80062a4:	4628      	mov	r0, r5
 80062a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062aa:	f000 b817 	b.w	80062dc <_kill_r>
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d00a      	beq.n	80062c8 <_raise_r+0x4c>
 80062b2:	1c59      	adds	r1, r3, #1
 80062b4:	d103      	bne.n	80062be <_raise_r+0x42>
 80062b6:	2316      	movs	r3, #22
 80062b8:	6003      	str	r3, [r0, #0]
 80062ba:	2001      	movs	r0, #1
 80062bc:	e7e7      	b.n	800628e <_raise_r+0x12>
 80062be:	2100      	movs	r1, #0
 80062c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80062c4:	4620      	mov	r0, r4
 80062c6:	4798      	blx	r3
 80062c8:	2000      	movs	r0, #0
 80062ca:	e7e0      	b.n	800628e <_raise_r+0x12>

080062cc <raise>:
 80062cc:	4b02      	ldr	r3, [pc, #8]	@ (80062d8 <raise+0xc>)
 80062ce:	4601      	mov	r1, r0
 80062d0:	6818      	ldr	r0, [r3, #0]
 80062d2:	f7ff bfd3 	b.w	800627c <_raise_r>
 80062d6:	bf00      	nop
 80062d8:	20000014 	.word	0x20000014

080062dc <_kill_r>:
 80062dc:	b538      	push	{r3, r4, r5, lr}
 80062de:	4d07      	ldr	r5, [pc, #28]	@ (80062fc <_kill_r+0x20>)
 80062e0:	2300      	movs	r3, #0
 80062e2:	4604      	mov	r4, r0
 80062e4:	4608      	mov	r0, r1
 80062e6:	4611      	mov	r1, r2
 80062e8:	602b      	str	r3, [r5, #0]
 80062ea:	f7fa fb5d 	bl	80009a8 <_kill>
 80062ee:	1c43      	adds	r3, r0, #1
 80062f0:	d102      	bne.n	80062f8 <_kill_r+0x1c>
 80062f2:	682b      	ldr	r3, [r5, #0]
 80062f4:	b103      	cbz	r3, 80062f8 <_kill_r+0x1c>
 80062f6:	6023      	str	r3, [r4, #0]
 80062f8:	bd38      	pop	{r3, r4, r5, pc}
 80062fa:	bf00      	nop
 80062fc:	20000504 	.word	0x20000504

08006300 <_getpid_r>:
 8006300:	f7fa bb4a 	b.w	8000998 <_getpid>

08006304 <_sbrk_r>:
 8006304:	b538      	push	{r3, r4, r5, lr}
 8006306:	4d06      	ldr	r5, [pc, #24]	@ (8006320 <_sbrk_r+0x1c>)
 8006308:	2300      	movs	r3, #0
 800630a:	4604      	mov	r4, r0
 800630c:	4608      	mov	r0, r1
 800630e:	602b      	str	r3, [r5, #0]
 8006310:	f7fa fb66 	bl	80009e0 <_sbrk>
 8006314:	1c43      	adds	r3, r0, #1
 8006316:	d102      	bne.n	800631e <_sbrk_r+0x1a>
 8006318:	682b      	ldr	r3, [r5, #0]
 800631a:	b103      	cbz	r3, 800631e <_sbrk_r+0x1a>
 800631c:	6023      	str	r3, [r4, #0]
 800631e:	bd38      	pop	{r3, r4, r5, pc}
 8006320:	20000504 	.word	0x20000504

08006324 <__errno>:
 8006324:	4b01      	ldr	r3, [pc, #4]	@ (800632c <__errno+0x8>)
 8006326:	6818      	ldr	r0, [r3, #0]
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	20000014 	.word	0x20000014

08006330 <__libc_init_array>:
 8006330:	b570      	push	{r4, r5, r6, lr}
 8006332:	4d0d      	ldr	r5, [pc, #52]	@ (8006368 <__libc_init_array+0x38>)
 8006334:	4c0d      	ldr	r4, [pc, #52]	@ (800636c <__libc_init_array+0x3c>)
 8006336:	1b64      	subs	r4, r4, r5
 8006338:	10a4      	asrs	r4, r4, #2
 800633a:	2600      	movs	r6, #0
 800633c:	42a6      	cmp	r6, r4
 800633e:	d109      	bne.n	8006354 <__libc_init_array+0x24>
 8006340:	4d0b      	ldr	r5, [pc, #44]	@ (8006370 <__libc_init_array+0x40>)
 8006342:	4c0c      	ldr	r4, [pc, #48]	@ (8006374 <__libc_init_array+0x44>)
 8006344:	f000 f872 	bl	800642c <_init>
 8006348:	1b64      	subs	r4, r4, r5
 800634a:	10a4      	asrs	r4, r4, #2
 800634c:	2600      	movs	r6, #0
 800634e:	42a6      	cmp	r6, r4
 8006350:	d105      	bne.n	800635e <__libc_init_array+0x2e>
 8006352:	bd70      	pop	{r4, r5, r6, pc}
 8006354:	f855 3b04 	ldr.w	r3, [r5], #4
 8006358:	4798      	blx	r3
 800635a:	3601      	adds	r6, #1
 800635c:	e7ee      	b.n	800633c <__libc_init_array+0xc>
 800635e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006362:	4798      	blx	r3
 8006364:	3601      	adds	r6, #1
 8006366:	e7f2      	b.n	800634e <__libc_init_array+0x1e>
 8006368:	080064e4 	.word	0x080064e4
 800636c:	080064e4 	.word	0x080064e4
 8006370:	080064e4 	.word	0x080064e4
 8006374:	080064ec 	.word	0x080064ec

08006378 <__retarget_lock_acquire_recursive>:
 8006378:	4770      	bx	lr

0800637a <__retarget_lock_release_recursive>:
 800637a:	4770      	bx	lr

0800637c <memcpy>:
 800637c:	440a      	add	r2, r1
 800637e:	4291      	cmp	r1, r2
 8006380:	f100 33ff 	add.w	r3, r0, #4294967295
 8006384:	d100      	bne.n	8006388 <memcpy+0xc>
 8006386:	4770      	bx	lr
 8006388:	b510      	push	{r4, lr}
 800638a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800638e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006392:	4291      	cmp	r1, r2
 8006394:	d1f9      	bne.n	800638a <memcpy+0xe>
 8006396:	bd10      	pop	{r4, pc}

08006398 <_free_r>:
 8006398:	b538      	push	{r3, r4, r5, lr}
 800639a:	4605      	mov	r5, r0
 800639c:	2900      	cmp	r1, #0
 800639e:	d041      	beq.n	8006424 <_free_r+0x8c>
 80063a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063a4:	1f0c      	subs	r4, r1, #4
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	bfb8      	it	lt
 80063aa:	18e4      	addlt	r4, r4, r3
 80063ac:	f7ff ff42 	bl	8006234 <__malloc_lock>
 80063b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006428 <_free_r+0x90>)
 80063b2:	6813      	ldr	r3, [r2, #0]
 80063b4:	b933      	cbnz	r3, 80063c4 <_free_r+0x2c>
 80063b6:	6063      	str	r3, [r4, #4]
 80063b8:	6014      	str	r4, [r2, #0]
 80063ba:	4628      	mov	r0, r5
 80063bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063c0:	f7ff bf3e 	b.w	8006240 <__malloc_unlock>
 80063c4:	42a3      	cmp	r3, r4
 80063c6:	d908      	bls.n	80063da <_free_r+0x42>
 80063c8:	6820      	ldr	r0, [r4, #0]
 80063ca:	1821      	adds	r1, r4, r0
 80063cc:	428b      	cmp	r3, r1
 80063ce:	bf01      	itttt	eq
 80063d0:	6819      	ldreq	r1, [r3, #0]
 80063d2:	685b      	ldreq	r3, [r3, #4]
 80063d4:	1809      	addeq	r1, r1, r0
 80063d6:	6021      	streq	r1, [r4, #0]
 80063d8:	e7ed      	b.n	80063b6 <_free_r+0x1e>
 80063da:	461a      	mov	r2, r3
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	b10b      	cbz	r3, 80063e4 <_free_r+0x4c>
 80063e0:	42a3      	cmp	r3, r4
 80063e2:	d9fa      	bls.n	80063da <_free_r+0x42>
 80063e4:	6811      	ldr	r1, [r2, #0]
 80063e6:	1850      	adds	r0, r2, r1
 80063e8:	42a0      	cmp	r0, r4
 80063ea:	d10b      	bne.n	8006404 <_free_r+0x6c>
 80063ec:	6820      	ldr	r0, [r4, #0]
 80063ee:	4401      	add	r1, r0
 80063f0:	1850      	adds	r0, r2, r1
 80063f2:	4283      	cmp	r3, r0
 80063f4:	6011      	str	r1, [r2, #0]
 80063f6:	d1e0      	bne.n	80063ba <_free_r+0x22>
 80063f8:	6818      	ldr	r0, [r3, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	6053      	str	r3, [r2, #4]
 80063fe:	4408      	add	r0, r1
 8006400:	6010      	str	r0, [r2, #0]
 8006402:	e7da      	b.n	80063ba <_free_r+0x22>
 8006404:	d902      	bls.n	800640c <_free_r+0x74>
 8006406:	230c      	movs	r3, #12
 8006408:	602b      	str	r3, [r5, #0]
 800640a:	e7d6      	b.n	80063ba <_free_r+0x22>
 800640c:	6820      	ldr	r0, [r4, #0]
 800640e:	1821      	adds	r1, r4, r0
 8006410:	428b      	cmp	r3, r1
 8006412:	bf04      	itt	eq
 8006414:	6819      	ldreq	r1, [r3, #0]
 8006416:	685b      	ldreq	r3, [r3, #4]
 8006418:	6063      	str	r3, [r4, #4]
 800641a:	bf04      	itt	eq
 800641c:	1809      	addeq	r1, r1, r0
 800641e:	6021      	streq	r1, [r4, #0]
 8006420:	6054      	str	r4, [r2, #4]
 8006422:	e7ca      	b.n	80063ba <_free_r+0x22>
 8006424:	bd38      	pop	{r3, r4, r5, pc}
 8006426:	bf00      	nop
 8006428:	200003c8 	.word	0x200003c8

0800642c <_init>:
 800642c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642e:	bf00      	nop
 8006430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006432:	bc08      	pop	{r3}
 8006434:	469e      	mov	lr, r3
 8006436:	4770      	bx	lr

08006438 <_fini>:
 8006438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643a:	bf00      	nop
 800643c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800643e:	bc08      	pop	{r3}
 8006440:	469e      	mov	lr, r3
 8006442:	4770      	bx	lr
